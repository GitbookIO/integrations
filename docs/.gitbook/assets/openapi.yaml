openapi: 3.0.3
info:
  title: GitBook API
  description: The GitBook API
  termsOfService: https://policies.gitbook.com
  contact:
    name: API Support
    url: https://gitbook.com/support
    email: support@gitbook.com
  version: 0.0.1-beta
servers:
  - url: "{host}/v1"
    variables:
      host:
        default: https://api.gitbook.com
security:
  - user: []
  - user-internal: []
  - user-staff: []
  - integration: []
  - integration-installation: []
paths:
  /:
    get:
      operationId: getApiInformation
      tags:
        - api
      summary: Get information about the state of the GitBook API
      description: Access the release version and build date of the GitBook codebase
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiInformation"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /search:
    get:
      operationId: searchContent
      summary: Search content across spaces that is accessible by the currently authenticated target
      tags:
        - search
      security:
        - user: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            maxLength: 512
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SearchSpaceResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /search/ask:
    get:
      operationId: askQueryWithGet
      summary: Ask a question to an AI across spaces that is accessible by the currently authenticated target.
      deprecated: true
      security:
        - user: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Return query details in the result
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: "#/components/schemas/SearchAIAnswer"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: askQuery
      summary: Ask a question to an AI across spaces that is accessible by the currently authenticated target.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Return query details in the result
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAIQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: "#/components/schemas/SearchAIAnswer"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /search/questions:
    post:
      operationId: getRecommendedQuestions
      summary: Get a list of questions recommended by AI for a list of content. Deprecated, use getRecommendedQuestionsInOrganization instead.
      deprecated: true
      security:
        - user: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documents:
                  type: array
                  minItems: 1
                  maxItems: 50
                  items:
                    type: string
                    minLength: 1
                    maxLength: 100
              required:
                - documents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchAIRecommendedQuestions"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /user:
    get:
      operationId: getAuthenticatedUser
      summary: Get profile of authenticated user
      tags:
        - users
      security:
        - user: []
      description: |
        Returns details about the user associated with the authentication provided in the request's authorization header.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/users/{userId}":
    get:
      operationId: getUserById
      summary: Get a user by its ID
      tags:
        - users
        - critical
      security:
        - user: []
      description: |
        Provides publicly available information about someone with a GitBook account.
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}":
    get:
      operationId: getSpaceById
      summary: Get the details about a space.
      tags:
        - spaces
        - critical
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/siteShareKey"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateSpaceById
      summary: Update the details of a space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    editMode:
                      $ref: "#/components/schemas/SpaceEditMode"
                    title:
                      $ref: "#/components/schemas/SpaceTitle"
                    defaultLevel:
                      $ref: "#/components/schemas/DefaultLevel"
                - oneOf:
                    - type: object
                      title: Emoji
                      properties:
                        emoji:
                          $ref: "#/components/schemas/Emoji"
                      required:
                        - emoji
                    - type: object
                      title: Icon
                      properties:
                        icon:
                          $ref: "#/components/schemas/URL"
                      required:
                        - icon
                    - type: object
                      title: Remove icon or emoji
                      properties:
                        emoji:
                          type: string
                          nullable: true
                          enum:
                            - null
                        icon:
                          type: string
                          nullable: true
                          enum:
                            - null
      responses:
        "200":
          description: The space has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSpaceById
      summary: Soft-deletes a space. Soft-deleted spaces will be permanently removed after 7 days.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "205":
          description: Space has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/duplicate":
    post:
      operationId: duplicateSpace
      summary: Create a duplicate of the space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "201":
          description: Space duplicated
          headers:
            Location:
              description: API URL for the newly created space
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/restore":
    post:
      operationId: restoreSpace
      summary: Restore a recently soft-deleted space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: Space restored
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/move":
    post:
      operationId: moveSpace
      summary: Move a space to a new position.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                parent:
                  description: The unique id of the parent collection
                  type: string
                  nullable: true
                position:
                  description: Where to move the space. By default, it will be moved at the end.
                  $ref: "#/components/schemas/ContentPosition"
      responses:
        "200":
          description: Space moved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "400":
          description: Invalid position space or collection provided
          $ref: "#/components/responses/BadRequestError"
        "404":
          description: No matching Space found for given ID
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Operation would not result in any update
          $ref: "#/components/responses/ConflictError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/transfer":
    post:
      operationId: transferSpace
      summary: Transfer a space to another organization, collection or both.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization:
                  type: string
                  description: The unique id of the target organization
              required:
                - organization
      responses:
        "200":
          description: Space transferred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "404":
          description: No matching Space found for given ID
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Transfer would not result in any update
          $ref: "#/components/responses/ConflictError"
        "412":
          description: The space cannot be moved.
          $ref: "#/components/responses/PreconditionFailedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/embed":
    get:
      operationId: getEmbedByUrlInSpace
      summary: Resolve a URL to an embed in a given space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - name: url
          in: query
          required: true
          description: URL to resolve
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embed"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/search":
    get:
      operationId: searchSpaceContent
      summary: Search content in a space
      security:
        - user: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            maxLength: 512
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SearchPageResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/search/ask":
    get:
      operationId: askQueryInSpaceWithGet
      summary: Ask a question to an AI within the context of the space.
      deprecated: true
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Return query details in the result
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: "#/components/schemas/SearchAIAnswer"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: askQueryInSpace
      summary: Ask a question to an AI within the context of the space.
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Return query details in the result
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAIQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: "#/components/schemas/SearchAIAnswer"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/search/ask/stream":
    get:
      operationId: streamAskInSpace
      summary: Ask a question to an AI within the context of the space and stream the answer as a Server-Sent Events URL.
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - name: query
          in: query
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Ensure that the response is never null
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SearchAIAnswerStream"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/search/questions":
    get:
      operationId: getRecommendedQuestionsInSpace
      summary: Get a list of questions that can be asked in a space.
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchAIRecommendedQuestions"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/search/questions/stream":
    get:
      operationId: streamRecommendedQuestionsInSpace
      summary: Stream a list of questions that can be asked in a space.
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SearchAIRecommendedQuestionStream"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/git/import":
    post:
      operationId: importGitRepository
      summary: Import a Git repository
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "204":
          description: Operation to import the repository has been started.
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportGitRepository"
  "/spaces/{spaceId}/git/export":
    post:
      operationId: exportToGitRepository
      summary: Export the space content to a Git repository.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "204":
          description: Operation to export the space has been started.
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportToGitRepository"
  "/spaces/{spaceId}/git/info":
    get:
      operationId: getSpaceGitInfo
      summary: Get metadata about the Git Sync provider currently set up on the space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: The Git Sync info for the space
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitSyncState"
        "404":
          description: No Git provider currently set up on the space
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/insights/content":
    get:
      operationId: getContentAnalyticsForSpaceById
      summary: Get content analytics for a given space.
      tags:
        - analytics
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: Content analytics per page.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsContentPages"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/insights/search":
    get:
      operationId: getSearchAnalyticsForSpaceById
      summary: Get an overview of the top search queries in a space.
      tags:
        - analytics
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - name: period
          required: false
          in: query
          schema:
            $ref: "#/components/schemas/AnalyticsSearchPeriod"
      responses:
        "200":
          description: Top queries searched on this space.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsTopSearches"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/insights/traffic":
    get:
      operationId: getTrafficAnalyticsForSpaceById
      summary: Get traffic page views for a given space
      description: Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
      tags:
        - analytics
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - name: interval
          required: false
          in: query
          schema:
            $ref: "#/components/schemas/AnalyticsTrafficInterval"
      responses:
        "200":
          description: Traffic over time for the given space.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsTrafficPageViews"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/insights/track_view":
    post:
      operationId: trackViewInSpaceById
      summary: Track a page view in a space
      description: Track a page view in a space.
      tags:
        - analytics
        - spaces
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "204":
          description: Page view has been tracked.
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceTrackPageView"
  "/spaces/{spaceId}/permissions":
    post:
      operationId: inviteToSpace
      summary: Invite to a space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "204":
          description: OK
        "404":
          description: No team or user with the provided Id
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUsersAndTeams"
  "/spaces/{spaceId}/permissions/teams/{teamId}":
    delete:
      operationId: removeTeamFromSpace
      summary: Remove a team from a space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/teamId"
      responses:
        "205":
          description: The team has been removed from the space
        "400":
          description: Team does not have access to space
          $ref: "#/components/responses/BadRequestError"
        "404":
          description: No team found with the given ID
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/permissions/users/{userId}":
    delete:
      operationId: removeUserFromSpace
      summary: Remove a user from a space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/userId"
      responses:
        "205":
          description: The user has been removed from the space
        "404":
          description: No user found with the given ID
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content":
    get:
      operationId: getCurrentRevision
      summary: Get the current primary content revision for a space
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/import":
    post:
      summary: Import content in a space.
      operationId: importContent
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "201":
          description: Content imported in a new revision
          headers:
            Location:
              description: API URL for the newly created revision
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportContentResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportContent"
  "/spaces/{spaceId}/content/pages":
    get:
      summary: List all pages for the main revision content of a space
      operationId: listPages
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pages:
                    type: array
                    items:
                      $ref: "#/components/schemas/RevisionPage"
                required:
                  - pages
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/files":
    get:
      summary: List all files for the main revision content of a space
      operationId: listFiles
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/RevisionFile"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/files/{fileId}":
    get:
      summary: Get a file by its ID in the main revision of a space
      operationId: getFileById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/fileId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionFile"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/files/{fileId}/backlinks":
    get:
      operationId: listSpaceFileBacklinks
      summary: Get backlink locations for a file existing in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/fileId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentLocation"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/page/{pageId}":
    get:
      operationId: getPageById
      summary: Get a page by its ID in the primary content.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionPage"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/page/{pageId}/links":
    get:
      operationId: listPageLinksInSpace
      summary: List all links in a page
      tags:
        - spaces
        - links
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: status
          in: query
          schema:
            $ref: "#/components/schemas/ContentReferenceStatus"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      stats:
                        $ref: "#/components/schemas/ContentReferencesStats"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentReferenceUsage"
                    required:
                      - items
                      - stats
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/page/{pageId}/backlinks":
    get:
      operationId: listSpacePageBacklinks
      summary: Get backlink locations for a page existing in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentLocation"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/page/{pageId}/import":
    post:
      operationId: importContentInPageById
      summary: Import external content into a page by its ID.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pageId"
      responses:
        "201":
          description: Content imported in a new revision
          headers:
            Location:
              description: API URL for the newly created revision
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportContentResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportContent"
  "/spaces/{spaceId}/content/path/{pagePath}":
    get:
      operationId: getPageByPath
      summary: Get a page by its path in the primary content.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pagePath"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RevisionPageDocument"
                  - $ref: "#/components/schemas/RevisionPageGroup"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/reusable-contents/{reusableContentId}":
    get:
      summary: Get a reusable content by its ID in the main revision of a space
      operationId: getReusableContentById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/reusableContentId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionReusableContent"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/computed/document":
    get:
      operationId: getComputedDocument
      summary: Get the document for a page in a computed content.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/documentFormat"
        - name: request
          in: query
          required: true
          description: LZ-string compressed JSON request
          schema:
            type: string
      responses:
        "200":
          description: Document computed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/content/computed/page":
    get:
      operationId: getComputedPage
      summary: Get the computed pages for a page in a computed content.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/documentFormat"
        - name: request
          in: query
          required: true
          description: LZ-string compressed JSON request
          schema:
            type: string
      responses:
        "200":
          description: Computed pages and their associated files
          content:
            application/json:
              schema:
                type: object
                properties:
                  pages:
                    type: array
                    items:
                      $ref: "#/components/schemas/RevisionPage"
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/RevisionFile"
                required:
                  - pages
                  - files
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/documents/{documentId}":
    get:
      operationId: getDocumentById
      summary: Get a document by its ID in a space.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - name: documentId
          in: path
          required: true
          description: ID of the document in the space
          schema:
            type: string
        - $ref: "#/components/parameters/documentSchema"
      responses:
        "200":
          description: Document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JSONDocument"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests":
    post:
      operationId: createChangeRequest
      summary: Create a new change request for a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "201":
          description: Change Request Created
          headers:
            Location:
              description: API URL for the newly created change-request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangeRequest"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChangeRequest"
    get:
      operationId: listChangeRequestsForSpace
      summary: List change requests for a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/spaceId"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ChangeRequestStatus"
            default: open
          description: If defined, only change requests matching this status will be returned.
        - name: contributor
          in: query
          required: false
          schema:
            type: string
          description: If defined, only change requests with contributions from this user will be returned.
      responses:
        "200":
          description: List of the space's change requests
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ChangeRequest"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}":
    get:
      operationId: getChangeRequestById
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      summary: Get the change request with the given id.
      responses:
        "200":
          description: The matching change request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangeRequest"
        "404":
          description: The change request could not be found.
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateChangeRequestById
      summary: Update the details of a change request
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  $ref: "#/components/schemas/ChangeRequestSubject"
                status:
                  type: string
                  enum:
                    - draft
                    - open
                    - archived
      responses:
        "200":
          description: The change request has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangeRequest"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/merge":
    post:
      operationId: mergeChangeRequest
      summary: Merge a change request in the primary content of a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision:
                    type: string
                    description: ID of the resulting revision
                  result:
                    type: string
                    enum:
                      - merge
                      - conflicts
                required:
                  - revision
                  - result
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/update":
    post:
      operationId: updateChangeRequest
      summary: Update a change-request with changes from primary content.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision:
                    type: string
                    description: ID of the resulting revision
                  result:
                    type: string
                    enum:
                      - update
                      - conflicts
                required:
                  - revision
                  - result
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/reviews":
    get:
      operationId: getReviewsByChangeRequestId
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      summary: Get all reviews for a change request.
      responses:
        "200":
          description: All reviews for the given change request.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ChangeRequestReview"
        "404":
          description: The change request or space could not be found.
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: submitChangeRequestReview
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      summary: Submit a review for a change request.
      responses:
        "201":
          headers:
            Location:
              description: API URL for the newly created review
              schema:
                type: string
          description: A new review has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangeRequestReview"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  description: The status of the submitted review.
                  $ref: "#/components/schemas/ChangeRequestReviewStatus"
                comment:
                  description: Optionally, provide a comment along with the review.
                  $ref: "#/components/schemas/Document"
              required:
                - status
  "/spaces/{spaceId}/change-requests/{changeRequestId}/requested-reviewers":
    get:
      operationId: getRequestedReviewersByChangeRequestId
      summary: Get all requested reviewers for a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: A list of requested reviewers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ChangeRequestRequestedReviewer"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: requestReviewersForChangeRequest
      summary: Request reviewers on a change request. Note that requesting a review from teams is not yet supported.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      responses:
        "200":
          description: The requests have successfully been sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    description: The user requests that were sent.
                    items:
                      $ref: "#/components/schemas/ChangeRequestRequestedReviewer"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  description: An array of user ids that will be requested.
                  items:
                    type: string
                subject:
                  type: string
                  description: Optionally, update the subject of the change request when requesting reviewers.
              required:
                - users
  "/spaces/{spaceId}/change-requests/{changeRequestId}/links":
    get:
      operationId: listChangeRequestLinks
      summary: Get all links in the context of a change request including their status and location where they appear.
      tags:
        - spaces
        - links
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ContentReferenceStatus"
        - name: brokenContext
          in: query
          required: false
          schema:
            type: string
            enum:
              - change-request
              - space
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      stats:
                        $ref: "#/components/schemas/ContentReferencesStats"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentReferenceUsage"
                    required:
                      - items
                      - stats
        "404":
          description: The change request could not be found.
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/comments":
    get:
      operationId: listCommentsInChangeRequest
      summary: List all the comments in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/listOrder"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/status"
        - $ref: "#/components/parameters/targetPage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: postCommentInChangeRequest
      summary: Post a new comment in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCommentSchema"
      responses:
        "200":
          description: The comment was posted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/comments/{commentId}":
    get:
      operationId: getCommentInChangeRequest
      summary: Get a comment in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: The returned comment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCommentInChangeRequest
      summary: Delete a comment in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
      responses:
        "205":
          description: The comment has been deleted.
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateCommentInChangeRequest
      summary: Update a comment in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCommentSchema"
      responses:
        "200":
          description: The comment was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/comments/{commentId}/replies":
    get:
      operationId: listCommentRepliesInChangeRequest
      summary: List all the replies to a comment in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: postCommentReplyInChangeRequest
      summary: Post a new reply to a comment in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/documentFormat"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCommentReplySchema"
      responses:
        "200":
          description: The reply was posted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/comments/{commentId}/replies/{commentReplyId}":
    get:
      operationId: getCommentReplyInChangeRequest
      summary: Get a comment reply in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/commentReplyId"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: The returned comment reply.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateCommentReplyInChangeRequest
      summary: Update a comment reply in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/commentReplyId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCommentSchema"
      responses:
        "200":
          description: The reply was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCommentReplyInChangeRequest
      summary: Delete a comment reply in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/commentReplyId"
      responses:
        "205":
          description: The comment has been deleted.
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/contributors":
    get:
      operationId: getContributorsByChangeRequestId
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      summary: Get all contributors for the change request with the given id.
      responses:
        "200":
          description: Contributors on the change request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserContributor"
        "404":
          description: The change request could not be found.
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content":
    get:
      operationId: getRevisionOfChangeRequestById
      summary: Get the latest content revision for a change request.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/import":
    post:
      summary: Import content in a change request.
      operationId: importContentInChangeRequest
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      responses:
        "201":
          description: Content imported in a new revision
          headers:
            Location:
              description: API URL for the newly created revision
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportContentResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportContent"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/pages":
    get:
      summary: List all pages in the content of a change request
      operationId: listPagesInChangeRequest
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pages:
                    type: array
                    items:
                      $ref: "#/components/schemas/RevisionPage"
                required:
                  - pages
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/files":
    get:
      summary: List all files in a change request content
      operationId: listFilesInChangeRequestById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/RevisionFile"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/files/{fileId}":
    get:
      summary: Get a file by its ID in the content of a change request
      operationId: getFileInChangeRequestById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/fileId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionFile"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/files/{fileId}/backlinks":
    get:
      operationId: listChangeRequestFileBacklinks
      summary: Get backlink locations for a file existing in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/fileId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentLocation"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/page/{pageId}":
    get:
      operationId: getPageInChangeRequestById
      summary: Get a page by its ID in a change request.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionPage"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/page/{pageId}/links":
    get:
      operationId: listPageLinksInChangeRequest
      summary: List all links in a page inside a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      stats:
                        $ref: "#/components/schemas/ContentReferencesStats"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentReferenceUsage"
                    required:
                      - items
                      - stats
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/page/{pageId}/backlinks":
    get:
      operationId: listChangeRequestPageBacklinks
      summary: Get backlink locations for a page existing in a change request.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentLocation"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/page/{pageId}/import":
    post:
      operationId: importContentInChangeRequestPageById
      summary: Import external content into a page of a change-request by its ID.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/pageId"
      responses:
        "201":
          description: Content imported in a new revision
          headers:
            Location:
              description: API URL for the newly created revision
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportContentResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportContent"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/path/{pagePath}":
    get:
      operationId: getPageInChangeRequestByPath
      summary: Get a page by its path in a change request.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/pagePath"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RevisionPageDocument"
                  - $ref: "#/components/schemas/RevisionPageGroup"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/content/reusable-contents/{reusableContentId}":
    get:
      summary: Get a reusable content by its ID in the content of a change request
      operationId: getReusableContentInChangeRequestById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - $ref: "#/components/parameters/reusableContentId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionReusableContent"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/pdf":
    get:
      operationId: getChangeRequestPDF
      summary: Generate a URL to export the content of a change request as a PDF.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
        - in: query
          name: only
          description: Generate a PDF only for the provided page.
          schema:
            type: boolean
        - in: query
          name: page
          description: ID of a specific page to generate a PDF for.
          schema:
            type: string
      responses:
        "200":
          description: URL of the PDF
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    description: Temporary URL to print the content. The URL will work for 1h.
                    $ref: "#/components/schemas/URL"
                required:
                  - url
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/change-requests/{changeRequestId}/task/brainstorm":
    post:
      operationId: streamBrainstormChangeRequest
      summary: Brainstorm with AI on a change request and stream the results as a Server-Sent Events.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      responses:
        "200":
          description: Updated session.
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/ChangeRequestBrainstormSession"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  description: Brainstorming session
                  $ref: "#/components/schemas/ChangeRequestBrainstormSession"
              required:
                - session
  "/spaces/{spaceId}/change-requests/{changeRequestId}/task/implement":
    post:
      operationId: streamImplementChangeRequestTask
      summary: Implement a task on a change request and stream the results as a Server-Sent Events.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/changeRequestId"
      responses:
        "200":
          description: Task being implemented.
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/ChangeRequestBrainstormPlan"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  description: Plan to run.
                  $ref: "#/components/schemas/ChangeRequestBrainstormPlan"
              required:
                - plan
  "/spaces/{spaceId}/revisions/{revisionId}":
    get:
      operationId: getRevisionById
      summary: Get a specific revision in a space
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Revision"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/changes":
    get:
      summary: Return the semantic changes between a revision and its parent.
      operationId: getRevisionSemanticChanges
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
        - name: limit
          in: query
          description: Limit the number of changes returned
          schema:
            type: number
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionSemanticChanges"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/pages":
    get:
      summary: List all pages in a revision
      operationId: listPagesInRevisionById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pages:
                    type: array
                    items:
                      $ref: "#/components/schemas/RevisionPage"
                required:
                  - pages
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/files":
    get:
      summary: List all files in a revision
      operationId: listFilesInRevisionById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/RevisionFile"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/files/{fileId}":
    get:
      summary: Get a file in a revision by its ID
      operationId: getFileInRevisionById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/fileId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionFile"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/page/{pageId}":
    get:
      operationId: getPageInRevisionById
      summary: Get a page by its ID in a revision.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionPage"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/path/{pagePath}":
    get:
      operationId: getPageInRevisionByPath
      summary: Get a page by its path in a revision.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/pagePath"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RevisionPageDocument"
                  - $ref: "#/components/schemas/RevisionPageGroup"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/revisions/{revisionId}/reusable-contents/{reusableContentId}":
    get:
      summary: Get reusbale content in a revision by its ID
      operationId: getReusableContentInRevisionById
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/revisionId"
        - $ref: "#/components/parameters/reusableContentId"
        - $ref: "#/components/parameters/revisionMetadata"
        - $ref: "#/components/parameters/revisionComputed"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevisionReusableContent"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/comments":
    get:
      operationId: listCommentsInSpace
      summary: List all the comments in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/listOrder"
        - $ref: "#/components/parameters/status"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/targetPage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: postCommentInSpace
      summary: Post a new comment in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCommentSchema"
      responses:
        "200":
          description: The comment was posted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/comments/{commentId}":
    get:
      operationId: getCommentInSpace
      summary: Get a comment in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: The returned comment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCommentInSpace
      summary: Delete a comment in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
      responses:
        "205":
          description: The comment has been deleted.
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateCommentInSpace
      summary: Update a comment in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCommentSchema"
      responses:
        "200":
          description: The comment was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/comments/{commentId}/replies":
    get:
      operationId: listCommentRepliesInSpace
      summary: List all the replies to a comment in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: postCommentReplyInSpace
      summary: Post a new reply to a comment in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCommentReplySchema"
      responses:
        "200":
          description: The reply was posted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/comments/{commentId}/replies/{commentReplyId}":
    get:
      operationId: getCommentReplyInSpace
      summary: Get a comment reply in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/commentReplyId"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: The returned comment reply.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateCommentReplyInSpace
      summary: Update a comment reply in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/commentReplyId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCommentReplySchema"
      responses:
        "200":
          description: The reply was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentReply"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCommentReplyInSpace
      summary: Delete a comment reply in a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/commentId"
        - $ref: "#/components/parameters/commentReplyId"
      responses:
        "205":
          description: The comment has been deleted.
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/permissions/aggregate":
    get:
      operationId: listPermissionsAggregateInSpace
      summary: List permissions for all users in a space.
      tags:
        - permissions
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: role
          in: query
          description: If defined, only members with this role will be returned.
          schema:
            $ref: "#/components/schemas/MemberRole"
      responses:
        "200":
          description: Listing of users who can access the space.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserContentPermission"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/publishing/customization":
    get:
      deprecated: true
      operationId: getSpacePublishingCustomizationById
      summary: Get the publishing customization configuration for a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      deprecated: true
      operationId: updateSpacePublishingCustomizationById
      summary: Update the publishing customization configuration for a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomizationSettings"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/integrations":
    get:
      operationId: listSpaceIntegrations
      summary: List integrations enabled in a space.
      tags:
        - integrations
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/integrationSearchQuery"
      responses:
        "200":
          description: Listing of integrations enabled in the space.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Integration"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/integration-blocks":
    get:
      operationId: listSpaceIntegrationsBlocks
      summary: List integrations blocks for a space
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: list of installed integration blocks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceIntegrationBlocks"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/integration-scripts":
    get:
      operationId: listSpaceIntegrationScripts
      summary: List the scripts to embed in published content for a space.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpaceIntegrationScript"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/custom-fields":
    get:
      operationId: getSpaceCustomFields
      summary: Get the values of the custom fields set on a space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFieldValues"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateSpaceCustomFields
      summary: Update the custom fields in a space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomFieldValues"
      responses:
        "204":
          description: Custom fields updated
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/pages/{pageId}/feedbacks/{visitorId}":
    get:
      operationId: getPageFeedback
      summary: Get a page feedback by a visitor.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/visitorId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFeedback"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: createPageFeedback
      summary: Create a page feedback by a visitor.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/visitorId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  $ref: "#/components/schemas/PageFeedbackRating"
              required:
                - rating
      responses:
        "200":
          description: Feedback updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFeedback"
        "201":
          description: Feedback created
          headers:
            Location:
              description: URL for the feedback
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFeedback"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/pdf":
    get:
      operationId: getSpacePDF
      summary: Generate a URL to export the content of the space as a PDF.
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - in: query
          name: only
          description: Generate a PDF only for the provided page.
          schema:
            type: boolean
        - in: query
          name: page
          description: ID of a specific page to generate a PDF for.
          schema:
            type: string
      responses:
        "200":
          description: URL of the PDF
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    description: Temporary URL to print the content. The URL will work for 1h.
                    $ref: "#/components/schemas/URL"
                required:
                  - url
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/spaces/{spaceId}/links":
    get:
      operationId: listSpaceLinks
      summary: Get all links in a space including their status and location where they appear.
      tags:
        - spaces
        - links
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: status
          in: query
          schema:
            $ref: "#/components/schemas/ContentReferenceStatus"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      stats:
                        $ref: "#/components/schemas/ContentReferencesStats"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ContentReferenceUsage"
                    required:
                      - items
                      - stats
        "404":
          description: The space could not be found.
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}":
    get:
      operationId: getCollectionById
      summary: Get the details about a collection using its ID
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateCollectionById
      summary: Update the details of a collection
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/CollectionTitle"
                description:
                  $ref: "#/components/schemas/CollectionDescription"
                defaultLevel:
                  $ref: "#/components/schemas/DefaultLevel"
      responses:
        "200":
          description: The collection has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCollectionById
      summary: Deletes a collection
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        "205":
          description: Collection has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}/spaces":
    get:
      operationId: listSpacesInCollectionById
      summary: List all the spaces in a collection by its ID.
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}/move":
    post:
      operationId: moveCollection
      summary: Move a collection to a new position.
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                parent:
                  description: The unique id of the parent collection
                  type: string
                  nullable: true
                position:
                  description: Where to move the collection. By default, it will be moved at the end.
                  $ref: "#/components/schemas/ContentPosition"
      responses:
        "200":
          description: Collection moved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "400":
          description: Invalid position space or collection provided
          $ref: "#/components/responses/BadRequestError"
        "404":
          description: No matching Collection found for given ID
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Operation would not result in any update
          $ref: "#/components/responses/ConflictError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}/transfer":
    post:
      operationId: transferCollection
      summary: Transfer a collection to another organization.
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization:
                  type: string
                  description: The unique id of the target organization
              required:
                - organization
      responses:
        "200":
          description: Collection transferred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "404":
          description: No matching Collection found for given ID
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Transfer would not result in any update
          $ref: "#/components/responses/ConflictError"
        "412":
          description: The collection cannot be moved.
          $ref: "#/components/responses/PreconditionFailedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}/permissions":
    post:
      operationId: inviteToCollection
      summary: Invite to a collection
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        "204":
          description: OK
        "404":
          description: No team or user with the provided Id
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUsersAndTeams"
  "/collections/{collectionId}/permissions/teams/{teamId}":
    delete:
      operationId: removeTeamFromCollection
      summary: Remove a team from a collection
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/teamId"
      responses:
        "205":
          description: The team has been removed from the collection
        "404":
          description: No team found with the given ID
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}/permissions/users/{userId}":
    delete:
      operationId: removeUserFromCollection
      summary: Remove a user from a collection
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/userId"
      responses:
        "205":
          description: The user has been removed from the collection
        "404":
          description: No user found with the given ID
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/collections/{collectionId}/permissions/aggregate":
    get:
      operationId: listPermissionsAggregateInCollection
      summary: List permissions for all users in a collection.
      tags:
        - permissions
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: role
          in: query
          description: If defined, only members with this role will be returned.
          schema:
            $ref: "#/components/schemas/MemberRole"
      responses:
        "200":
          description: Listing of users who can access the collections.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserContentPermission"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /integrations:
    get:
      operationId: listIntegrations
      summary: List all public integrations
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/integrationSearchQuery"
        - name: category
          in: query
          description: Filter the integrations by category
          schema:
            $ref: "#/components/schemas/IntegrationCategory"
        - name: blockDomain
          in: query
          description: Filter the integrations by block's domains
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-_.]+$
            maxLength: 100
        - name: blocks
          in: query
          description: If true, returns only integrations with blocks. If false, returns only integrations without blocks.
          schema:
            type: boolean
      responses:
        "200":
          description: Paginated list of integrations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Integration"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}":
    get:
      operationId: getIntegrationByName
      summary: Get a specific integration by its name
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
      responses:
        "200":
          description: Integration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "404":
          description: No matching integration found for given name
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: publishIntegration
      summary: Publish an integration
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "404":
          description: Organization could not be found for the given hostname
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishIntegration"
    delete:
      operationId: unpublishIntegration
      summary: Unpublish an integration
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
      responses:
        "204":
          description: Integration has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations":
    get:
      operationId: listIntegrationInstallations
      summary: Fetch a list of installations of an integration
      tags:
        - integrations
      security:
        - integration: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: externalId
          in: query
          description: External Id to filter by
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/IntegrationInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: installIntegration
      summary: Install integration on a target organization
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationTarget"
      responses:
        "201":
          headers:
            Location:
              description: URL for the installed integration
              schema:
                type: string
          description: Integration installed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationInstallation"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/events":
    get:
      operationId: listIntegrationEvents
      summary: List all integration events
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: Paginated list of integration events
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/IntegrationEvent"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/events/{eventId}":
    get:
      operationId: getIntegrationEvent
      summary: Get a specific integration event by its id
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/integrationEventId"
      responses:
        "200":
          description: Integration event
          content:
            application/json:
              schema:
                type: object
                required:
                  - event
                properties:
                  event:
                    $ref: "#/components/schemas/IntegrationEvent"
                  trace:
                    $ref: "#/components/schemas/IntegrationEventTrace"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/spaces":
    get:
      operationId: listIntegrationSpaceInstallations
      summary: Fetch a list of space installations of an integration
      tags:
        - integrations
      security:
        - integration: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: externalId
          in: query
          description: External Id to filter by
          schema:
            type: string
        - name: extended
          in: query
          description: If true, returns the space object in each items. If false, returns the space ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/IntegrationSpaceInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/dev":
    put:
      operationId: setIntegrationDevelopmentMode
      summary: Update an integration to be in development mode.
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tunnelUrl:
                  type: string
                  description: URL of the tunnel to dispatch integration events to
                  minLength: 1
                  maxLength: 256
                all:
                  type: boolean
                  default: false
                  description: |
                    If set to true, all requests will be forwarded to the tunnel, not just from the owning organization.
              required:
                - tunnelUrl
      responses:
        "204":
          description: Updated development mode successfully
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: disableIntegrationDevelopmentMode
      summary: Disable the development mode on an integration.
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
      responses:
        "205":
          description: Disabled development mode successfully
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/render":
    get:
      operationId: renderIntegrationUIWithGet
      summary: Render an integration UI in the context of an installation.
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - name: request
          in: query
          required: true
          description: LZ-string compressed JSON request
          schema:
            type: string
      responses:
        "200":
          description: ContentKit element to render
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentKitRenderOutput"
          headers:
            Cache-Control:
              schema:
                type: string
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: renderIntegrationUIWithPost
      summary: Render an integration UI in the context of an installation.
      parameters:
        - $ref: "#/components/parameters/integrationName"
      responses:
        "200":
          description: ContentKit element to render
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentKitRenderOutput"
          headers:
            Cache-Control:
              schema:
                type: string
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenderIntegrationUI"
  "/integrations/{integrationName}/tasks":
    post:
      operationId: queueIntegrationTask
      summary: Queue a task for an integration to be executed later
      tags:
        - integrations
      security:
        - integration: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: object
                  description: Payload for the integration task
                schedule:
                  type: number
                  description: Number of seconds to wait before executing the task, defaults to 0
                  minimum: 0
                  maximum: 86400
              required:
                - task
      responses:
        "204":
          description: Integration task created successfully
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations/{installationId}":
    get:
      operationId: getIntegrationInstallationById
      summary: Get a specific integration's installation by its ID
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
      responses:
        "200":
          description: Integration installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationInstallation"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateIntegrationInstallation
      summary: Update external IDs and configurations of an integration's installation
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
      responses:
        "200":
          description: The installation has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIntegrationInstallation"
    delete:
      operationId: uninstallIntegration
      summary: Uninstall the integration from a target organization
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
      responses:
        "204":
          description: Integration uninstalled successfully
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations/{installationId}/tokens":
    post:
      operationId: createIntegrationInstallationToken
      summary: Create an integration installation API token
      description: |
        Creates a temporary API token of an integration's installation that has access to the installation and it's scopes. You must be authenticated as the integration to obtain this token.
      tags:
        - integrations
      security:
        - integration: []
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
      responses:
        "200":
          description: The API token for the installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APITemporaryToken"
        "404":
          description: Installation could not be found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations/{installationId}/spaces":
    get:
      operationId: listIntegrationInstallationSpaces
      summary: List installations on spaces for an integration in an organization
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: extended
          in: query
          description: If true, returns the space object in each items. If false, returns the space ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/IntegrationSpaceInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: installIntegrationOnSpace
      summary: Install integration on a space using an existing installation
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - name: extended
          in: query
          description: If true, returns the space object in each items. If false, returns the space ID in each items.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - space
              properties:
                space:
                  type: string
                  description: ID of the space to install the integration on
      responses:
        "201":
          headers:
            Location:
              description: URL for the installed integration
              schema:
                type: string
          description: Integration installed successfully on space
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationSpaceInstallation"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations/{installationId}/spaces/{spaceId}":
    get:
      operationId: getIntegrationSpaceInstallation
      summary: Get a specific integration's space installation
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/spaceId"
        - name: extended
          in: query
          description: If true, returns the space object in each items. If false, returns the space ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Integration space installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationSpaceInstallation"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateIntegrationSpaceInstallation
      summary: Update external IDs and configurations of an integration's installation for a space
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/spaceId"
        - name: extended
          in: query
          description: If true, returns the space object in each items. If false, returns the space ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The space installation has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationSpaceInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIntegrationSpaceInstallation"
    delete:
      operationId: uninstallIntegrationFromSpace
      summary: Uninstall the integration from a space
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/spaceId"
      responses:
        "204":
          description: The space installation has been deleted.
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations/{installationId}/sites":
    get:
      operationId: listIntegrationInstallationSites
      summary: List installations on sites for an integration in an organization
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: extended
          in: query
          description: If true, returns the site object in each items. If false, returns the site ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/IntegrationSiteInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: installIntegrationOnSite
      summary: Install integration on a site using an existing installation
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - name: extended
          in: query
          description: If true, returns the site object in each items. If false, returns the site ID in each items.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - siteId
              properties:
                siteId:
                  type: string
                  description: ID of the site to install the integration on
      responses:
        "201":
          headers:
            Location:
              description: URL for the installed integration on the site
              schema:
                type: string
          description: Integration installed successfully on site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationSiteInstallation"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/integrations/{integrationName}/installations/{installationId}/sites/{siteId}":
    get:
      operationId: getIntegrationSiteInstallation
      summary: Get a specific integration's site installation
      tags:
        - integrations
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/siteId"
        - name: extended
          in: query
          description: If true, returns the site object in each items. If false, returns the site ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Integration site installation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationSiteInstallation"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateIntegrationSiteInstallation
      summary: Update external IDs and configurations of an integration's installation for a site
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/siteId"
        - name: extended
          in: query
          description: If true, returns the site object in each items. If false, returns the site ID in each items.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The site installation has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationSiteInstallation"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIntegrationSiteInstallation"
    delete:
      operationId: uninstallIntegrationFromSite
      summary: Uninstall the integration from a site
      parameters:
        - $ref: "#/components/parameters/integrationName"
        - $ref: "#/components/parameters/installationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "204":
          description: The site installation has been deleted.
        default:
          $ref: "#/components/responses/UnexpectedError"
  /orgs:
    get:
      operationId: listOrganizationsForAuthenticatedUser
      summary: Get the list of organizations for the currently authenticated user
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Organization"
                    required:
                      - items
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createOrganization
      summary: Create an organization
      tags:
        - organizations
      security:
        - user-internal: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganization"
      responses:
        "201":
          description: Organization created
          headers:
            Location:
              description: API URL for the newly created organization
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}":
    get:
      operationId: getOrganizationById
      summary: Get an organization by its ID
      tags:
        - organizations
        - critical
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "404":
          description: No matching organization found for given id
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganizationById
      summary: Delete an organization by its ID
      tags:
        - organizations
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "205":
          description: The organization has been successfully deleted
        "404":
          description: No matching organization found for given id
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateOrganizationById
      summary: Update an organization by its ID
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/OrganizationTitle"
                emailDomains:
                  $ref: "#/components/schemas/OrganizationEmailDomains"
                hostname:
                  $ref: "#/components/schemas/OrganizationHostname"
                defaultRole:
                  $ref: "#/components/schemas/MemberRoleOrGuest"
                defaultContent:
                  oneOf:
                    - $ref: "#/components/schemas/OrganizationDefaultContent"
                    - type: string
                      nullable: true
                      enum:
                        - null
                logo:
                  oneOf:
                    - $ref: "#/components/schemas/URL"
                    - type: string
                      nullable: true
                      enum:
                        - null
                sso:
                  type: boolean
                ai:
                  type: boolean
                inviteLinks:
                  type: boolean
      responses:
        "200":
          description: The organization has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          description: Invalid default content space or collection provided
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/content":
    get:
      operationId: getOrganizationAllContent
      summary: List all content in an organization
      description: |
        Lists all spaces, collections, sites accessible by current user in the current organization. This endpoint is internal for now as the data structure is optimized for the sidebar.
      tags:
        - organizations
        - critical
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationAllContent"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/members":
    get:
      operationId: listMembersInOrganizationById
      summary: List organization members
      description: |
        Lists members for the specified organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/listOrder"
        - name: role
          description: The Role to filter the member list by
          in: query
          schema:
            oneOf:
              - $ref: "#/components/schemas/MemberRole"
              - type: string
                enum:
                  - guest
        - name: search
          in: query
          description: A query to filter the member list (displayName and email)
          schema:
            type: string
        - name: sort
          in: query
          description: The property to sort the results by. When sorting by lastSeenAt, only active members will be listed.
          schema:
            type: string
            default: joinedAt
            enum:
              - joinedAt
              - lastSeenAt
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/OrganizationMember"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/members/{userId}":
    get:
      operationId: getMemberInOrganizationById
      summary: Get specified organization member
      description: |
        Gets a specific member in an organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationMember"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateMemberInOrganizationById
      summary: Update specified organization member
      description: |
        Updates a specific member in an organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: The member has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationMember"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/MemberRoleOrGuest"
    delete:
      operationId: removeMemberFromOrganizationById
      summary: Delete a member from an organization
      description: |
        Deletes a specific member from an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: The member was deleted from the organization.
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/ping":
    post:
      operationId: updateOrganizationMemberLastSeenAt
      summary: Update organization member's "last seen at" timestamp.
      description: |
        Update organization member's "last seen at" timestamp.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: Organization member has been updated. Optionally returns a JWT token to attach to the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gitbookVisitorClaims:
                    description: A JTW token containing the claims to attach to this user.
                    type: string
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/members/{userId}/sso":
    post:
      operationId: setUserAsSSOMemberForOrganization
      summary: Set a user as an SSO member of an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: The user has been added as an SSO member of the organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationMember"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/members/{userId}/spaces":
    get:
      operationId: listSpacesForOrganizationMember
      summary: List permissions accross all spaces for a member of an organization
      tags:
        - permissions
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/listOrder"
      responses:
        "200":
          description: Listing of spaces that can be accessed by the user in the organization.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/MemberContentPermission"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/members/{userId}/teams":
    get:
      operationId: listTeamsForOrganizationMember
      summary: List all teams an organization member is part of
      tags:
        - teams
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - in: query
          name: title
          description: If provided, only teams whose name contains the given parameter will be returned. Case insensitive.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          required:
                            - team
                            - member
                          properties:
                            team:
                              $ref: "#/components/schemas/OrganizationTeam"
                            member:
                              $ref: "#/components/schemas/TeamMember"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/teams":
    get:
      operationId: listTeamsInOrganizationById
      summary: List organization teams
      description: |
        Lists teams for the specified organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - in: query
          name: owner
          description: The unique identifier of a member of the organization. Only teams they can manage will be returned.
          schema:
            type: string
        - in: query
          name: title
          description: If provided, only teams whose name contains the given parameter will be returned. Case insensitive.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/OrganizationTeam"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: createOrganizationTeam
      summary: Create organization team
      description: |
        Creates a team in the specified organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "201":
          description: Team has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationTeam"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/OrganizationTeamTitle"
                members:
                  description: A list of organization member identifiers
                  type: array
                  items:
                    type: string
              required:
                - title
  "/orgs/{organizationId}/teams/{teamId}":
    get:
      operationId: getTeamInOrganizationById
      summary: Get specified organization team
      description: |
        Gets a specific team in an organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationTeam"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateTeamInOrganizationById
      summary: Update specified organization team
      description: |
        Updates a specific team in an organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: The team has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationTeam"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/OrganizationTeamTitle"
              required:
                - title
    delete:
      operationId: removeTeamFromOrganizationById
      summary: Delete a team in an organization
      description: |
        Deletes a specific team in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
      responses:
        "204":
          description: The team was deleted from the organization.
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/teams/{teamId}/members":
    put:
      operationId: updateMembersInOrganizationTeam
      summary: Updates members of an organization team
      description: |
        Updates members of an organization team, either adding or removing them. If a the same user is included as both an add and a remove, they will be removed from the team.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMembersInOrganizationTeam"
      responses:
        "204":
          description: Members have been updated
        default:
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listTeamMembersInOrganizationById
      summary: List team members
      description: |
        Lists members, and their roles, for the specified organization team.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/OrganizationTeamMember"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/teams/{teamId}/members/{userId}":
    put:
      operationId: addMemberToOrganizationTeamById
      summary: Add or update a team membership
      description: |
        Add or updates member in the specified organization team.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/TeamMemberRole"
      responses:
        "204":
          description: Member has been added to the team
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteMemberFromOrganizationTeamById
      summary: Delete members from a team
      description: |
        Deletes member from the specified organization team.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/userId"
      responses:
        "204":
          description: Member has been deleted from the team
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/invites":
    post:
      operationId: inviteUsersToOrganization
      summary: Invite users to a given organization based on a list of emails
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: string
                      description: The unique identifiers of the users who were added to the organization
                  invited:
                    type: number
                    description: The number of users who were added to the organization
                  failedSSOEmails:
                    type: array
                    items:
                      type: string
                      description: A list of emails who were invited to the organization, but who were not added as SSO users as they are members of another org
                required:
                  - users
                  - invited
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUsersToOrganization"
  "/orgs/{organizationId}/invites/{inviteId}":
    post:
      operationId: joinOrganizationWithInvite
      summary: Use an invite to join an organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/inviteId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/content-link-invites":
    get:
      operationId: listOrganizationContentInviteLinks
      summary: List invite links to content in an organization
      tags:
        - organizations
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: space
          in: query
          description: If specified, only return invite links that provide specific permissions on the given space.
          schema:
            type: string
        - name: collection
          in: query
          description: If specified, only return invite links that provide permissions on the given collection.
          schema:
            type: string
      responses:
        "200":
          description: List of invite links to content in the organization.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          oneOf:
                            - $ref: "#/components/schemas/InviteLinkToCollection"
                            - $ref: "#/components/schemas/InviteLinkToSpace"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/link-invites":
    get:
      operationId: listOrganizationInviteLinks
      summary: List invite links to an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: List of invite links in the organization.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/InviteLinkToOrganization"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createOrganizationInvite
      summary: Create a new organization invite
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationInvite"
      responses:
        "201":
          description: The organization invite has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationInviteLink"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/link-invites/{inviteId}":
    patch:
      operationId: updateOrganizationInviteById
      summary: Update an organization invite.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/inviteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: Update role of an organization invite
                  properties:
                    role:
                      $ref: "#/components/schemas/MemberRoleOrGuest"
                  required:
                    - role
                - type: object
                  description: Update level of an organization content invite
                  properties:
                    level:
                      $ref: "#/components/schemas/MemberRoleOrGuest"
                  required:
                    - level
      responses:
        "200":
          description: The organization invite has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationInviteLink"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganizationInviteById
      summary: Deletes an organization invite.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/inviteId"
      responses:
        "205":
          description: The organization invite has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/billing":
    post:
      operationId: upgradeOrganizationPlan
      summary: Upgrade an organization's billing plan
      tags:
        - organizations
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/successReturnURL"
        - $ref: "#/components/parameters/cancelReturnURL"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingUpgrade"
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpgradeOrganizationBilling"
  "/orgs/{organizationId}/billing/portal":
    get:
      operationId: getOrganizationBillingPortal
      summary: Get the billing portal for an organization
      tags:
        - organizations
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingPortal"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/billing/preview":
    get:
      operationId: previewBillingInvoice
      summary: Generates a billing invoice preview for organizations without an active subscription
      tags:
        - organizations
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - name: interval
          in: query
          required: true
          description: The desired billing interval plan
          schema:
            $ref: "#/components/schemas/BillingInterval"
        - name: product
          in: query
          required: true
          description: The desired core plan
          schema:
            $ref: "#/components/schemas/BillingProduct"
        - name: members
          in: query
          description: The desired amount of members in the organization
          schema:
            type: number
        - name: premiumSites
          in: query
          description: The desired amount of published premium sites
          schema:
            type: number
        - name: ultimateSites
          in: query
          description: The desired amount of published ultimate sites
          schema:
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInvoicePreview"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/request_upgrade":
    post:
      operationId: requestOrganizationUpgrade
      summary: Send a request to ask the organization's admin to upgrade it.
      tags:
        - organizations
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/search":
    get:
      operationId: searchOrganizationContent
      summary: Search content in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            maxLength: 512
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SearchSpaceResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/spaces":
    get:
      operationId: listSpacesInOrganizationById
      summary: List organization spaces
      description: |
        Lists spaces for the specified organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createSpace
      summary: Create an organization space
      tags:
        - spaces
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSpace"
      responses:
        "201":
          description: Space created
          headers:
            Location:
              description: API URL for the newly created space
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/collections":
    get:
      operationId: listCollectionsInOrganizationById
      summary: List organization collections
      description: |
        Lists collections for the specified organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: nested
          in: query
          description: If true, all nested collections will be listed
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createCollection
      summary: Create an organization collection
      tags:
        - collections
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 50
                parent:
                  type: string
                  description: ID of a parent collection
      responses:
        "201":
          description: Collection created
          headers:
            Location:
              description: API URL for the newly created collection
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/custom-fields":
    get:
      operationId: listOrganizationCustomFields
      summary: Get the custom fields for spaces in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/CustomField"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createOrganizationCustomField
      summary: Create a new custom field in an orgamization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/CustomFieldName"
                type:
                  $ref: "#/components/schemas/CustomFieldType"
                title:
                  $ref: "#/components/schemas/CustomFieldTitle"
                description:
                  $ref: "#/components/schemas/CustomFieldDescription"
                placeholder:
                  $ref: "#/components/schemas/CustomFieldPlaceholder"
                options:
                  $ref: "#/components/schemas/CustomFieldOptions"
              required:
                - name
                - type
      responses:
        "201":
          description: Custom field created
          headers:
            Location:
              description: API URL for the newly created custom field
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/custom-fields/{fieldName}":
    get:
      operationId: getOrganizationCustomFieldByName
      summary: Get a custom field by its name
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - name: fieldName
          in: path
          required: true
          description: The name of the custom field
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
        "404":
          description: No matching custom field found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateOrganizationCustomField
      summary: Update a custom field in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - name: fieldName
          in: path
          required: true
          description: The name of the custom field
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/CustomFieldTitle"
                description:
                  $ref: "#/components/schemas/CustomFieldDescription"
                placeholder:
                  $ref: "#/components/schemas/CustomFieldPlaceholder"
                options:
                  $ref: "#/components/schemas/CustomFieldOptions"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganizationCustomField
      summary: Delete a custom field in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - name: fieldName
          in: path
          required: true
          description: The name of the custom field
          schema:
            type: string
      responses:
        "204":
          description: Custom field has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/integrations":
    get:
      operationId: listOrganizationIntegrations
      summary: List integrations owned by an organization
      tags:
        - spaces
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/integrationSearchQuery"
      responses:
        "200":
          description: List of integrations.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Integration"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/integrations/{integrationName}/installation_status":
    get:
      operationId: getOrganizationIntegrationStatus
      summary: Get the status of an integration installation in an organization
      tags:
        - integrations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/integrationName"
      responses:
        "200":
          description: Integration installation status
          content:
            application/json:
              schema:
                properties:
                  status:
                    $ref: "#/components/schemas/IntegrationInstallationStatus"
                required:
                  - status
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/installations":
    get:
      operationId: listOrganizationInstallations
      summary: List installations of integrations in an organization.
      tags:
        - spaces
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/integrationSearchQuery"
      responses:
        "200":
          description: List of integrations with the associated installations.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            installation:
                              $ref: "#/components/schemas/IntegrationInstallation"
                            integration:
                              $ref: "#/components/schemas/Integration"
                          required:
                            - integration
                            - installation
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/integrations/installations-status":
    get:
      operationId: listOrganizationIntegrationsStatus
      summary: List the statuses of all integrations installed in an organization
      tags:
        - integrations
        - critical
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/integrationSearchQuery"
      responses:
        "200":
          description: List of integrations.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          required:
                            - status
                            - integration
                          properties:
                            status:
                              $ref: "#/components/schemas/IntegrationInstallationStatus"
                            integration:
                              $ref: "#/components/schemas/Integration"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/saml":
    get:
      operationId: listSAMLProvidersInOrganizationById
      summary: List organization SAML providers
      description: |
        Lists SAML providers configured for the specified organization.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/OrganizationSAMLProvider"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createOrganizationSAMLProvider
      summary: Create a new SAML provider in an orgamization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  $ref: "#/components/schemas/SAMLProviderLabel"
                entityID:
                  $ref: "#/components/schemas/SAMLProviderEntityID"
                certificate:
                  $ref: "#/components/schemas/SAMLProviderCertificate"
                ssoURL:
                  $ref: "#/components/schemas/URL"
                defaultTeam:
                  type: string
                defaultRole:
                  $ref: "#/components/schemas/MemberRoleOrGuest"
              required:
                - label
      responses:
        "201":
          description: SAML Provider created
          headers:
            Location:
              description: API URL for the newly created SAML Provider
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSAMLProvider"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/saml/{samlProviderId}":
    get:
      operationId: getOrganizationSAMLProviderById
      summary: Get a SAML provider in an organization by its ID
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/samlProviderId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSAMLProvider"
        "404":
          description: No matching provider found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateOrganizationSAMLProvider
      summary: Update a SAML provider in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/samlProviderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  $ref: "#/components/schemas/SAMLProviderLabel"
                entityID:
                  $ref: "#/components/schemas/SAMLProviderEntityID"
                certificate:
                  $ref: "#/components/schemas/SAMLProviderCertificate"
                ssoURL:
                  $ref: "#/components/schemas/URL"
                defaultTeam:
                  type: string
                defaultRole:
                  $ref: "#/components/schemas/MemberRoleOrGuest"
      responses:
        "200":
          description: SAML provider has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSAMLProvider"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganizationSAMLProvider
      summary: Delete a SAML provider in an organization
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/samlProviderId"
      responses:
        "204":
          description: SAML provider has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sso":
    get:
      operationId: listSSOProviderLoginsInOrganization
      summary: List organization SSO provider login information
      description: Lists SSO login information configured for the specified organization.
      tags:
        - organizations
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrganizationSSOProviderLogin"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage":
    get:
      operationId: getUsageForOrganizationById
      summary: Get all usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUsage"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage/collections":
    get:
      operationId: getCollectionsUsageForOrganizationById
      summary: Get collections usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    $ref: "#/components/schemas/OrganizationUsageCollections"
                required:
                  - collections
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage/spaces":
    get:
      operationId: getSpacesUsageForOrganizationById
      summary: Get spaces usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  spaces:
                    $ref: "#/components/schemas/OrganizationUsageSpaces"
                required:
                  - spaces
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage/sites":
    get:
      operationId: getSitesUsageForOrganizationById
      summary: Get sites usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sites:
                    $ref: "#/components/schemas/OrganizationUsageSites"
                required:
                  - sites
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage/teams":
    get:
      operationId: getTeamsUsageForOrganizationById
      summary: Get teams usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    $ref: "#/components/schemas/OrganizationUsageTeams"
                required:
                  - teams
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage/members":
    get:
      operationId: getMembersUsageForOrganizationById
      summary: Get members usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    $ref: "#/components/schemas/OrganizationUsageMembers"
                required:
                  - members
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/usage/team-members":
    get:
      operationId: getTeamMembersUsageForOrganizationById
      summary: Get team members usage metrics for an organization
      tags:
        - organizations
        - usage
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamMembers:
                    $ref: "#/components/schemas/OrganizationUsageTeamMembers"
                required:
                  - teamMembers
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/captures":
    get:
      operationId: listCaptures
      deprecated: true
      summary: List captures. Deprecated, use listSnippets instead.
      description: |
        List captures in an organization, newest first.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/documentFormat"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: context
          in: query
          description: The context in which the item was captured
          schema:
            type: string
            enum:
              - walkthrough
              - thread
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Capture"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: startCapture
      summary: Start a capture
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/CaptureTitle"
                context:
                  $ref: "#/components/schemas/CaptureContext"
                externalId:
                  type: string
                  description: ID in the original source of the capture.
                externalURL:
                  type: string
                  format: uri
                  description: URL of the original source of the capture.
              required:
                - context
      responses:
        "201":
          description: Capture started
          headers:
            Location:
              description: API URL for the newly created capture
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Capture"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/captures/{captureId}":
    get:
      operationId: getCapture
      deprecated: true
      summary: Get a capture by its ID. Deprecated, use getSnippet instead.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/captureId"
        - $ref: "#/components/parameters/documentFormat"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Capture"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/captures/{captureId}/events":
    post:
      operationId: addEventsToCapture
      summary: Add events to a running capture
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/captureId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                events:
                  type: array
                  items:
                    $ref: "#/components/schemas/CaptureEvent"
              required:
                - events
      responses:
        "204":
          description: Events added
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/captures/{captureId}/stop":
    post:
      operationId: stopCapture
      summary: Stop a capture
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/captureId"
        - $ref: "#/components/parameters/documentFormat"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Capture stopped
          content:
            application/json:
              schema:
                type: object
                properties:
                  capture:
                    $ref: "#/components/schemas/Capture"
                  followupQuestions:
                    description: Example questions that would be answered by the content of this capture.
                    type: array
                    items:
                      type: string
                required:
                  - capture
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/snippets":
    get:
      operationId: listSnippets
      summary: Lists snippets.
      description: |
        List snippets in an organization, newest first.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: source
          in: query
          description: If specified, only snippets from the specified source will be returned.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Snippet"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createSnippet
      summary: Create a new snippet
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Snippet created
          headers:
            Location:
              description: API URL for the newly created snippet
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/snippets/{snippetId}":
    get:
      operationId: getSnippet
      summary: Get a snippet by its ID
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/snippetId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSnippet
      summary: Delete a snippet by its ID.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/snippetId"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateSnippet
      summary: Update an existing snippet.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/snippetId"
        - $ref: "#/components/parameters/ifUnmodifiedSince"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSnippetSchema"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snippet"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/snippets/{snippetId}/move":
    post:
      operationId: moveSnippet
      summary: Move a snippet into a destination. The snippet will be archived in the process.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/snippetId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target
              properties:
                target:
                  type: object
                  description: Intended destination for the page
                  properties:
                    space:
                      description: The id of the target space
                      type: string
                    position:
                      type: object
                      properties:
                        parent:
                          description: The parent of the page in the target space. If undefined, the page will be inserted at the root of the space.
                          type: string
                        index:
                          description: The index of the page in the parent. If undefined, the page will be inserted at the end of the parent's current children.
                          type: number
                  required:
                    - space
      responses:
        "200":
          description: The snippet was successfully moved.
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                properties:
                  page:
                    $ref: "#/components/schemas/RevisionPageDocument"
                  changeRequest:
                    $ref: "#/components/schemas/ChangeRequest"
        default:
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: getSnippetSuggestedLocations
      summary: Return possible snippet locations in an organization based on the current user.
      tags:
        - organizations
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/snippetId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: spaceId
          in: query
          description: If specified, only locations in the given space will be returned. If not specified, GitBook will suggest spaces.
          schema:
            type: string
        - name: pageId
          in: query
          description: If specified, only locations under the given pageId will be returned. You must specify a spaceId too. If pageId is not specified, GitBook will suggest pages at the top level.
          schema:
            type: string
        - name: search
          in: query
          description: If specified, only locations matching the search query will be returned.
          schema:
            type: string
      responses:
        "200":
          description: A paginated list of suggested snippet locations.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          required:
                            - space
                          properties:
                            aiPowered:
                              type: boolean
                              description: If defined and true, this location was suggested by GitBook AI.
                            space:
                              $ref: "#/components/schemas/Space"
                            parentPage:
                              description: The parent page of the suggested location.
                              oneOf:
                                - $ref: "#/components/schemas/RevisionPageDocument"
                                - $ref: "#/components/schemas/RevisionPageGroup"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/ask":
    post:
      operationId: askInOrganization
      summary: Ask a question.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Return query details in the result
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAIQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: "#/components/schemas/SearchAIAnswer"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/ask/questions":
    get:
      operationId: getRecommendedQuestionsInOrganization
      summary: Get a list of questions recommended to be asked in an organization.
      parameters:
        - $ref: "#/components/parameters/organizationId"
      security:
        - user: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchAIRecommendedQuestions"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/ask/questions/stream":
    get:
      operationId: streamRecommendedQuestionsInOrganization
      summary: Stream a list of questions recommended to be asked in an organization.
      parameters:
        - $ref: "#/components/parameters/organizationId"
      security:
        - user: []
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SearchAIRecommendedQuestionStream"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/ask/stream":
    get:
      operationId: streamAskInOrganization
      summary: Ask a question to an AI across spaces that is accessible by the currently authenticated target and stream the answer as a Server-Sent Events URL.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - name: query
          in: query
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/documentFormat"
        - name: details
          in: query
          description: Return query details in the result
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SearchAIAnswerStream"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites":
    get:
      operationId: listSites
      summary: List all the sites created in an organization
      tags:
        - sites
        - critical
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: space
          in: query
          description: Identifier of the space to filter the sites by
          required: false
          schema:
            type: string
        - name: title
          in: query
          description: Filter sites by their title
          required: false
          schema:
            type: string
        - name: published
          in: query
          description: Filter sites by their published status
          required: false
          schema:
            type: boolean
        - name: type
          in: query
          description: Filter by site type
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SiteType"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Site"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createSite
      summary: Create a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: The type of the site, defaults to Basic
                  $ref: "#/components/schemas/SiteType"
                title:
                  $ref: "#/components/schemas/SiteTitle"
                visibility:
                  $ref: "#/components/schemas/SiteVisibility"
                spaces:
                  oneOf:
                    - type: array
                      description: ID of spaces to be added to the site
                      items:
                        type: string
                    - type: string
                      description: Create a new space associated to the site
                      enum:
                        - sample
                        - empty
      responses:
        "201":
          description: Site created
          headers:
            Location:
              description: API URL for the newly created site
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/publishing/checkout":
    get:
      operationId: previewSitePublishCheckout
      summary: Preview checkout information upon publishing a site in the organization.
      tags:
        - sites
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - in: query
          name: plan
          description: The plan of the site to preview the checkout information for.
          required: true
          schema:
            $ref: "#/components/schemas/SiteType"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOperationPreviewResponse"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}":
    get:
      operationId: getSiteById
      summary: Get an organization site by its ID
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        "404":
          description: No matching site found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateSiteById
      summary: Update a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/SiteTitle"
                visibility:
                  $ref: "#/components/schemas/SiteVisibility"
                basename:
                  $ref: "#/components/schemas/SiteBasename"
                adaptiveContent:
                  $ref: "#/components/schemas/SiteAdaptiveContent"
                defaultSiteSpace:
                  type: string
                  description: ID of the site-space to be used as the default at the root level. If site has sections, this will mark the default site space in the site's default section.
                defaultSiteSection:
                  type: string
                  description: ID of the site-section to be used as the default.
                proxy:
                  description: |
                    Configure a proxy URL for a site. For example, you can use it to host the site on a subdirectory of your domain like `https://company.com/docs`.
                    Use `null` to remove the proxy.
                  oneOf:
                    - $ref: "#/components/schemas/SiteProxy"
                    - type: string
                      nullable: true
                      enum:
                        - null
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSiteById
      summary: Delete a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "205":
          description: Site has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/published":
    get:
      operationId: getPublishedContentSite
      summary: Get the complete profile of a site in an organization to provide the published experience. It includes site, customization, structure, integration scripts etc.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteShareKey"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishedContentSite"
        "404":
          description: No matching site found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/publish":
    post:
      operationId: publishSite
      summary: Publishes the site to the audience defined in the site's visibility setting.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: Site published successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Site"
                  - type: object
                    description: User needs to checkout in order to publish the site.
                    properties:
                      type:
                        type: string
                        enum:
                          - checkout
                      sessionId:
                        type: string
                        description: Stripe payment session ID
                    required:
                      - type
                      - sessionId
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/unpublish":
    post:
      operationId: unpublishSite
      summary: Unpublishes the site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: Site unpublished successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Site"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/share-links":
    get:
      operationId: listSiteShareLinks
      summary: List all the share links created in a site
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ShareLink"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: createSiteShareLink
      summary: Create a share link in a site
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/ShareLinkName"
              required:
                - name
      responses:
        "201":
          description: The share link has been created
          headers:
            Location:
              description: API URL for the newly created share link
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShareLink"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/share-links/{shareLinkId}":
    patch:
      operationId: updateSiteShareLinkById
      summary: Update the details of a site share link
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/shareLinkId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                active:
                  type: boolean
                name:
                  $ref: "#/components/schemas/ShareLinkName"
      responses:
        "200":
          description: The site share link has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShareLink"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSiteShareLinkById
      summary: Deletes a site share link
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/shareLinkId"
      responses:
        "205":
          description: Site share link has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/structure":
    get:
      operationId: getSiteStructure
      summary: Get the structure of a site which includes site-sections and site-spaces
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteShareKey"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteStructure"
        "404":
          description: No matching site found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/plan":
    post:
      operationId: updateSitePlan
      summary: Update the site plan.
      tags:
        - sites
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/successReturnURL"
        - $ref: "#/components/parameters/cancelReturnURL"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  $ref: "#/components/schemas/SiteType"
                interval:
                  description: Desired interval for new subscriptions. Defaults to the existing billing interval.
                  $ref: "#/components/schemas/BillingInterval"
                reason:
                  type: string
                  description: Reason that triggered the billing upgrade
              required:
                - plan
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - type
                      - sessionId
                    properties:
                      type:
                        description: User must checkout to complete the update.
                        type: string
                        enum:
                          - checkout
                      sessionId:
                        type: string
                        description: Stripe payment session ID
                  - type: object
                    required:
                      - type
                      - sessionId
                    properties:
                      type:
                        description: User needs to go through the legacy update flow.
                        type: string
                        enum:
                          - legacy-checkout
                      sessionId:
                        type: string
                        description: Stripe payment session ID
                  - type: object
                    required:
                      - type
                    properties:
                      type:
                        description: The site plan was successfully updated.
                        type: string
                        enum:
                          - success
                      outcome:
                        description: |
                          * `upgraded`: Subscription was upgraded to include the site
                          * `downgraded`: Subscription was downgraded by removing the site
                          * `no-payment-changes`: No impact on subscription (e.g. trial, unpublished)
                        type: string
                        enum:
                          - upgraded
                          - downgraded
                          - no-payment-changes
        default:
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: previewSitePlanUpdate
      summary: Preview an upgrade to a site plan, returning checkout information.
      tags:
        - sites
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - name: plan
          in: query
          required: true
          description: The desired site plan
          schema:
            $ref: "#/components/schemas/SiteType"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOperationPreviewResponse"
        "404":
          description: No matching site found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/publishing/auth":
    get:
      operationId: getSitePublishingAuthById
      summary: Get the publishing authentication settings for a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SitePublishingAuth"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: updateSitePublishingAuthById
      summary: Update the publishing authentication settings for a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SitePublishingAuthUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SitePublishingAuth"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/publishing/auth/regenerate":
    post:
      operationId: regenerateSitePublishingAuthById
      summary: Regenerate the publishing authentication settings for a site. This will re-generate the private key.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SitePublishingAuth"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/publishing/preview":
    get:
      operationId: getSitePublishingPreviewById
      summary: Get a URL to preview the published content of a site. The URL will be valid for 1 hour.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - name: siteSpace
          in: query
          description: ID of the site-space to preview. If not provided, the default site-space will be used.
          schema:
            type: string
        - name: claims
          in: query
          description: Rison encoded string of attributes/assertions about the visitor for which we want to preview the site.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    $ref: "#/components/schemas/URL"
                required:
                  - url
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/customization":
    get:
      operationId: getSiteCustomizationById
      summary: Get the customization configuration for a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteCustomizationUnmasked"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteCustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateSiteCustomizationById
      summary: Update the customization configuration for a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteCustomizationSettings"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteCustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/customization/raw":
    get:
      operationId: getSiteRawCustomizationById
      summary: Get the raw customization settings of a site.
      tags:
        - sites
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteCustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/integration-scripts":
    get:
      operationId: listSiteIntegrationScripts
      summary: List the scripts to embed in published content for a site.
      tags:
        - integrations
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SiteIntegrationScript"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/integrations":
    get:
      operationId: listSiteIntegrations
      summary: List integrations enabled in a site.
      tags:
        - integrations
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/integrationSearchQuery"
      responses:
        "200":
          description: Listing of integrations enabled in the site.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Integration"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces":
    post:
      operationId: addSpaceToSite
      summary: Add a space to a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spaceId:
                  type: string
                  description: ID of the space
                sectionId:
                  type: string
                  description: ID of the section to add the space to. If not provided, the space will be added to the default section or at the root level if the site has no sections.
              required:
                - spaceId
      responses:
        "201":
          description: Space added to the site
          headers:
            Location:
              description: API URL for the newly created site-space relationship
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSpace"
        default:
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listSiteSpaces
      summary: List all the site spaces under a site in an organization
      tags:
        - sites
        - critical
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteShareKey"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - name: default
          in: query
          description: If true, only the default site space will be returned. If false, only the non-default site spaces are returned. If undefined, all site spaces are returned.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SiteSpace"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/sections":
    post:
      operationId: addSectionToSite
      summary: Add a section to a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spaceId:
                  type: string
                  description: ID of the space to be added to the section as a site space variant
                title:
                  type: string
                  description: Title of the section
                  maxLength: 64
              required:
                - spaceId
      responses:
        "201":
          description: Section added to the site
          headers:
            Location:
              description: API URL for the newly created site-section relationship
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSection"
        default:
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listSiteSections
      summary: List all the site sections under a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteShareKey"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SiteSection"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/sections/{siteSectionId}":
    patch:
      operationId: updateSiteSectionById
      summary: Update a section on a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSectionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/SiteSectionTitle"
                path:
                  $ref: "#/components/schemas/SiteSectionPath"
                defaultSiteSpace:
                  type: string
                  description: ID of the site-space to be used as the default in this section.
                condition:
                  description: Conditional expression used to evaluate whether the site section should be shown to the site's visitor (should evaluate to a boolean). If not set, the condition will remain unchanged. If set to null, the condition will be removed.
                  oneOf:
                    - $ref: "#/components/schemas/Condition"
                    - type: string
                      nullable: true
                      enum:
                        - null
                icon:
                  oneOf:
                    - $ref: "#/components/schemas/Icon"
                    - type: string
                      nullable: true
                      enum:
                        - null
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSection"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSiteSectionById
      summary: Delete a section on a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSectionId"
      responses:
        "205":
          description: Site section has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/search":
    post:
      operationId: searchSiteContent
      summary: Search content in a site
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - query
                  properties:
                    query:
                      type: string
                      maxLength: 512
                - oneOf:
                    - type: object
                      required:
                        - scope
                      properties:
                        scope:
                          description: Define the scope of the search.
                          $ref: "#/components/schemas/SiteSearchScope"
                    - type: object
                      properties:
                        mode:
                          description: Search only in the site spaces provided. Deprecated, use scope instead.
                          deprecated: true
                          type: string
                          enum:
                            - specific
                        siteSpaceIds:
                          type: array
                          minLength: 1
                          items:
                            type: string
                      required:
                        - siteSpaceIds
                    - type: object
                      properties:
                        mode:
                          description: Search in the current site space and all section's defaults. Deprecated, use scope instead.
                          deprecated: true
                          type: string
                          enum:
                            - current
                        siteSpaceId:
                          type: string
                      required:
                        - mode
                        - siteSpaceId
                    - type: object
                      properties:
                        mode:
                          description: Search in all site-spaces. Deprecated, use scope instead.
                          deprecated: true
                          type: string
                          enum:
                            - all
                      required:
                        - mode
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SearchSpaceResult"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/ask":
    post:
      operationId: streamAskInSite
      summary: Ask a question in a site. The response is streamed.
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/documentFormat"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - scope
              properties:
                question:
                  type: string
                  maxLength: 512
                context:
                  type: object
                  description: |
                    You may optionally provide additional information about the context of the question. This doesn't affect the scope of the search, but GitBook may use this information to provide a better answer. Generally speaking, you should provide as much context as possible.
                  properties:
                    siteSpaceId:
                      type: string
                scope:
                  $ref: "#/components/schemas/SiteSearchScope"
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SearchAIAnswerStream"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces/{siteSpaceId}":
    patch:
      operationId: updateSiteSpaceById
      summary: Update a space on a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  $ref: "#/components/schemas/SiteSpacePath"
                condition:
                  description: Conditional expression used to evaluate whether the site space should be shown to the site's visitor (should evaluate to a boolean). If not set, the condition will remain unchanged. If set to null, the condition will be removed.
                  oneOf:
                    - $ref: "#/components/schemas/Condition"
                    - type: string
                      nullable: true
                      enum:
                        - null
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSpace"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSiteSpaceById
      summary: Delete a space on a site in an organization
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
      responses:
        "205":
          description: Site space has been deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces/{siteSpaceId}/customization":
    get:
      operationId: getSiteSpaceCustomizationById
      summary: Get the customization configuration for a site space.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
        - $ref: "#/components/parameters/siteCustomizationUnmasked"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteCustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: overrideSiteSpaceCustomizationById
      summary: Override the customization configuration for a site space.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: The settings that overrides the site customization settings.
              type: object
              properties:
                title:
                  description: Title to use for the published site variant. If not defined, the title will not be changed. If set to null, the title will be unset and will fallback to the content title.
                  oneOf:
                    - $ref: "#/components/schemas/SiteTitle"
                    - type: string
                      nullable: true
                      enum:
                        - null
                styling:
                  type: object
                  properties:
                    primaryColor:
                      description: The primary color used for links and UI text. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationThemedColor"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    tint:
                      description: The tint will colour the site’s UI beyond links and buttons, such as header, sidebar and background. By default, the tint colour is the same as your Primary colour, but you can set a custom one too.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationTint"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    corners:
                      description: The style of the corners to use. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationCorners"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    font:
                      description: The font family to use for the content. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationFont"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    icons:
                      description: The icons style to use for the content. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationIconsStyle"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    sidebar:
                      description: Various styles for the sidebar. Each can be Set to null to reset the override.
                      type: object
                      properties:
                        background:
                          oneOf:
                            - $ref: "#/components/schemas/CustomizationSidebarBackgroundStyle"
                            - type: string
                              nullable: true
                              enum:
                                - null
                        list:
                          oneOf:
                            - $ref: "#/components/schemas/CustomizationSidebarListStyle"
                            - type: string
                              nullable: true
                              enum:
                                - null
                    background:
                      description: The style of background to use. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationBackground"
                        - type: string
                          nullable: true
                          enum:
                            - null
                internationalization:
                  type: object
                  properties:
                    locale:
                      description: The locale to use for the non-custom elements of the UI. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationLocale"
                        - type: string
                          nullable: true
                          enum:
                            - null
                  required:
                    - locale
                favicon:
                  description: The favicon to use. Set to null to reset the override.
                  oneOf:
                    - type: object
                      properties:
                        icon:
                          $ref: "#/components/schemas/CustomizationThemedURL"
                      required:
                        - icon
                    - type: object
                      properties:
                        emoji:
                          $ref: "#/components/schemas/Emoji"
                      required:
                        - emoji
                    - type: object
                      nullable: true
                      properties: {}
                      additionalProperties: false
                header:
                  type: object
                  properties:
                    preset:
                      description: The theme preset to use. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationHeaderPreset"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    logo:
                      description: The header logo to use. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationThemedURL"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    backgroundColor:
                      description: The background color used in the header. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationThemedColor"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    linkColor:
                      description: The color used by the links in the header. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationThemedColor"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    links:
                      type: array
                      description: The links that are displayed in the header. Set to null to reset the override.
                      nullable: true
                      items:
                        $ref: "#/components/schemas/CustomizationHeaderItem"
                footer:
                  type: object
                  properties:
                    logo:
                      description: The logo displayed in the footer. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationThemedURL"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    groups:
                      type: array
                      description: The links groups that are displayed in the footer. Set to null to reset the override.
                      nullable: true
                      items:
                        $ref: "#/components/schemas/CustomizationFooterGroup"
                    copyright:
                      type: string
                      description: The copyright text that is displayed in the footer. Set to null to reset the override.
                      nullable: true
                      maxLength: 300
                themes:
                  type: object
                  properties:
                    default:
                      description: The theme mode default value. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/CustomizationThemeMode"
                        - type: string
                          nullable: true
                          enum:
                            - null
                    toggeable:
                      description: Should the reader be able to switch between dark and light mode. Set to null to reset the override.
                      type: boolean
                      nullable: true
                pdf:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: If true, PDF export is enabled for the published site. Set to null to reset the override.
                      nullable: true
                  required:
                    - enabled
                feedback:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: If true, feedback gathering is enabled. Set to null to reset the override.
                      nullable: true
                  required:
                    - enabled
                aiSearch:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: If true, AI search is enabled. Set to null to reset the override.
                      nullable: true
                  required:
                    - enabled
                git:
                  type: object
                  properties:
                    showEditLink:
                      type: boolean
                      description: Whether the published site should show a link to edit the content on the git provider set up in the Git Sync. Set to null to reset the override.
                      nullable: true
                  required:
                    - showEditLink
                pagination:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Whether the pagination navigation should be displayed on pages. Set to null to reset the override.
                      nullable: true
                  required:
                    - enabled
                trademark:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      description: Whether the GitBook trademark ("Powered by GitBook") should be visible. Set to null to reset the override.
                      nullable: true
                  required:
                    - enabled
                privacyPolicy:
                  type: object
                  properties:
                    url:
                      description: The custom link to the privacy policy. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/URL"
                        - type: string
                          nullable: true
                          enum:
                            - null
                socialPreview:
                  type: object
                  properties:
                    url:
                      description: The URL for the social preview image. Set to null to reset the override.
                      oneOf:
                        - $ref: "#/components/schemas/URL"
                        - type: string
                          nullable: true
                          enum:
                            - null
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteCustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSiteSpaceCustomizationById
      summary: Removes the customization configuration for a site space.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
      responses:
        "205":
          description: Site space customization removed
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces/{siteSpaceId}/customization/raw":
    get:
      operationId: getSiteSpaceRawCustomizationById
      summary: Get the raw customization settings of a site space.
      tags:
        - sites
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SiteSpaceCustomizationSettings"
        "400":
          $ref: "#/components/responses/BadRequestError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces/{siteSpaceId}/insights/content":
    get:
      operationId: getContentAnalyticsForSiteSpaceById
      summary: Get page traffic and ratings for a given site space.
      tags:
        - analytics
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
        - name: period
          in: query
          schema:
            $ref: "#/components/schemas/AnalyticsSearchPeriod"
      responses:
        "200":
          description: Content analytics per page.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsContentPages"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces/{siteSpaceId}/insights/pages/{pageId}/feedbacks/{visitorId}":
    put:
      operationId: createSitesPageFeedback
      summary: Create a page feedback by a visitor on a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
        - $ref: "#/components/parameters/pageId"
        - $ref: "#/components/parameters/visitorId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  $ref: "#/components/schemas/PageFeedbackRating"
              required:
                - rating
      responses:
        "200":
          description: Feedback updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFeedback"
        "201":
          description: Feedback created
          headers:
            Location:
              description: URL for the feedback
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFeedback"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/sections/{siteSectionId}/move":
    post:
      operationId: moveSiteSection
      summary: Move a site section to a new position in the site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSectionId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  description: The position where to move the site section. When not provided the site section is moved at the end of the site.
                  $ref: "#/components/schemas/SiteSectionMovePosition"
      responses:
        "200":
          description: Site section moved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSection"
        "400":
          description: Invalid move site section position provided
          $ref: "#/components/responses/BadRequestError"
        "404":
          description: No matching Site section found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/site-spaces/{siteSpaceId}/move":
    post:
      operationId: moveSiteSpace
      summary: Move a site space to a new position in the site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteSpaceId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  description: The position where to move the site space. When not provided the site space is moved at the end of the site.
                  $ref: "#/components/schemas/SiteSpaceMovePosition"
      responses:
        "200":
          description: Site space moved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteSpace"
        "400":
          description: Invalid move site space position provided
          $ref: "#/components/responses/BadRequestError"
        "404":
          description: No matching Site space found
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/permissions/aggregate":
    get:
      operationId: listPermissionsAggregateInSite
      summary: List permissions for all users of a site.
      tags:
        - permissions
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: Listing of users who can access the site.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserSitePermission"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/insights/track_view":
    post:
      operationId: trackViewInSiteById
      summary: Track a page view in a site
      description: Track a page view in a site.
      deprecated: true
      tags:
        - analytics
        - sites
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "204":
          description: Page view has been tracked.
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteTrackPageView"
  "/orgs/{organizationId}/sites/{siteId}/insights/events":
    post:
      operationId: trackEventsInSiteById
      summary: Track events in a site.
      description: Track events in a site.
      tags:
        - sites
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "204":
          description: Events have been tracked.
        default:
          $ref: "#/components/responses/UnexpectedError"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                events:
                  type: array
                  items:
                    $ref: "#/components/schemas/SiteInsightsEvent"
              required:
                - events
  "/orgs/{organizationId}/sites/{siteId}/insights/events/aggregate":
    post:
      operationId: aggregateSiteEvents
      summary: Query and aggregate events in a site.
      tags:
        - sites
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: Aggregated events in the site.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteInsightsQueryEventsAggregationResult"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteInsightsQueryEventsAggregation"
  "/orgs/{organizationId}/sites/{siteId}/insights/ads":
    get:
      operationId: getAdsInsightsForSiteById
      summary: Get analytics insights of ads on a site.
      tags:
        - analytics
        - sites
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - name: interval
          in: query
          schema:
            $ref: "#/components/schemas/InsightsInterval"
        - name: start
          description: The earliest timestamp for any data returned
          in: query
          schema:
            type: string
            format: date-time
        - name: end
          description: The latest timestamp for any data returned
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: The site's ads insights stats for the provided period.
          content:
            application/json:
              schema:
                type: object
                properties:
                  values:
                    type: array
                    description: A time serie of the ads stats over the provided period
                    items:
                      type: object
                      properties:
                        date:
                          description: The start date of this interval
                          type: string
                          format: date-time
                        stats:
                          $ref: "#/components/schemas/SiteAdsStats"
                      required:
                        - date
                        - stats
                  account:
                    type: object
                    properties:
                      email:
                        type: string
                        description: Email address on the Ads platform.
                      url:
                        type: string
                        description: URL to configure payout.
                    required:
                      - email
                      - url
                required:
                  - values
                  - account
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/insights/search":
    get:
      operationId: getSearchAnalyticsForSiteById
      summary: Get an overview of the top search queries in a site.
      tags:
        - analytics
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - name: period
          in: query
          schema:
            $ref: "#/components/schemas/AnalyticsSearchPeriod"
        - name: siteSpaceIds
          in: query
          schema:
            type: array
            items:
              type: string
          description: The site spaces to filter the search on
      responses:
        "200":
          description: Top queries searched on this site.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsTopSearches"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/ads":
    post:
      operationId: updateSiteAdsById
      summary: Enable, disable, or submit for review Ads on a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - in-review
                    - disabled
                topic:
                  $ref: "#/components/schemas/SiteAdsTopic"
      responses:
        "204":
          description: OK
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/redirects":
    post:
      operationId: createSiteRedirect
      summary: Configure a redirect explicitly for a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  $ref: "#/components/schemas/SiteRedirectSourcePath"
                destination:
                  $ref: "#/components/schemas/SiteRedirectDestination"
              required:
                - source
                - destination
      responses:
        "201":
          description: The redirect was created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteRedirect"
        default:
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listSiteRedirects
      summary: List the redirects configured for a site.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
      responses:
        "200":
          description: The list of redirects for the site.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/SiteRedirect"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/redirects/{siteRedirectId}":
    patch:
      operationId: updateSiteRedirectById
      summary: Update a redirect for a site
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteRedirectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  $ref: "#/components/schemas/SiteRedirectSourcePath"
                destination:
                  $ref: "#/components/schemas/SiteRedirectDestination"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteRedirect"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteSiteRedirectById
      summary: Delete a redirect for a site
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteRedirectId"
      responses:
        "205":
          description: Site redirect deleted
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/orgs/{organizationId}/sites/{siteId}/redirect":
    get:
      operationId: getSiteRedirectBySource
      summary: Resolve a redirect in a site by its source path.
      tags:
        - sites
      security:
        - user: []
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/siteShareKey"
        - name: source
          in: query
          required: true
          description: The source path of the redirect.
          schema:
            $ref: "#/components/schemas/SiteRedirectSourcePath"
      responses:
        "200":
          description: The redirect was resolved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect:
                    $ref: "#/components/schemas/SiteRedirect"
                  target:
                    type: string
                    description: URL of the destination of the redirect.
                required:
                  - redirect
                  - target
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/custom-hostnames/{hostname}":
    get:
      operationId: getCustomHostname
      summary: Get the details about a custom hostname.
      tags:
        - custom-hostnames
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/hostname"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomHostname"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: setupCustomHostname
      summary: Setup a custom hostname on a site or an organization. Any previously set custom hostname will continue pointing to the target but marked as available for use with another target.
      tags:
        - custom-hostnames
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/hostname"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  oneOf:
                    - $ref: "#/components/schemas/OrganizationPointer"
                    - $ref: "#/components/schemas/SitePointer"
              required:
                - target
      responses:
        "201":
          description: Custom hostname created
          headers:
            Location:
              description: API URL for the newly created custom hostname
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomHostname"
        "400":
          description: Selected custom hostname target does not exist
          $ref: "#/components/responses/ConflictError"
        "409":
          description: Custom hostname is already in use on the target
          $ref: "#/components/responses/ConflictError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      operationId: dnsRevalidateCustomHostname
      summary: Revalidate a custom hostname's DNS records and status.
      tags:
        - custom-hostnames
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/hostname"
      responses:
        "204":
          description: DNS validation has been retriggered
        "400":
          description: The current custom hostname is inactive and cannot be revalidated
          $ref: "#/components/responses/ConflictError"
        "409":
          description: The current custom hostname status does not allow DNS revalidation
          $ref: "#/components/responses/ConflictError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: removeCustomHostname
      summary: Remove a custom hostname from a content or organization. The custom hostname will continue to point to the content or organization unless it is used for another one.
      tags:
        - custom-hostnames
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/hostname"
      responses:
        "205":
          description: Custom hostname has been removed
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/custom-hostnames/{hostname}/test":
    post:
      operationId: testCustomHostname
      summary: Test if a custom hostname can be used for a site or organization.
      tags:
        - custom-hostnames
      security:
        - user-internal: []
      parameters:
        - $ref: "#/components/parameters/hostname"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  oneOf:
                    - $ref: "#/components/schemas/OrganizationPointer"
                    - $ref: "#/components/schemas/SitePointer"
              required:
                - target
      responses:
        "204":
          description: The custom hostname is available and valid.
        "400":
          description: The custom hostname is invalid.
          $ref: "#/components/responses/BadRequestError"
        "409":
          description: The custom hostname is already configured for this target or a different one.
          $ref: "#/components/responses/ConflictError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /ads/sites:
    get:
      operationId: adsListSites
      summary: List all the sites with ads configured
      tags:
        - ads
      parameters:
        - $ref: "#/components/parameters/listPage"
        - $ref: "#/components/parameters/listLimit"
        - $ref: "#/components/parameters/xGitBookPartnerKey"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          required:
                            - id
                            - url
                            - email
                            - topic
                          properties:
                            id:
                              type: string
                            url:
                              type: string
                            email:
                              type: string
                            topic:
                              $ref: "#/components/schemas/SiteAdsTopic"
        default:
          $ref: "#/components/responses/UnexpectedError"
  "/ads/sites/{siteId}":
    patch:
      operationId: adsUpdateSite
      summary: Update the Ads configuration for a site
      tags:
        - ads
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/xGitBookPartnerKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - status
                    - zoneId
                    - reportingId
                  properties:
                    status:
                      type: string
                      enum:
                        - live
                    zoneId:
                      type: string
                      description: ID of the zone
                    reportingId:
                      type: string
                      description: ID to fetch reporting data
                - type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
                      enum:
                        - rejected
                    reason:
                      type: string
                      description: Reason for the rejection
                      maxLength: 512
                - type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
                      enum:
                        - pending
      responses:
        "204":
          description: OK
        default:
          $ref: "#/components/responses/UnexpectedError"
  /internal/hive/token:
    post:
      operationId: generateHiveAccessToken
      summary: Returns a token to authenticate with Hive.
      tags:
        - hive
        - critical
      security:
        - user-internal: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                spaces:
                  deprecated: true
                  type: array
                  items:
                    description: Deprecated. Use contentIds.
                    type: string
                contentIds:
                  type: array
                  items:
                    description: Content IDs to retrieve permissions for.
                    type: string
      responses:
        "200":
          description: The JWT to access user's specific content in Hive.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HiveAccessToken"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /urls/content:
    get:
      operationId: getContentByUrl
      summary: Resolve a URL to a content (space, collection, page)
      tags:
        - urls
      security:
        - user: []
      parameters:
        - name: url
          in: query
          required: true
          description: URL to resolve
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: URL resolved to a collection
                    properties:
                      collection:
                        $ref: "#/components/schemas/Collection"
                    required:
                      - collection
                  - type: object
                    description: URL resolved to the content of a space
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                      changeRequest:
                        $ref: "#/components/schemas/ChangeRequest"
                      page:
                        oneOf:
                          - $ref: "#/components/schemas/RevisionPageDocument"
                          - $ref: "#/components/schemas/RevisionPageGroup"
                    required:
                      - space
        default:
          $ref: "#/components/responses/UnexpectedError"
  /urls/embed:
    get:
      operationId: getEmbedByUrl
      summary: Resolve a URL to an embed
      tags:
        - urls
      parameters:
        - name: url
          in: query
          required: true
          description: URL to resolve
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embed"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /urls/published:
    get:
      operationId: getPublishedContentByUrl
      summary: Resolve a URL of a published content.
      tags:
        - urls
      parameters:
        - name: url
          in: query
          required: true
          description: URL to resolve
          schema:
            $ref: "#/components/schemas/URL"
        - name: visitorAuthToken
          in: query
          required: false
          description: JWT token generated for a visitor auth session
          schema:
            type: string
        - name: redirectOnError
          in: query
          required: false
          description: When true redirects the user to the authentication/fallback URL if the visitor auth token is invalid
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishedSiteContentLookup"
        "404":
          description: No content found for the URL.
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
components:
  securitySchemes:
    user:
      type: http
      scheme: bearer
    user-internal:
      type: http
      scheme: bearer
    user-staff:
      type: http
      scheme: bearer
    integration:
      type: http
      scheme: bearer
    integration-installation:
      type: http
      scheme: bearer
  parameters:
    listPage:
      name: page
      in: query
      description: Identifier of the page results to fetch.
      schema:
        type: string
    listLimit:
      name: limit
      in: query
      description: The number of results per page
      schema:
        type: number
        minimum: 0
        maximum: 1000
    documentFormat:
      name: format
      in: query
      description: Output format for the content.
      schema:
        type: string
        enum:
          - document
          - markdown
    tokenId:
      name: tokenId
      in: path
      required: true
      description: The id of the API token
      schema:
        type: string
    userId:
      name: userId
      in: path
      required: true
      description: The unique ID of the User
      schema:
        type: string
    spaceId:
      name: spaceId
      in: path
      required: true
      description: The unique id of the space
      schema:
        type: string
    siteShareKey:
      name: shareKey
      in: query
      description: For sites published via share-links, the share key is useful to resolve published URLs.
      schema:
        type: string
    teamId:
      name: teamId
      in: path
      required: true
      description: The unique ID of the Team
      schema:
        type: string
    revisionMetadata:
      name: metadata
      in: query
      description: If `false` is passed, "git" mutable metadata will not returned. Passing `false` can optimize performances of the lookup.
      schema:
        type: boolean
        default: true
    revisionComputed:
      name: computed
      in: query
      description: If `false` is passed, content will not be computed
      schema:
        type: boolean
        default: true
    fileId:
      name: fileId
      in: path
      required: true
      description: The unique id of the file
      schema:
        type: string
    pageId:
      name: pageId
      in: path
      required: true
      description: The unique id of the page
      schema:
        type: string
    pagePath:
      name: pagePath
      in: path
      required: true
      description: The path of the page in the revision.
      schema:
        type: string
    reusableContentId:
      name: reusableContentId
      in: path
      required: true
      description: The unique id of the reusable content
      schema:
        type: string
    documentSchema:
      name: schema
      in: query
      description: Version of the schema used for the document.
      schema:
        type: string
        enum:
          - current
          - next
    changeRequestId:
      name: changeRequestId
      in: path
      required: true
      description: The unique ID of the change request or its number identifier in the space
      schema:
        type: string
    listOrder:
      name: order
      in: query
      description: An order for the items in the list
      schema:
        type: string
        default: desc
        enum:
          - asc
          - desc
    status:
      name: status
      in: query
      description: When provided, only comments with the given status are returned. Defaults to "all".
      schema:
        type: string
        default: all
        enum:
          - all
          - open
          - resolved
    targetPage:
      name: targetPage
      in: query
      description: The target page of the comment
      schema:
        type: string
    commentId:
      name: commentId
      in: path
      required: true
      description: The unique id of the comment
      schema:
        type: string
    commentReplyId:
      name: commentReplyId
      in: path
      required: true
      description: The unique id of the comment reply
      schema:
        type: string
    revisionId:
      name: revisionId
      in: path
      required: true
      description: The unique id of the revision
      schema:
        type: string
    integrationSearchQuery:
      name: search
      in: query
      description: |
        A search string to filter integrations by name
      schema:
        type: string
    visitorId:
      name: visitorId
      in: path
      required: true
      description: The id of the visitor
      schema:
        type: string
    collectionId:
      name: collectionId
      in: path
      required: true
      description: The unique id of the collection
      schema:
        type: string
    integrationName:
      name: integrationName
      in: path
      required: true
      description: Name of the integration.
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-_.]+$
        maxLength: 100
    integrationEventId:
      name: eventId
      in: path
      required: true
      description: ID of the integration event
      schema:
        type: string
    installationId:
      name: installationId
      in: path
      required: true
      description: Identifier of the installation
      schema:
        type: string
    siteId:
      name: siteId
      in: path
      required: true
      description: The unique id of the site
      schema:
        type: string
    organizationId:
      name: organizationId
      in: path
      required: true
      description: The unique id of the organization
      schema:
        type: string
    inviteId:
      name: inviteId
      in: path
      required: true
      description: The unique id of the invite
      schema:
        type: string
    successReturnURL:
      name: successReturnURL
      in: query
      description: The app screen URL to bring the user back to after a successful checkout.
      schema:
        type: string
    cancelReturnURL:
      name: cancelReturnURL
      in: query
      description: The app screen URL to bring the user back to after a canceled checkout.
      schema:
        type: string
    samlProviderId:
      name: samlProviderId
      in: path
      required: true
      description: The unique id of the SAML provider
      schema:
        type: string
    captureId:
      name: captureId
      in: path
      required: true
      description: The unique id of a capture
      schema:
        type: string
    snippetId:
      name: snippetId
      in: path
      required: true
      description: The unique id of a snippet
      schema:
        type: string
    ifUnmodifiedSince:
      in: header
      name: If-Unmodified-Since
      description: If provided, the operation will be rejected if the underlying resource has been modified since the date provided in the header.
      schema:
        type: string
        format: date-time
    shareLinkId:
      name: shareLinkId
      in: path
      required: true
      description: The unique id of the share link
      schema:
        type: string
    siteCustomizationUnmasked:
      name: unmasked
      in: query
      description: (Deprecated) Use the getRawCustomizationSettingsById internal endpoint.
      deprecated: true
      schema:
        type: boolean
        default: false
    siteSectionId:
      name: siteSectionId
      in: path
      required: true
      description: The unique id of the section within a site
      schema:
        type: string
    siteSpaceId:
      name: siteSpaceId
      in: path
      required: true
      description: The unique id of the site-space relationship
      schema:
        type: string
    siteRedirectId:
      name: siteRedirectId
      in: path
      required: true
      description: The unique id of the site redirect
      schema:
        type: string
    hostname:
      name: hostname
      in: path
      required: true
      description: The custom hostname, for example "docs.gitbook.com"
      schema:
        type: string
    xGitBookPartnerKey:
      in: header
      name: X-GitBook-Partner-Key
      schema:
        type: string
      required: true
    pageFormat:
      $ref: "#/components/parameters/documentFormat"
    commentStatus:
      $ref: "#/components/parameters/status"
    commentTargetPage:
      $ref: "#/components/parameters/targetPage"
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
          required:
            - code
            - message
    ApiInformation:
      type: object
      properties:
        version:
          type: string
          description: Current release of GitBook
        build:
          type: string
          description: Date of the latest release in ISO format
      required:
        - version
        - build
    List:
      type: object
      properties:
        next:
          type: object
          properties:
            page:
              type: string
              description: Unique identifier to query the next results page
          required:
            - page
        count:
          type: number
          description: Total count of objects in the list
    SearchSectionResult:
      type: object
      description: Search result representing a section in a page.
      properties:
        id:
          type: string
        title:
          type: string
        path:
          type: string
        body:
          type: string
        urls:
          type: object
          description: URLs associated with the object
          properties:
            app:
              type: string
              description: URL of the section in the application
              format: uri
          required:
            - app
      required:
        - id
        - title
        - path
        - body
        - urls
    SearchPageResult:
      type: object
      description: Search result representing a page in a space.
      properties:
        id:
          type: string
        title:
          type: string
        path:
          type: string
        sections:
          type: array
          items:
            $ref: "#/components/schemas/SearchSectionResult"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            app:
              type: string
              description: URL of the page in the application
              format: uri
          required:
            - app
      required:
        - id
        - title
        - path
        - urls
    SearchSpaceResult:
      type: object
      description: Search result representing a space.
      properties:
        id:
          type: string
        title:
          type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/SearchPageResult"
      required:
        - id
        - title
        - pages
    MarkdownDocument:
      type: object
      properties:
        markdown:
          type: string
          description: Content of the document formatted as markdown
      required:
        - markdown
    DocumentMarkBold:
      type: object
      properties:
        object:
          type: string
          enum:
            - mark
        type:
          type: string
          enum:
            - bold
      required:
        - object
        - type
    DocumentMarkItalic:
      type: object
      properties:
        object:
          type: string
          enum:
            - mark
        type:
          type: string
          enum:
            - italic
      required:
        - object
        - type
    DocumentMarkCode:
      type: object
      properties:
        object:
          type: string
          enum:
            - mark
        type:
          type: string
          enum:
            - code
      required:
        - object
        - type
    DocumentMarkKeyboard:
      type: object
      properties:
        object:
          type: string
          enum:
            - mark
        type:
          type: string
          enum:
            - keyboard
      required:
        - object
        - type
    DocumentMarkStrikethrough:
      type: object
      properties:
        object:
          type: string
          enum:
            - mark
        type:
          type: string
          enum:
            - strikethrough
      required:
        - object
        - type
    DocumentMarkColor:
      type: object
      properties:
        object:
          type: string
          enum:
            - mark
        type:
          type: string
          enum:
            - color
        data:
          type: object
          properties:
            text:
              type: string
              enum:
                - default
                - green
                - blue
                - red
                - orange
                - yellow
                - purple
            background:
              type: string
              enum:
                - default
                - green
                - blue
                - red
                - orange
                - yellow
                - purple
          required:
            - text
            - background
      required:
        - object
        - type
        - data
    DocumentTextMark:
      oneOf:
        - $ref: "#/components/schemas/DocumentMarkBold"
        - $ref: "#/components/schemas/DocumentMarkItalic"
        - $ref: "#/components/schemas/DocumentMarkCode"
        - $ref: "#/components/schemas/DocumentMarkKeyboard"
        - $ref: "#/components/schemas/DocumentMarkStrikethrough"
        - $ref: "#/components/schemas/DocumentMarkColor"
    DocumentTextLeaf:
      type: object
      properties:
        object:
          type: string
          enum:
            - leaf
        text:
          type: string
        marks:
          type: array
          items:
            $ref: "#/components/schemas/DocumentTextMark"
      required:
        - object
        - text
        - marks
    DocumentText:
      type: object
      properties:
        object:
          type: string
          enum:
            - text
        key:
          type: string
        leaves:
          type: array
          items:
            $ref: "#/components/schemas/DocumentTextLeaf"
      required:
        - object
        - leaves
    ContentRefURL:
      type: object
      properties:
        kind:
          type: string
          enum:
            - url
        url:
          type: string
      required:
        - kind
        - url
    ContentRefFile:
      type: object
      properties:
        kind:
          type: string
          enum:
            - file
        file:
          type: string
      required:
        - kind
        - file
    DocumentInlineImage:
      type: object
      properties:
        object:
          type: string
          enum:
            - inline
        type:
          type: string
          enum:
            - inline-image
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              oneOf:
                - $ref: "#/components/schemas/ContentRefURL"
                - $ref: "#/components/schemas/ContentRefFile"
            refDark:
              oneOf:
                - $ref: "#/components/schemas/ContentRefURL"
                - $ref: "#/components/schemas/ContentRefFile"
            caption:
              type: string
            size:
              type: string
              enum:
                - original
                - line
          required:
            - ref
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    ContentRefPage:
      type: object
      properties:
        kind:
          type: string
          enum:
            - page
        page:
          type: string
        space:
          description: ID of the space the page is in. The page is considered as in the current space if none is provided.
          type: string
      required:
        - kind
        - page
    ContentRefAnchor:
      type: object
      properties:
        kind:
          type: string
          enum:
            - anchor
        anchor:
          type: string
        space:
          description: ID of the space the page is in. The page is considered as in the current space if none is provided.
          type: string
        page:
          description: ID of the page the anchor is in. The anchor is considered as in the current page if none is provided.
          type: string
      required:
        - kind
        - anchor
    ContentRefUser:
      type: object
      properties:
        kind:
          type: string
          enum:
            - user
        user:
          type: string
      required:
        - kind
        - user
    ContentRefCollection:
      type: object
      properties:
        kind:
          type: string
          enum:
            - collection
        collection:
          type: string
      required:
        - kind
        - collection
    ContentRefSpace:
      type: object
      properties:
        kind:
          type: string
          enum:
            - space
        space:
          type: string
      required:
        - kind
        - space
    ContentRefSnippet:
      type: object
      properties:
        kind:
          type: string
          enum:
            - snippet
        snippet:
          type: string
        organization:
          type: string
      required:
        - kind
        - snippet
        - organization
    ContentRefReusableContent:
      type: object
      properties:
        kind:
          type: string
          enum:
            - reusable-content
        reusableContent:
          type: string
      required:
        - kind
        - reusableContent
    ContentRef:
      description: A relative reference to content in GitBook.
      oneOf:
        - $ref: "#/components/schemas/ContentRefFile"
        - $ref: "#/components/schemas/ContentRefURL"
        - $ref: "#/components/schemas/ContentRefPage"
        - $ref: "#/components/schemas/ContentRefAnchor"
        - $ref: "#/components/schemas/ContentRefUser"
        - $ref: "#/components/schemas/ContentRefCollection"
        - $ref: "#/components/schemas/ContentRefSpace"
        - $ref: "#/components/schemas/ContentRefSnippet"
        - $ref: "#/components/schemas/ContentRefReusableContent"
    DocumentInlineLink:
      type: object
      properties:
        object:
          type: string
          enum:
            - inline
        type:
          type: string
          enum:
            - link
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentText"
              - $ref: "#/components/schemas/DocumentInlineImage"
        data:
          type: object
          properties:
            ref:
              $ref: "#/components/schemas/ContentRef"
          required:
            - ref
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - nodes
        - data
    DocumentInlineEmoji:
      type: object
      properties:
        object:
          type: string
          enum:
            - inline
        type:
          type: string
          enum:
            - emoji
        key:
          type: string
        data:
          type: object
          properties:
            code:
              type: string
          required:
            - code
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentInlineMath:
      type: object
      properties:
        object:
          type: string
          enum:
            - inline
        type:
          type: string
          enum:
            - inline-math
        key:
          type: string
        data:
          type: object
          properties:
            formula:
              type: string
          required:
            - formula
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlocksEssentials:
      oneOf:
        - $ref: "#/components/schemas/DocumentBlockParagraph"
        - $ref: "#/components/schemas/DocumentBlockHeading"
        - $ref: "#/components/schemas/DocumentBlockListOrdered"
        - $ref: "#/components/schemas/DocumentBlockListUnordered"
        - $ref: "#/components/schemas/DocumentBlockListTasks"
        - $ref: "#/components/schemas/DocumentBlockDivider"
    DocumentFragment:
      type: object
      properties:
        object:
          type: string
          enum:
            - fragment
        key:
          type: string
        fragment:
          type: string
        type:
          type: string
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlocksEssentials"
      required:
        - object
        - nodes
    DocumentInlineAnnotation:
      type: object
      properties:
        object:
          type: string
          enum:
            - inline
        type:
          type: string
          enum:
            - annotation
        key:
          type: string
        fragments:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/DocumentFragment"
              - type: object
                properties:
                  type:
                    type: string
                    enum:
                      - annotation-body
                  nodes:
                    type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/DocumentBlocksEssentials"
                        - $ref: "#/components/schemas/DocumentBlockCode"
                    minItems: 1
                required:
                  - nodes
                  - type
        isVoid:
          type: boolean
          enum:
            - false
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentText"
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - fragments
        - isVoid
        - nodes
    DocumentBlockCodeLine:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - code-line
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentText"
              - $ref: "#/components/schemas/DocumentInlineAnnotation"
        data:
          type: object
          properties:
            highlighted:
              type: boolean
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - nodes
        - data
    DocumentBlockCode:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - code
        key:
          type: string
        data:
          type: object
          properties:
            syntax:
              type: string
            title:
              type: string
            overflow:
              type: string
              default: scroll
              enum:
                - scroll
                - wrap
            lineNumbers:
              type: boolean
            fullWidth:
              type: boolean
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlockCodeLine"
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - data
        - nodes
    DocumentInlineMention:
      type: object
      properties:
        object:
          type: string
          enum:
            - inline
        type:
          type: string
          enum:
            - mention
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              $ref: "#/components/schemas/ContentRef"
          required:
            - ref
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentInline:
      oneOf:
        - $ref: "#/components/schemas/DocumentInlineLink"
        - $ref: "#/components/schemas/DocumentInlineEmoji"
        - $ref: "#/components/schemas/DocumentInlineMath"
        - $ref: "#/components/schemas/DocumentInlineImage"
        - $ref: "#/components/schemas/DocumentInlineAnnotation"
        - $ref: "#/components/schemas/DocumentInlineMention"
    DocumentBlockParagraph:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - paragraph
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentInline"
              - $ref: "#/components/schemas/DocumentText"
        isVoid:
          type: boolean
          enum:
            - false
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - nodes
    DocumentBlockHeading:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - heading-1
            - heading-2
            - heading-3
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentInline"
              - $ref: "#/components/schemas/DocumentText"
        data:
          type: object
          properties:
            id:
              type: string
              pattern: ^[-a-z0-9.+_]+$
        meta:
          type: object
          properties:
            id:
              description: Unique ID to be used in an URL for the block.
              type: string
          required:
            - id
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - nodes
        - data
    DocumentBlockHint:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - hint
        key:
          type: string
        data:
          type: object
          properties:
            style:
              type: string
              enum:
                - info
                - warning
                - danger
                - success
          required:
            - style
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlocksEssentials"
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - data
        - nodes
    DocumentBlockQuote:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - blockquote
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlocksEssentials"
              - $ref: "#/components/schemas/DocumentBlockQuote"
        isVoid:
          type: boolean
          enum:
            - false
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - nodes
    DocumentBlockMath:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - math
        key:
          type: string
        data:
          type: object
          properties:
            formula:
              type: string
          required:
            - formula
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentTableViewGrid:
      type: object
      properties:
        type:
          type: string
          enum:
            - grid
        columns:
          type: array
          description: Ordered list of the definition IDs to display
          items:
            type: string
        columnWidths:
          type: object
          description: Percent width of each column
          additionalProperties:
            type: number
        hideHeader:
          type: boolean
          description: Should we display the header with column titles
        useNewSizing:
          type: boolean
          description: |
            Tables in GitBook originally used a scaled width approach i.e. the width defined
            in columnWidths would be scaled to ensure a 100% width table.

            We later changed this to treat the widths in columnWidths as exact values - they are
            never scaled. A columnWidth of 50 is rendered as 50px.

            In order to maintain backwards compatibility, we track whether or not we
            use the new system here.

            All new tables should have this value set to true, older tables will have it set
            to undefined.
      required:
        - type
        - columns
        - hideHeader
    DocumentTableViewCards:
      type: object
      properties:
        type:
          type: string
          enum:
            - cards
        cardSize:
          type: string
          description: Size of the cards. It indicates how many columns will be used
          enum:
            - medium
            - large
        columns:
          type: array
          description: Ordered list of the definition IDs to display
          items:
            type: string
        targetDefinition:
          type: string
          description: Definition ID to use as a target link for the card
        coverDefinition:
          type: string
          description: Definition ID to use as a cover image
        hideColumnTitle:
          type: boolean
          description: Should we display the column title or not
      required:
        - type
        - columns
        - cardSize
    DocumentTableRecord:
      type: object
      properties:
        orderIndex:
          type: string
        values:
          type: object
          additionalProperties:
            oneOf:
              - type: number
              - type: string
              - type: boolean
              - type: array
                items:
                  type: string
              - $ref: "#/components/schemas/ContentRef"
      required:
        - orderIndex
        - values
    DocumentTableDefinitionBase:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          description: Title for the column
      required:
        - id
        - title
    DocumentTableDefinitionText:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - text
            textAlignment:
              type: string
              enum:
                - center
                - right
                - left
            verticalAlignment:
              type: string
              enum:
                - top
                - middle
                - bottom
          required:
            - type
            - textAlignment
    DocumentTableDefinitionNumber:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - number
          required:
            - type
    DocumentTableDefinitionCheckbox:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - checkbox
          required:
            - type
    DocumentTableDefinitionFiles:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - files
          required:
            - type
    DocumentTableDefinitionUsers:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - users
            multiple:
              type: boolean
          required:
            - type
            - multiple
    DocumentTableDefinitionRating:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - rating
            max:
              type: number
          required:
            - type
            - max
    DocumentTableSelectOption:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        color:
          type: string
      required:
        - value
        - label
        - color
    DocumentTableDefinitionSelect:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - select
            multiple:
              type: boolean
            options:
              type: array
              items:
                $ref: "#/components/schemas/DocumentTableSelectOption"
          required:
            - type
            - multiple
            - options
    DocumentTableDefinitionContentRef:
      allOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - content-ref
          required:
            - type
    DocumentTableDefinition:
      oneOf:
        - $ref: "#/components/schemas/DocumentTableDefinitionText"
        - $ref: "#/components/schemas/DocumentTableDefinitionNumber"
        - $ref: "#/components/schemas/DocumentTableDefinitionCheckbox"
        - $ref: "#/components/schemas/DocumentTableDefinitionFiles"
        - $ref: "#/components/schemas/DocumentTableDefinitionUsers"
        - $ref: "#/components/schemas/DocumentTableDefinitionRating"
        - $ref: "#/components/schemas/DocumentTableDefinitionSelect"
        - $ref: "#/components/schemas/DocumentTableDefinitionContentRef"
    DocumentBlockTable:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - table
        key:
          type: string
        isVoid:
          type: boolean
          enum:
            - true
        data:
          type: object
          properties:
            view:
              oneOf:
                - $ref: "#/components/schemas/DocumentTableViewGrid"
                - $ref: "#/components/schemas/DocumentTableViewCards"
            records:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/DocumentTableRecord"
            definition:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/DocumentTableDefinition"
            fullWidth:
              type: boolean
              description: Whether to render the block as a full width one
          required:
            - view
            - records
            - definition
        fragments:
          type: array
          items:
            $ref: "#/components/schemas/DocumentFragment"
      required:
        - object
        - type
        - data
        - isVoid
        - fragments
    DocumentBlockListItem:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - list-item
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlocksEssentials"
              - $ref: "#/components/schemas/DocumentBlockCode"
              - $ref: "#/components/schemas/DocumentBlockHint"
              - $ref: "#/components/schemas/DocumentBlockQuote"
              - $ref: "#/components/schemas/DocumentBlockMath"
              - $ref: "#/components/schemas/DocumentBlockTable"
        isVoid:
          type: boolean
          enum:
            - false
        data:
          type: object
          properties:
            checked:
              type: boolean
      required:
        - object
        - type
        - nodes
    DocumentBlockListOrdered:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - list-ordered
        key:
          type: string
        data:
          type: object
          properties:
            start:
              type: number
              description: An integer to start counting from for the list items.
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlockListItem"
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - data
        - nodes
    DocumentBlockListUnordered:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - list-unordered
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlockListItem"
        data:
          type: object
          additionalProperties: false
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - nodes
    DocumentBlockListTasks:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - list-tasks
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlockListItem"
        isVoid:
          type: boolean
          enum:
            - false
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - nodes
    DocumentBlockDivider:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - divider
        key:
          type: string
        isVoid:
          type: boolean
          enum:
            - true
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - isVoid
        - data
    DocumentBlockImageDimension:
      oneOf:
        - type: number
        - type: object
          properties:
            unit:
              type: string
            value:
              type: number
          required:
            - unit
            - value
    DocumentBlockImage:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - image
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              oneOf:
                - $ref: "#/components/schemas/ContentRefURL"
                - $ref: "#/components/schemas/ContentRefFile"
            refDark:
              oneOf:
                - $ref: "#/components/schemas/ContentRefURL"
                - $ref: "#/components/schemas/ContentRefFile"
            width:
              $ref: "#/components/schemas/DocumentBlockImageDimension"
            height:
              $ref: "#/components/schemas/DocumentBlockImageDimension"
            alt:
              type: string
          required:
            - ref
        fragments:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/DocumentFragment"
              - type: object
                properties:
                  fragment:
                    type: string
                    enum:
                      - caption
                  nodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/DocumentBlockParagraph"
                required:
                  - nodes
                  - fragment
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - fragments
        - isVoid
    DocumentBlockImages:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - images
        key:
          type: string
        data:
          type: object
          properties:
            align:
              type: string
              enum:
                - center
                - left
                - right
            fullWidth:
              type: boolean
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlockImage"
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - data
        - nodes
        - isVoid
    DocumentBlockFile:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - file
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              oneOf:
                - $ref: "#/components/schemas/ContentRefFile"
          required:
            - ref
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlockDrawing:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - drawing
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              oneOf:
                - $ref: "#/components/schemas/ContentRefFile"
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlockEmbed:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - embed
        key:
          type: string
        data:
          type: object
          properties:
            url:
              type: string
            fullWidth:
              type: boolean
          required:
            - url
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlockExpandable:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - expandable
        key:
          type: string
        isVoid:
          type: boolean
          enum:
            - true
        data:
          type: object
          properties: {}
          additionalProperties: false
        fragments:
          type: array
          items:
            oneOf:
              - allOf:
                  - $ref: "#/components/schemas/DocumentFragment"
                  - type: object
                    properties:
                      fragment:
                        type: string
                        enum:
                          - expandable-title
                      type:
                        type: string
                        enum:
                          - expandable-title
                      nodes:
                        type: array
                        items:
                          $ref: "#/components/schemas/DocumentBlockParagraph"
                        minItems: 1
                        maxItems: 1
                    required:
                      - nodes
                      - fragment
                      - type
              - allOf:
                  - $ref: "#/components/schemas/DocumentFragment"
                  - type: object
                    properties:
                      fragment:
                        type: string
                        enum:
                          - expandable-body
                      type:
                        type: string
                        enum:
                          - expandable-body
                      nodes:
                        type: array
                        items:
                          oneOf:
                            - $ref: "#/components/schemas/DocumentBlocksEssentials"
                            - $ref: "#/components/schemas/DocumentBlockCode"
                        minItems: 1
                    required:
                      - nodes
                      - fragment
                      - type
        meta:
          type: object
          properties:
            id:
              description: Unique ID to be used in an URL for the block.
              type: string
          required:
            - id
      required:
        - object
        - type
        - isVoid
        - fragments
        - data
    DocumentBlockContentRef:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - content-ref
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              $ref: "#/components/schemas/ContentRef"
          required:
            - ref
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    PlainObject:
      properties: {}
      additionalProperties:
        oneOf:
          - $ref: "#/components/schemas/PlainObject"
          - type: string
          - type: boolean
          - type: number
          - type: array
            items:
              oneOf:
                - type: string
                - type: boolean
                - type: number
                - $ref: "#/components/schemas/PlainObject"
    ContentKitDefaultAction:
      oneOf:
        - type: object
          description: Action to open an overlay modal defined by "componentId".
          properties:
            action:
              type: string
              enum:
                - "@ui.modal.open"
            componentId:
              type: string
            props:
              $ref: "#/components/schemas/PlainObject"
          required:
            - action
            - componentId
            - props
        - type: object
          description: Action when a modal overlay is closed, with a return value to the higher level component in the stack. This action will be triggered on the parent component instance.
          properties:
            action:
              type: string
              enum:
                - "@ui.modal.close"
            returnValue:
              $ref: "#/components/schemas/PlainObject"
          required:
            - action
            - returnValue
        - type: object
          description: Action to complete the current flow the user is in.
          properties:
            action:
              type: string
              enum:
                - "@ui.complete"
            returnValue:
              $ref: "#/components/schemas/PlainObject"
          required:
            - action
            - returnValue
        - type: object
          description: Action to open an url.
          properties:
            action:
              type: string
              enum:
                - "@ui.url.open"
            url:
              type: string
          required:
            - action
            - url
        - type: object
          description: Action when a link is being unfurled into a block.
          properties:
            action:
              type: string
              enum:
                - "@link.unfurl"
            url:
              type: string
          required:
            - action
            - url
        - type: object
          description: Action to update the properties stored in the related node.
          properties:
            action:
              type: string
              enum:
                - "@editor.node.updateProps"
            props:
              $ref: "#/components/schemas/PlainObject"
          required:
            - action
            - props
    ContentKitAction:
      anyOf:
        - type: object
          description: Custom action to re-render the block.
          properties:
            action:
              type: string
          additionalProperties: true
          required:
            - action
        - $ref: "#/components/schemas/ContentKitDefaultAction"
    DocumentBlockIntegration:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - integration
        key:
          type: string
        data:
          type: object
          properties:
            integration:
              type: string
              description: Name of the integration
            block:
              type: string
              description: ID of the block in the integration
            props:
              description: Properties passed to the block during rendering
              $ref: "#/components/schemas/PlainObject"
            action:
              $ref: "#/components/schemas/ContentKitAction"
            url:
              type: string
              description: |
                URL associated with the content represented by the block.
                This property is set when creating a block from a URL (unfurl) to ensure
                we can convert the block back to an embed.
            fullWidth:
              type: boolean
          required:
            - integration
            - block
            - props
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlockTabsItem:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - tabs-item
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlocksEssentials"
              - $ref: "#/components/schemas/DocumentBlockContentRef"
              - $ref: "#/components/schemas/DocumentBlockCode"
              - $ref: "#/components/schemas/DocumentBlockEmbed"
              - $ref: "#/components/schemas/DocumentBlockFile"
              - $ref: "#/components/schemas/DocumentBlockImages"
              - $ref: "#/components/schemas/DocumentBlockDrawing"
              - $ref: "#/components/schemas/DocumentBlockHint"
              - $ref: "#/components/schemas/DocumentBlockQuote"
              - $ref: "#/components/schemas/DocumentBlockMath"
              - $ref: "#/components/schemas/DocumentBlockIntegration"
        data:
          type: object
          properties:
            title:
              type: string
        meta:
          type: object
          properties:
            id:
              description: Unique ID to be used in an URL for the block.
              type: string
          required:
            - id
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - nodes
        - data
    DocumentBlockTabs:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - tabs
        key:
          type: string
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlockTabsItem"
        isVoid:
          type: boolean
          enum:
            - false
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - nodes
    OpenAPIOperationPointer:
      type: object
      description: Pointer to an operation in the OpenAPI spec.
      properties:
        path:
          type: string
          description: Path of the operation in the OpenAPI spec.
        method:
          type: string
          description: HTTP method of the operation in the OpenAPI spec.
      required:
        - path
        - method
    DocumentBlockOpenAPI:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - swagger
        key:
          type: string
        data:
          allOf:
            - $ref: "#/components/schemas/OpenAPIOperationPointer"
            - type: object
              properties:
                ref:
                  oneOf:
                    - $ref: "#/components/schemas/ContentRefFile"
                expanded:
                  type: boolean
                  description: If true, the block is opened by default.
                fullWidth:
                  type: boolean
              required:
                - ref
        isVoid:
          type: boolean
          enum:
            - true
        meta:
          type: object
          properties:
            id:
              description: Unique ID to be used in an URL for the block.
              type: string
          required:
            - id
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlockReusableContent:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - reusable-content
        key:
          type: string
        data:
          type: object
          properties:
            ref:
              $ref: "#/components/schemas/ContentRefReusableContent"
          required:
            - ref
        isVoid:
          type: boolean
          enum:
            - true
      required:
        - object
        - type
        - data
        - isVoid
    DocumentBlockStepperStep:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - stepper-step
        key:
          type: string
        nodes:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DocumentBlocksEssentials"
              - $ref: "#/components/schemas/DocumentBlockContentRef"
              - $ref: "#/components/schemas/DocumentBlockCode"
              - $ref: "#/components/schemas/DocumentBlockEmbed"
              - $ref: "#/components/schemas/DocumentBlockFile"
              - $ref: "#/components/schemas/DocumentBlockImages"
              - $ref: "#/components/schemas/DocumentBlockDrawing"
              - $ref: "#/components/schemas/DocumentBlockHint"
              - $ref: "#/components/schemas/DocumentBlockQuote"
              - $ref: "#/components/schemas/DocumentBlockMath"
              - $ref: "#/components/schemas/DocumentBlockIntegration"
        data:
          type: object
          properties:
            icon:
              type: string
        isVoid:
          type: boolean
          enum:
            - false
      required:
        - object
        - type
        - nodes
        - data
    DocumentBlockStepper:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        type:
          type: string
          enum:
            - stepper
        key:
          type: string
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlockStepperStep"
        isVoid:
          type: boolean
          enum:
            - false
        data:
          type: object
          properties: {}
          additionalProperties: false
      required:
        - object
        - type
        - nodes
    DocumentBlocksTopLevels:
      oneOf:
        - $ref: "#/components/schemas/DocumentBlocksEssentials"
        - $ref: "#/components/schemas/DocumentBlockQuote"
        - $ref: "#/components/schemas/DocumentBlockHint"
        - $ref: "#/components/schemas/DocumentBlockImages"
        - $ref: "#/components/schemas/DocumentBlockFile"
        - $ref: "#/components/schemas/DocumentBlockDrawing"
        - $ref: "#/components/schemas/DocumentBlockEmbed"
        - $ref: "#/components/schemas/DocumentBlockCode"
        - $ref: "#/components/schemas/DocumentBlockMath"
        - $ref: "#/components/schemas/DocumentBlockExpandable"
        - $ref: "#/components/schemas/DocumentBlockTabs"
        - $ref: "#/components/schemas/DocumentBlockTable"
        - $ref: "#/components/schemas/DocumentBlockOpenAPI"
        - $ref: "#/components/schemas/DocumentBlockContentRef"
        - $ref: "#/components/schemas/DocumentBlockIntegration"
        - $ref: "#/components/schemas/DocumentBlockReusableContent"
        - $ref: "#/components/schemas/DocumentBlockStepper"
    JSONDocument:
      type: object
      properties:
        object:
          type: string
          enum:
            - document
        data:
          type: object
          properties:
            schemaVersion:
              description: The schema version of the document. If undefined, the document is considered to be of the latest schema version.
              type: integer
          additionalProperties: true
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentBlocksTopLevels"
      required:
        - object
        - data
        - nodes
    Document:
      oneOf:
        - $ref: "#/components/schemas/MarkdownDocument"
          title: Markdown
        - type: object
          title: JSON Document
          properties:
            document:
              $ref: "#/components/schemas/JSONDocument"
          required:
            - document
        - type: object
          title: Empty
          properties: {}
          additionalProperties: false
    SearchAIAnswerSource:
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - page
                - capture
          required:
            - type
        - discriminator:
            propertyName: type
          oneOf:
            - type: object
              title: Page
              properties:
                type:
                  type: string
                  enum:
                    - page
                page:
                  type: string
                revision:
                  type: string
                space:
                  type: string
                sections:
                  type: array
                  items:
                    type: string
              required:
                - type
                - page
                - revision
                - space
                - sections
            - type: object
              title: Snippet
              properties:
                type:
                  type: string
                  enum:
                    - capture
                captureId:
                  type: string
                  description: ID of the capture
                source:
                  type: string
                  description: Source of the capture
              required:
                - type
                - captureId
                - source
    SearchAIAnswer:
      type: object
      description: Answer from AI for a question asked on a content.
      properties:
        text:
          deprecated: true
          type: string
        answer:
          $ref: "#/components/schemas/Document"
        followupQuestions:
          type: array
          items:
            type: string
        sources:
          type: array
          description: The sources used to generate the answer.
          items:
            $ref: "#/components/schemas/SearchAIAnswerSource"
        pages:
          type: array
          deprecated: true
          description: The pages used to generate the answer. Deprecated - use sources instead.
          items:
            type: object
            properties:
              page:
                type: string
              revision:
                type: string
              space:
                type: string
              sections:
                type: array
                items:
                  type: string
            required:
              - page
              - revision
              - space
              - sections
      required:
        - pages
        - sources
        - followupQuestions
    SearchAIQuery:
      type: object
      properties:
        query:
          type: string
        previousQueries:
          type: array
          deprecated: true
          maxItems: 10
          items:
            type: string
      required:
        - query
    SearchAIRecommendedQuestions:
      type: object
      description: Questions recommended by the AI for the given content.
      properties:
        questions:
          type: array
          items:
            type: string
      required:
        - questions
    User:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "user"
          enum:
            - user
        id:
          type: string
          description: Unique identifier for the user
        displayName:
          type: string
          description: Full name for the user
        email:
          type: string
          description: Email address of the user
        photoURL:
          type: string
          description: URL of the user's profile picture
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the user in the API
              format: uri
          required:
            - location
      required:
        - object
        - id
        - displayName
        - urls
    Timestamp:
      type: string
      format: date-time
    UserAPIToken:
      type: object
      description: The API token details, excluding the token itself.
      properties:
        id:
          type: string
          description: The API token ID.
        label:
          type: string
          description: The API token name.
        createdAt:
          $ref: "#/components/schemas/Timestamp"
          description: The API token creation date.
      required:
        - id
        - label
        - createdAt
    UserAPITokenExtended:
      description: The API token details, including the token itself.
      allOf:
        - $ref: "#/components/schemas/UserAPIToken"
        - type: object
          properties:
            token:
              type: string
              description: The actual token value.
          required:
            - token
    SpaceTitle:
      type: string
      description: Title of the space
      maxLength: 50
    Emoji:
      type: string
      maxLength: 50
      format: emoji
      description: Unicode codepoint or character of the emoji
      example: 🎉
    ContentVisibility:
      type: string
      description: |
        * `public`: Anyone can access the content, and the content is indexed by search engines.
        * `unlisted`: Anyone can access the content, and the content is not indexed by search engines
        * `share-link`: Anyone with a secret token in the url can access the content.
        * `visitor-auth`: Anyone authenticated through a JWT token can access the content.
        * `in-collection`: Anyone who can access the parent collection can access the content.
          Only available for spaces in a collection.
        * `private`: Authorized members can access the content.
      enum:
        - public
        - unlisted
        - share-link
        - visitor-auth
        - in-collection
        - private
    SpaceEditMode:
      type: string
      description: |
        Determines how a Space can be edited.
        * `live`: Users can directly edit the space
        * `locked`: All edits are locked for this space.
      enum:
        - live
        - locked
    URL:
      type: string
      format: uri
    GitSyncProvider:
      type: string
      description: The provider of the Git Sync installation.
      enum:
        - github
        - gitlab
        - github-legacy
    GitSyncState:
      type: object
      properties:
        installationProvider:
          $ref: "#/components/schemas/GitSyncProvider"
        integration:
          type: string
          description: The integration name providing the Git Sync.
        url:
          type: string
          description: The URL to the repository tree, used when rendering public content.
        updatedAt:
          description: When the Git provider details were last updated
          $ref: "#/components/schemas/Timestamp"
    VisitorAuthCustomBackend:
      type: object
      title: Custom backend for Visitor Authentication
      properties:
        backend:
          type: string
          description: Custom backend for Visitor Authentication
          enum:
            - custom
      required:
        - backend
    VisitorAuthIntegrationBackend:
      type: object
      title: Integration backend for Visitor Authentication
      properties:
        backend:
          type: string
          description: Integration as backend for Visitor Authentication
          enum:
            - integration
      required:
        - backend
    VisitorAuth:
      oneOf:
        - $ref: "#/components/schemas/VisitorAuthCustomBackend"
        - allOf:
            - $ref: "#/components/schemas/VisitorAuthIntegrationBackend"
            - type: object
              properties:
                integration:
                  type: string
                  description: Name of integration being used as the backend for Visitor Authentication
              required:
                - integration
    MemberRole:
      type: string
      description: |
        "The role of a member in an organization.
        "admin": Can administrate the content: create, delete spaces, ...
        "create": Can create content.
        "review": Can review content.
        "edit": Can edit the content (live or change requests).
        "comment": Can access the content and its discussions.
        "read": Can access the content, but cannot update it in any way.
      enum:
        - admin
        - create
        - edit
        - review
        - comment
        - read
    MemberRoleOrGuest:
      description: The role of a member in an organization, null for guests
      oneOf:
        - $ref: "#/components/schemas/MemberRole"
        - type: string
          nullable: true
          enum:
            - null
    DefaultLevel:
      description: Default level for a piece of content
      oneOf:
        - $ref: "#/components/schemas/MemberRoleOrGuest"
        - type: string
          enum:
            - inherit
    Space:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "space"
          enum:
            - space
        id:
          type: string
          description: Unique identifier for the space
        title:
          $ref: "#/components/schemas/SpaceTitle"
        emoji:
          description: An emoji for this space. It'll match the emoji shown in the GitBook app.
          $ref: "#/components/schemas/Emoji"
        visibility:
          $ref: "#/components/schemas/ContentVisibility"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        deletedAt:
          $ref: "#/components/schemas/Timestamp"
        editMode:
          $ref: "#/components/schemas/SpaceEditMode"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the space in the API
              format: uri
            app:
              type: string
              description: URL of the space in the application
              format: uri
            published:
              type: string
              description: URL of the published version of the space. Only defined when visibility is not "private."
              format: uri
            public:
              type: string
              description: URL of the public version of the space. Only defined when visibility is "public".
              format: uri
            icon:
              description: URL of the icon of this space, if defined.
              $ref: "#/components/schemas/URL"
          required:
            - app
            - location
        organization:
          type: string
          description: ID of the organization owning this space
        parent:
          type: string
          description: ID of the parent collection.
        gitSync:
          $ref: "#/components/schemas/GitSyncState"
        visitorAuth:
          $ref: "#/components/schemas/VisitorAuth"
        revision:
          type: string
          description: ID of the active revision in the space.
        defaultLevel:
          $ref: "#/components/schemas/DefaultLevel"
        comments:
          type: number
          description: Count of opened comments on the space.
        changeRequests:
          type: number
          description: Total count of change requests on the space.
        changeRequestsOpen:
          type: number
          description: Count of open change requests on the space.
        changeRequestsDraft:
          type: number
          description: Count of draft change requests on the space.
        permissions:
          type: object
          description: The set of permissions for the space
          properties:
            access:
              type: boolean
              description: Can the user access the space in the application.
            admin:
              type: boolean
              description: Can the user edit the title, install integrations, and manage the space.
            edit:
              type: boolean
              description: Can the user edit the content of the space by creating a change request.
            comment:
              type: boolean
              description: Can the user comment on the content.
            merge:
              type: boolean
              description: Can the user merge change requests.
            review:
              type: boolean
              description: Can the user review change requests.
          required:
            - access
            - admin
            - edit
            - comment
            - merge
            - review
      required:
        - object
        - id
        - type
        - title
        - emoji
        - organization
        - visibility
        - revision
        - createdAt
        - updatedAt
        - comments
        - changeRequests
        - changeRequestsOpen
        - changeRequestsDraft
        - urls
        - defaultLevel
        - permissions
    SpacePointer:
      type: object
      properties:
        type:
          type: string
          enum:
            - space
        space:
          type: string
          description: Unique identifier for the space
      required:
        - type
        - space
    CollectionPointer:
      type: object
      properties:
        type:
          type: string
          enum:
            - collection
        collection:
          type: string
          description: Unique identifier for the collection
      required:
        - type
        - collection
    ContentPosition:
      type: object
      description: Position at which to insert an item
      properties:
        before:
          oneOf:
            - $ref: "#/components/schemas/SpacePointer"
            - $ref: "#/components/schemas/CollectionPointer"
        after:
          oneOf:
            - $ref: "#/components/schemas/SpacePointer"
            - $ref: "#/components/schemas/CollectionPointer"
    IntegrationBlockMarkdown:
      oneOf:
        - type: object
          description: Format the custom block as a codeblock
          properties:
            codeblock:
              description: Code block syntax to use to identify the block.
              type: string
            body:
              description: Key of the property to use as body of the codeblock.
              type: string
          required:
            - codeblock
            - body
    IntegrationBlock:
      type: object
      properties:
        id:
          type: string
          description: Unique ID in the integration for the block. It also represents the UI component used.
        title:
          type: string
          description: Short descriptive title for the block.
          minLength: 2
          maxLength: 40
        description:
          type: string
          description: Long descriptive text for the block.
          minLength: 0
          maxLength: 150
        icon:
          type: string
          description: URL of the icon to represent this block.
        urlUnfurl:
          type: array
          description: URLs patterns to convert as this block.
          items:
            type: string
        markdown:
          $ref: "#/components/schemas/IntegrationBlockMarkdown"
      required:
        - id
        - title
    Embed:
      allOf:
        - type: object
          properties:
            title:
              type: string
            site:
              type: string
            icon:
              type: string
          required:
            - title
            - site
        - oneOf:
            - type: object
              title: Link
              properties:
                type:
                  type: string
                  enum:
                    - link
              required:
                - type
            - type: object
              title: HTML
              properties:
                type:
                  type: string
                  enum:
                    - rich
                html:
                  type: string
              required:
                - type
                - html
            - type: object
              title: Integration
              properties:
                type:
                  type: string
                  enum:
                    - integration
                integration:
                  description: The identifier of the integration performing the rendering
                  type: string
                block:
                  $ref: "#/components/schemas/IntegrationBlock"
              required:
                - type
                - integration
                - block
    SearchAIAnswerStream:
      type: object
      properties:
        type:
          type: string
          enum:
            - answer
        answer:
          $ref: "#/components/schemas/SearchAIAnswer"
      required:
        - type
        - answer
    SearchAIRecommendedQuestionStream:
      type: object
      properties:
        question:
          type: string
      required:
        - question
    UpdateSpaceGitInfo:
      type: object
      description: Update metadata about the Git provider on the space
      properties:
        provider:
          type: string
          description: The git provider
          enum:
            - github
            - gitlab
        url:
          type: string
          description: The repository's tree URL
    ImportGitRepository:
      type: object
      properties:
        url:
          type: string
          description: URL of the Git repository to import. It can contain basic auth credentials.
        ref:
          type: string
          description: Git ref to import in the format "refs/heads/main"
        repoCacheID:
          type: string
          description: Unique identifier to use to cache the Git repository across multiple operations.
        repoTreeURL:
          type: string
          description: URL to use as a prefix for external file references.
        repoCommitURL:
          type: string
          description: URL to use as a prefix for the commit URL.
        repoProjectDirectory:
          type: string
          description: Path to a root directory for the project in the repository.
        timestamp:
          description: |
            The timestamp of the event that triggered this import. It ensures that Git sync import and export operations are executed in the same order on GitBook and on the remote repository.
          $ref: "#/components/schemas/Timestamp"
        force:
          type: boolean
        standalone:
          type: boolean
          description: If true, the import will generate a revision without updating the space primary content.
        gitInfo:
          description: Optional metadata to store on the space about the Git provider
          $ref: "#/components/schemas/UpdateSpaceGitInfo"
      required:
        - url
        - ref
    ExportToGitRepository:
      type: object
      properties:
        url:
          type: string
          description: URL of the Git repository to export to. It can contain basic auth credentials.
        ref:
          type: string
          description: Git ref to push the commit to in the format "refs/heads/main"
        commitMessage:
          type: string
          description: Message for the commit generated by the export
        repoCacheID:
          type: string
          description: Unique identifier to use to cache the Git repository across multiple operations.
        repoTreeURL:
          type: string
          description: URL to use as a prefix for external file references.
        repoCommitURL:
          type: string
          description: URL to use as a prefix for the commit URL.
        repoProjectDirectory:
          type: string
          description: Path to a root directory for the project in the repository.
        timestamp:
          description: |
            The timestamp of the event that triggered this export. It ensures that Git sync import and export operations are executed in the same order on GitBook and on the remote repository.
          $ref: "#/components/schemas/Timestamp"
        force:
          type: boolean
        gitInfo:
          description: Optional metadata to store on the space about the Git provider
          $ref: "#/components/schemas/UpdateSpaceGitInfo"
      required:
        - url
        - ref
        - commitMessage
    Icon:
      type: string
      maxLength: 50
      format: icon
      description: Name of the icon
      example: gear
    RevisionPageBase:
      type: object
      properties:
        id:
          description: Unique identifier for the page in the revision
          type: string
        title:
          description: Title of the page
          type: string
          minLength: 1
        emoji:
          description: Emoji of the page, if one has been set.
          $ref: "#/components/schemas/Emoji"
        icon:
          description: Icon of the page, if one has been set.
          $ref: "#/components/schemas/Icon"
        createdAt:
          description: When the page was first created. Only present if page has been edited at least once.
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          description: When the page was last edited. Only present if page has been edited at least once.
          $ref: "#/components/schemas/Timestamp"
      required:
        - id
        - title
    RevisionPageDocument:
      allOf:
        - $ref: "#/components/schemas/RevisionPageBase"
        - $ref: "#/components/schemas/Document"
        - type: object
          properties:
            kind:
              type: string
              deprecated: true
              enum:
                - sheet
            type:
              type: string
              enum:
                - document
            urls:
              required:
                - app
              properties:
                app:
                  description: Location of the page in the app
                  $ref: "#/components/schemas/URL"
            slug:
              description: Page's slug in its direct parent
              type: string
            path:
              description: Complete path to access the page in the revision.
              type: string
            description:
              type: string
            documentId:
              type: string
              description: ID of the document with the page body. If undefined, the page is empty.
            pages:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/RevisionPageDocument"
                  - $ref: "#/components/schemas/RevisionPageLink"
                  - $ref: "#/components/schemas/RevisionPageComputed"
            git:
              $ref: "#/components/schemas/GitSyncBlob"
            layout:
              $ref: "#/components/schemas/RevisionPageLayoutOptions"
            cover:
              $ref: "#/components/schemas/RevisionPageDocumentCover"
            hidden:
              type: boolean
              description: If true, the page is not displayed in the navigation, while still being accessible.
              default: false
            noIndex:
              type: boolean
              description: If true, the page is not indexable in the search and ask features.
              default: false
            noRobotsIndex:
              type: boolean
              description: If true, the page is not indexable by search engine robots.
              default: false
            computed:
              description: Defined when the page was generated by a computed content.
              $ref: "#/components/schemas/ComputedContentSource"
          required:
            - kind
            - type
            - urls
            - slug
            - path
            - pages
            - layout
    RevisionPageLink:
      allOf:
        - $ref: "#/components/schemas/RevisionPageBase"
        - type: object
          properties:
            kind:
              type: string
              deprecated: true
              enum:
                - link
            type:
              type: string
              enum:
                - link
            target:
              $ref: "#/components/schemas/ContentRef"
            href:
              type: string
            hidden:
              type: boolean
              description: If true, the page is not displayed in the navigation, while still being accessible.
              default: false
          required:
            - kind
            - type
            - target
    ComputedContentDependency:
      oneOf:
        - $ref: "#/components/schemas/ContentRefSpace"
    ComputedContentSource:
      type: object
      description: Parameters for a computed content
      properties:
        integration:
          type: string
          description: Name of the integration
        source:
          type: string
          description: Identifier of the source used for computation
        props:
          description: Properties to be passed to the computation
          $ref: "#/components/schemas/PlainObject"
        dependsOn:
          type: array
          description: Dependencies the computation depend on. When the dependency's targets are updated, the computation will be updated.
          items:
            $ref: "#/components/schemas/ComputedContentDependency"
      required:
        - integration
        - source
        - props
    RevisionPageComputed:
      allOf:
        - $ref: "#/components/schemas/RevisionPageBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - computed
            computed:
              $ref: "#/components/schemas/ComputedContentSource"
          required:
            - type
            - computed
    GitSyncBlob:
      type: object
      properties:
        oid:
          type: string
          description: SHA for the blob
        path:
          type: string
          description: Path of the blob in the Git tree
      required:
        - oid
        - path
    RevisionPageLayoutOptionsCoverSize:
      type: string
      description: Size of the cover image.
      enum:
        - hero
        - full
    RevisionPageLayoutOptions:
      type: object
      properties:
        cover:
          type: boolean
          description: Should the cover be visible?
        coverSize:
          $ref: "#/components/schemas/RevisionPageLayoutOptionsCoverSize"
        title:
          type: boolean
          description: Should the title be visible?
        description:
          type: boolean
          description: Should the description be visible?
        tableOfContents:
          type: boolean
          description: Should the table of contents be visible?
        outline:
          type: boolean
          description: Should the outline be visible?
        pagination:
          type: boolean
          description: Should the pagination be visible?
    RevisionPageDocumentCover:
      type: object
      properties:
        ref:
          description: Content reference pointing to the source image.
          $ref: "#/components/schemas/ContentRefFile"
        yPos:
          description: Vertical position of the cover image.
          type: number
      required:
        - yPos
    AnalyticsFeedbacksPageScore:
      type: object
      description: A score breakdown for a specific page.
      required:
        - score
        - total
        - rating
        - ponderedScore
        - bad
        - ok
        - good
      properties:
        score:
          type: number
          description: Score based on each rating (+1 for 'good', -0.5 for 'ok', -2 for 'bad').
        total:
          type: number
          description: Total number of ratings done by end users.
        rating:
          type: string
          deprecated: true
          description: Summary of the rating based on the score ('good', 'ok', or 'bad')
        ponderedScore:
          type: number
          description: Score multiplied by the number of ratings to give more importance to highly rated content.
        bad:
          type: number
          description: Number of 'bad' ratings.
        ok:
          type: number
          description: Number of 'ok' ratings.
        good:
          type: number
          description: Number of 'good' ratings.
    AnalyticsContentPage:
      type: object
      description: Page entry in the content analytics.
      required:
        - page
        - pageViews
      properties:
        page:
          $ref: "#/components/schemas/RevisionPageDocument"
        pageViews:
          type: number
        feedbacks:
          $ref: "#/components/schemas/AnalyticsFeedbacksPageScore"
    AnalyticsContentPages:
      type: object
      required:
        - pages
      properties:
        pages:
          type: array
          items:
            $ref: "#/components/schemas/AnalyticsContentPage"
    AnalyticsSearchPeriod:
      type: string
      enum:
        - last_month
        - last_week
        - last_year
    AnalyticsSearchQuery:
      type: object
      description: Analytics entry for a search query.
      required:
        - query
        - searches
        - hits
        - pageHits
        - sectionHits
      properties:
        query:
          type: string
        searches:
          description: Number of searches done by users.
          type: number
        hits:
          description: Number of objects matching this search.
          type: number
        pageHits:
          description: Number of pages matching this search.
          type: number
        sectionHits:
          description: Number of sections matching this search.
          type: number
    AnalyticsTopSearches:
      type: object
      description: Top search queries for a content.
      required:
        - searches
        - queries
      properties:
        searches:
          description: Number of searches done by users.
          type: number
        queries:
          description: Top queries searched for this content.
          type: array
          items:
            $ref: "#/components/schemas/AnalyticsSearchQuery"
    AnalyticsTrafficInterval:
      type: string
      enum:
        - daily
        - weekly
        - monthly
    AnalyticsTrafficPageViews:
      type: object
      required:
        - count
        - views
      properties:
        count:
          description: Total number of page views over the period.
          type: number
        views:
          description: Page views per interval (day, week, month).
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
              count:
                type: number
            required:
              - timestamp
              - count
    SpaceTrackPageView:
      type: object
      properties:
        pageId:
          type: string
          description: Unique identifier of the page.
        visitor:
          type: object
          description: Analytics info on the GitBook's content visitor.
          properties:
            anonymousId:
              type: string
              description: GitBook's unique identifier of the visitor.
            cookies:
              type: object
              description: The visitors cookies.
              additionalProperties:
                type: string
            ip:
              type: string
              description: |
                IP address of the visitor.
                If undefined, it'll default to the IP executing the request.
            userAgent:
              type: string
              description: |
                User-agent of the visitor.
                https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent
            language:
              type: string
              description: |
                Language of the visitor.
                https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language
          required:
            - anonymousId
            - cookies
            - userAgent
        url:
          type: string
          description: The GitBook content's URL visited (including URL params).
        referrer:
          type: string
          description: The URL of referrer that linked to the page.
      required:
        - visitor
        - url
        - referrer
    InviteUsersAndTeams:
      type: object
      properties:
        role:
          description: Role to set.
          $ref: "#/components/schemas/MemberRoleOrGuest"
      anyOf:
        - type: object
          properties:
            teams:
              type: array
              minItems: 1
              items:
                type: string
                description: The ID of the team to be invited
          required:
            - teams
        - type: object
          properties:
            users:
              type: array
              minItems: 1
              items:
                type: string
                description: The ID of the user to be invited
          required:
            - users
      required:
        - role
    RevisionPageGroup:
      allOf:
        - $ref: "#/components/schemas/RevisionPageBase"
        - type: object
          properties:
            kind:
              type: string
              deprecated: true
              enum:
                - group
            type:
              type: string
              enum:
                - group
            slug:
              description: Page's slug in its direct parent
              type: string
            path:
              description: Complete path to access the page in the revision.
              type: string
            hidden:
              type: boolean
              description: If true, the page is not displayed in the navigation, while still being accessible.
              default: false
            noIndex:
              type: boolean
              description: If true, the page is not indexable in the search and ask features.
              default: false
            noRobotsIndex:
              type: boolean
              description: If true, the page is not indexable by search engine robots.
              default: false
            pages:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/RevisionPageDocument"
                  - $ref: "#/components/schemas/RevisionPageLink"
                  - $ref: "#/components/schemas/RevisionPageComputed"
          required:
            - kind
            - type
            - slug
            - path
            - pages
    RevisionPage:
      oneOf:
        - $ref: "#/components/schemas/RevisionPageDocument"
        - $ref: "#/components/schemas/RevisionPageGroup"
        - $ref: "#/components/schemas/RevisionPageLink"
        - $ref: "#/components/schemas/RevisionPageComputed"
      discriminator:
        propertyName: type
    RevisionFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        downloadURL:
          type: string
        size:
          type: number
        dimensions:
          type: object
          description: For images, it contains the dimensions of it.
          properties:
            width:
              type: number
            height:
              type: number
          required:
            - width
            - height
        git:
          $ref: "#/components/schemas/GitSyncBlob"
      required:
        - id
        - name
        - contentType
        - downloadURL
        - size
    RevisionReusableContent:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        document:
          type: string
        git:
          $ref: "#/components/schemas/GitSyncBlob"
      required:
        - id
        - title
    GitSyncCommit:
      type: object
      properties:
        oid:
          type: string
          description: SHA for the commit
        message:
          type: string
          description: Message describing the purpose of the commit
        createdByGitBook:
          type: boolean
          description: If true, the Git commit was generated by an export from GitBook
        url:
          type: string
          description: URL of the commit in the GitSync provider
        ref:
          type: string
          description: Original name of the ref where the commit originated from
      required:
        - oid
        - message
        - createdByGitBook
    RevisionBase:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "revision"
          enum:
            - revision
        id:
          description: Unique identifier for the revision
          type: string
        parents:
          description: IDs of the parent revisions
          type: array
          items:
            type: string
        pages:
          type: array
          items:
            $ref: "#/components/schemas/RevisionPage"
        files:
          type: array
          items:
            $ref: "#/components/schemas/RevisionFile"
        reusableContents:
          type: array
          items:
            $ref: "#/components/schemas/RevisionReusableContent"
        createdAt:
          description: When the revision was created.
          $ref: "#/components/schemas/Timestamp"
        git:
          description: Metadata about a potential associated git commit.
          $ref: "#/components/schemas/GitSyncCommit"
        urls:
          type: object
          properties:
            app:
              type: string
              format: uri
              description: URL in the application for the revision
            published:
              type: string
              description: URL of the published version of the revision. Only defined when the space visibility is not "private."
              format: uri
            public:
              type: string
              description: URL of the public version of the revision. Only defined when the space visibility is "public".
              format: uri
          required:
            - app
      required:
        - object
        - id
        - parents
        - pages
        - files
        - reusableContents
        - urls
        - createdAt
    RevisionTypeEdits:
      allOf:
        - $ref: "#/components/schemas/RevisionBase"
        - type: object
          properties:
            type:
              type: string
              description: Revision created by editing the content.
              enum:
                - edits
          required:
            - type
    ChangeRequestStatus:
      type: string
      enum:
        - draft
        - open
        - archived
        - merged
    ChangeRequestSubject:
      type: string
      description: Subject of the change request
      minLength: 0
      maxLength: 100
    ChangeRequest:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "change-request"
          enum:
            - change-request
        id:
          type: string
          description: Unique identifier for the change request
        number:
          type: number
          description: Incremental identifier of the change request
        status:
          $ref: "#/components/schemas/ChangeRequestStatus"
        subject:
          $ref: "#/components/schemas/ChangeRequestSubject"
        createdBy:
          $ref: "#/components/schemas/User"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        revision:
          type: string
          description: ID of the active revision in the change request.
        revisionInitial:
          type: string
          description: ID of the initial revision in the space from which the change request was created.
        revisionMergedAncestor:
          type: string
          description: ID of the latest revision when updating from main space content.
        revisionMerged:
          type: string
          description: When merged, ID of the revision resulting from the merge.
        comments:
          type: number
          description: Count of opened comments on the change request.
        outdated:
          type: boolean
          description: If true, the change request is not up-to-date with latest changes in the main content.
        urls:
          type: object
          description: URLs associated with the object
          properties:
            app:
              type: string
              description: URL of the space in the application
              format: uri
            location:
              type: string
              description: URL of the user in the API
              format: uri
          required:
            - app
            - location
      required:
        - object
        - id
        - number
        - status
        - subject
        - createdBy
        - createdAt
        - updatedAt
        - revision
        - revisionInitial
        - comments
        - outdated
        - urls
    RevisionTypeMerge:
      allOf:
        - $ref: "#/components/schemas/RevisionBase"
        - type: object
          properties:
            type:
              type: string
              description: Revision created when merging a change request with primary.
              enum:
                - merge
            mergedFrom:
              $ref: "#/components/schemas/ChangeRequest"
          required:
            - type
            - mergedFrom
    RevisionTypeRollback:
      allOf:
        - $ref: "#/components/schemas/RevisionBase"
        - type: object
          properties:
            type:
              type: string
              description: Revision created as a rollback of a previous revision.
              enum:
                - rollback
          required:
            - type
    RevisionTypeUpdate:
      allOf:
        - $ref: "#/components/schemas/RevisionBase"
        - type: object
          properties:
            type:
              type: string
              description: Revision created when updating a change request with changes from primary.
              enum:
                - update
          required:
            - type
    RevisionTypeComputed:
      allOf:
        - $ref: "#/components/schemas/RevisionBase"
        - type: object
          properties:
            type:
              type: string
              description: Virtual revision, computed from a source revision
              enum:
                - computed
          required:
            - type
    Revision:
      oneOf:
        - $ref: "#/components/schemas/RevisionTypeEdits"
        - $ref: "#/components/schemas/RevisionTypeMerge"
        - $ref: "#/components/schemas/RevisionTypeRollback"
        - $ref: "#/components/schemas/RevisionTypeUpdate"
        - $ref: "#/components/schemas/RevisionTypeComputed"
      discriminator:
        propertyName: type
    ImportContentSource:
      type: string
      enum:
        - website
        - docx
        - markdown
        - html
        - zip
        - confluence
        - github-wiki
        - dropbox-paper
        - notion
        - quip
        - google-docs
        - open-api
    ImportContent:
      type: object
      properties:
        url:
          type: string
          description: URL of the content to import.
        source:
          $ref: "#/components/schemas/ImportContentSource"
      required:
        - url
        - source
    ImportContentResult:
      type: object
      required:
        - revision
        - importedResources
        - totalResources
      properties:
        revision:
          type: string
          description: ID of the newly created revision.
        importedResources:
          type: number
          description: How many resources were imported
        totalResources:
          type: number
          description: How many resources were processed
    OrganizationTitle:
      type: string
      description: Name of the organization
      minLength: 2
      maxLength: 255
    OrganizationEmailDomains:
      type: array
      items:
        type: string
    OrganizationHostname:
      type: string
      description: Default hostname for the organization's public content, e.g. <org-hostname>.gitbook.io
      minLength: 3
      maxLength: 32
    OrganizationType:
      type: string
      enum:
        - business
        - community
    OrganizationUseCase:
      type: string
      enum:
        - internalDocs
        - docsSite
        - audienceControlledSite
        - productDocs
        - teamKnowledgeBase
        - designSystem
        - openSourceDocs
        - notes
        - other
    OrganizationCommunityType:
      type: string
      enum:
        - nonProfit
        - openSource
        - education
    SitePointer:
      type: object
      properties:
        type:
          type: string
          enum:
            - site
        site:
          type: string
          description: Unique identifier for the site
      required:
        - type
        - site
    OrganizationDefaultContent:
      description: The default content for the organization
      oneOf:
        - $ref: "#/components/schemas/SitePointer"
    BillingProduct:
      type: string
      description: Name of the product
      enum:
        - free_2024
        - plus_2024
        - pro_2024
        - enterprise_2024
        - community_2024
        - free
        - plus
        - pro
        - team
        - business
        - legacy
        - startup
        - enterprise
        - community
        - team_oct_2019_free
        - team_dec_2021
        - business_dec_2021
    OrganizationBlockReason:
      type: string
      enum:
        - security
    Organization:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "organization"
          enum:
            - organization
        id:
          type: string
          description: Unique identifier for the organization
        title:
          $ref: "#/components/schemas/OrganizationTitle"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        emailDomains:
          $ref: "#/components/schemas/OrganizationEmailDomains"
        hostname:
          $ref: "#/components/schemas/OrganizationHostname"
        type:
          $ref: "#/components/schemas/OrganizationType"
        useCase:
          $ref: "#/components/schemas/OrganizationUseCase"
        communityType:
          $ref: "#/components/schemas/OrganizationCommunityType"
        defaultRole:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        defaultContent:
          $ref: "#/components/schemas/OrganizationDefaultContent"
        sso:
          description: Whether SSO is enforced organization-wide
          type: boolean
        ai:
          description: If true, the organization is configured to use all our AI features.
          type: boolean
        inviteLinks:
          description: If true, invite links are enabled for this organization.
          type: boolean
        plan:
          $ref: "#/components/schemas/BillingProduct"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the organization in the API
              format: uri
            app:
              type: string
              description: URL of the organization in the application
              format: uri
            logo:
              description: URL of the logo of this organization, if defined.
              $ref: "#/components/schemas/URL"
          required:
            - app
            - location
        trialDecision:
          type: string
          description: The decision taken by the user at the end of the trial
          enum:
            - downgrade
        customHostname:
          description: Custom hostname linked to this organization
          type: string
        blocked:
          type: object
          description: If the organization is blocked, information about the block will appear here
          properties:
            reason:
              $ref: "#/components/schemas/OrganizationBlockReason"
          required:
            - reason
        internal_isUsingSnippets:
          type: boolean
          description: If true, the organization is still using the deprecated snippets feature.
        internal_isOnNewTrial:
          type: boolean
          description: If true, the organization is on the new trial which includes sites and the Pro plan.
        permissions:
          type: object
          description: The set of permissions for the organization
          properties:
            admin:
              type: boolean
              description: Can the user manage the title, members, etc.
            createContent:
              type: boolean
              description: Can the user create new spaces/collections in the organization
          required:
            - admin
            - createContent
      required:
        - object
        - id
        - plan
        - title
        - createdAt
        - inviteLinks
        - type
        - emailDomains
        - urls
        - permissions
    ContentLocationRevisionContext:
      type: object
      required:
        - type
        - revision
      properties:
        type:
          type: string
          enum:
            - revision
        revision:
          $ref: "#/components/schemas/Revision"
    ContentLocationChangeRequestContext:
      type: object
      required:
        - type
        - changeRequest
      properties:
        type:
          type: string
          enum:
            - changeRequest
        changeRequest:
          $ref: "#/components/schemas/ChangeRequest"
    ContentLocationFile:
      type: object
      properties:
        kind:
          type: string
          enum:
            - file
        organization:
          $ref: "#/components/schemas/Organization"
        space:
          $ref: "#/components/schemas/Space"
        versionContext:
          oneOf:
            - $ref: "#/components/schemas/ContentLocationRevisionContext"
            - $ref: "#/components/schemas/ContentLocationChangeRequestContext"
        file:
          $ref: "#/components/schemas/RevisionFile"
      required:
        - kind
        - organization
        - space
        - file
    ContentLocationURL:
      type: object
      properties:
        kind:
          type: string
          enum:
            - url
        url:
          type: string
      required:
        - kind
        - url
    ContentLocationPageAnchor:
      type: object
      properties:
        type:
          type: string
          enum:
            - anchor
        anchor:
          description: The anchor within the page.
          type: string
      required:
        - type
        - anchor
    ContentLocationPageNode:
      type: object
      properties:
        type:
          type: string
          enum:
            - node
        node:
          description: The node id within the page.
          type: string
      required:
        - type
        - node
    ContentLocationPage:
      type: object
      properties:
        kind:
          type: string
          enum:
            - page
        organization:
          $ref: "#/components/schemas/Organization"
        page:
          $ref: "#/components/schemas/RevisionPage"
        space:
          $ref: "#/components/schemas/Space"
        versionContext:
          oneOf:
            - $ref: "#/components/schemas/ContentLocationRevisionContext"
            - $ref: "#/components/schemas/ContentLocationChangeRequestContext"
        internalLocation:
          oneOf:
            - $ref: "#/components/schemas/ContentLocationPageAnchor"
            - $ref: "#/components/schemas/ContentLocationPageNode"
      required:
        - kind
        - organization
        - space
        - page
    ContentLocationUser:
      type: object
      properties:
        kind:
          type: string
          enum:
            - user
        user:
          $ref: "#/components/schemas/User"
      required:
        - kind
        - user
    CollectionTitle:
      type: string
      description: Title of the collection
      maxLength: 50
    CollectionDescription:
      type: string
      description: Description of the collection
      minLength: 0
      maxLength: 100
    Collection:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "collection"
          enum:
            - collection
        id:
          type: string
          description: Unique identifier for the collection
        title:
          $ref: "#/components/schemas/CollectionTitle"
        description:
          $ref: "#/components/schemas/CollectionDescription"
        organization:
          type: string
          description: ID of the organization owning this collection
        parent:
          type: string
          description: ID of the parent collection, if any
        defaultLevel:
          $ref: "#/components/schemas/DefaultLevel"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the collection in the API
              format: uri
            app:
              type: string
              description: URL of the collection in the application
              format: uri
          required:
            - app
            - location
        permissions:
          type: object
          description: The set of permissions for the collection
          properties:
            admin:
              type: boolean
              description: Can the user edit the title/description.
            create:
              type: boolean
              description: Can the user create spaces/collections in this collection.
          required:
            - admin
            - create
      required:
        - object
        - id
        - title
        - organization
        - urls
        - defaultLevel
        - permissions
    ContentLocationCollection:
      type: object
      properties:
        kind:
          type: string
          enum:
            - collection
        organization:
          $ref: "#/components/schemas/Organization"
        collection:
          $ref: "#/components/schemas/Collection"
      required:
        - kind
        - organization
        - collection
    ContentLocationSpace:
      type: object
      properties:
        kind:
          type: string
          enum:
            - space
        organization:
          $ref: "#/components/schemas/Organization"
        space:
          $ref: "#/components/schemas/Space"
      required:
        - kind
        - organization
        - space
    IntegrationTitle:
      type: string
      description: Title of the integration
      minLength: 2
      maxLength: 30
    IntegrationDescription:
      type: string
      description: Description of the integration
      maxLength: 100
    IntegrationSummary:
      type: string
      description: Long form markdown summary of the integration
      maxLength: 2048
    IntegrationTarget:
      type: string
      description: The target on which the integration can operate and needs to be configured for
      enum:
        - all
        - site
        - space
        - organization
    IntegrationVisibility:
      type: string
      enum:
        - public
        - private
        - unlisted
    IntegrationScope:
      type: string
      enum:
        - snippets:read
        - capture:write
        - space:views:read
        - space:content:read
        - space:content:write
        - space:metadata:read
        - space:metadata:write
        - space:script:inject
        - space:script:cookies
        - space:git:sync
        - space:visitor:auth
        - site:metadata:read
        - site:views:read
        - site:script:inject
        - site:script:cookies
        - site:visitor:auth
    IntegrationScopes:
      type: array
      description: Permissions that should be granted to the integration
      items:
        $ref: "#/components/schemas/IntegrationScope"
    IntegrationCategory:
      type: string
      enum:
        - analytics
        - captures
        - collaboration
        - content
        - gitsync
        - marketing
        - visitor-auth
        - other
    IntegrationCategories:
      type: array
      description: Categories for which the integration is listed in the marketplace
      items:
        $ref: "#/components/schemas/IntegrationCategory"
    IntegrationBlocks:
      type: array
      description: Custom blocks defined by this integration.
      items:
        $ref: "#/components/schemas/IntegrationBlock"
    IntegrationConfigurationComponent:
      type: object
      description: ContentKit component for configuration
      properties:
        componentId:
          type: string
          description: ID of the ContentKit component defined in the integration
      required:
        - componentId
    IntegrationContentSource:
      type: object
      description: Definition of a content source provided by the integration.
      properties:
        id:
          type: string
          description: Unique ID in the integration for the source.
        title:
          type: string
          description: Short descriptive title for the source.
          minLength: 2
          maxLength: 40
        description:
          type: string
          description: Long descriptive text for the source.
          minLength: 0
          maxLength: 150
        icon:
          type: string
          description: URL of the icon to represent this source.
        configuration:
          $ref: "#/components/schemas/IntegrationConfigurationComponent"
      required:
        - id
        - title
    IntegrationConfigurationSchema:
      type: object
      description: Schema for a configuration
      properties:
        properties:
          type: object
          additionalProperties:
            allOf:
              - type: object
                properties:
                  title:
                    type: string
                    maxLength: 30
                  description:
                    type: string
                    maxLength: 100
              - oneOf:
                  - type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - string
                      default:
                        type: string
                    required:
                      - type
                  - type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - number
                      default:
                        type: number
                    required:
                      - type
                  - type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - boolean
                      default:
                        type: boolean
                    required:
                      - type
                  - type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - button
                      callback_url:
                        type: string
                      button_text:
                        type: string
                    required:
                      - type
                      - callback_url
                      - button_text
        required:
          type: array
          uniqueItems: true
          items:
            type: string
      required:
        - properties
    IntegrationConfiguration:
      oneOf:
        - $ref: "#/components/schemas/IntegrationConfigurationSchema"
        - $ref: "#/components/schemas/IntegrationConfigurationComponent"
    IntegrationConfigurations:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/IntegrationConfiguration"
        space:
          $ref: "#/components/schemas/IntegrationConfiguration"
        site:
          $ref: "#/components/schemas/IntegrationConfiguration"
    IntegrationExternalLinks:
      type: array
      description: External urls configured by the developer of the integration
      maxItems: 5
      items:
        type: object
        properties:
          url:
            $ref: "#/components/schemas/URL"
          label:
            type: string
        required:
          - url
          - label
    IntegrationContentSecurityPolicy:
      description: |
        Security policy to validate the content of the integrations scripts and Contentkit. Will be sent as
        headers when processing the script fetch event and the blocks fetch events.
      oneOf:
        - type: string
        - type: object
          properties:
            base-uri:
              type: string
            block-all-mixed-content:
              type: string
            child-src:
              type: string
            connect-src:
              type: string
            default-src:
              type: string
            font-src:
              type: string
            form-action:
              type: string
            frame-ancestors:
              type: string
            frame-src:
              type: string
            img-src:
              type: string
            manifest-src:
              type: string
            media-src:
              type: string
            navigate-to:
              type: string
            object-src:
              type: string
            plugin-types:
              type: string
            prefetch-src:
              type: string
            referrer:
              type: string
            report-to:
              type: string
            report-uri:
              type: string
            require-sri-for:
              type: string
            require-trusted-types-for:
              type: string
            sandbox:
              type: string
            script-src:
              type: string
            script-src-attr:
              type: string
            script-src-elem:
              type: string
            style-src:
              type: string
            style-src-attr:
              type: string
            style-src-elem:
              type: string
            trusted-types:
              type: string
            upgrade-insecure-requests:
              type: string
            worker-src:
              type: string
    Integration:
      type: object
      properties:
        object:
          type: string
          enum:
            - integration
        name:
          type: string
          description: Unique named identifier for the integration
        version:
          type: number
          description: Version of the integration
        title:
          $ref: "#/components/schemas/IntegrationTitle"
        description:
          $ref: "#/components/schemas/IntegrationDescription"
        summary:
          $ref: "#/components/schemas/IntegrationSummary"
        previewImages:
          type: array
          description: URLs of images to showcase the integration
          maxItems: 3
          items:
            type: string
        target:
          $ref: "#/components/schemas/IntegrationTarget"
        verified:
          type: boolean
          description: If true, the integration has been verified by the GitBook team
        visibility:
          $ref: "#/components/schemas/IntegrationVisibility"
        scopes:
          $ref: "#/components/schemas/IntegrationScopes"
        categories:
          $ref: "#/components/schemas/IntegrationCategories"
        blocks:
          $ref: "#/components/schemas/IntegrationBlocks"
        contentSources:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationContentSource"
        configurations:
          $ref: "#/components/schemas/IntegrationConfigurations"
        externalLinks:
          $ref: "#/components/schemas/IntegrationExternalLinks"
        owner:
          $ref: "#/components/schemas/Organization"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the integration in the API
              format: uri
            icon:
              type: string
              description: URL of the icon associated to the integration
              format: uri
            app:
              type: string
              description: URL of the integration in the application
              format: uri
            assets:
              type: string
              description: URL of the integration's assets.
              format: uri
            publicEndpoint:
              type: string
              description: Public HTTP endpoint for the integration
              format: uri
          required:
            - location
            - app
            - assets
            - publicEndpoint
        permissions:
          type: object
          description: The set of permissions for the integration
          properties:
            admin:
              type: boolean
          required:
            - admin
        contentSecurityPolicy:
          $ref: "#/components/schemas/IntegrationContentSecurityPolicy"
      required:
        - object
        - name
        - version
        - title
        - scopes
        - categories
        - visibility
        - target
        - verified
        - previewImages
        - externalLinks
        - owner
        - permissions
        - urls
    Snippet:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the snippet
        organization:
          type: string
          description: ID of the organization owning this snippet
        createdAt:
          type: string
          format: date-time
        editedAt:
          type: string
          format: date-time
          description: Timestamp of when the snippet was last edited, if it has been edited since its creation.
        archived:
          type: boolean
          description: Whether the snippet is archived. Archived snippets don't appear in search results or in the app.
        title:
          type: string
          description: Title describing the snippet.
          maxLength: 100
        source:
          description: The source of the snippet.
          type: object
          properties:
            sourceId:
              type: string
              description: An ID identifying the source, unique across all sources.
            name:
              type: string
              description: A display name for the source.
            externalId:
              type: string
              description: An ID identifying the snippet in the source system, if available.
            externalUrl:
              description: URL of the snippet in the source system, if available.
              $ref: "#/components/schemas/URL"
          required:
            - sourceId
            - name
        contributors:
          description: An array of contributors to the snippet, which can be either users or integrations. The first contributor is the one who created the snippet.
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/Integration"
              - $ref: "#/components/schemas/User"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              description: URL of the snippet in the API
              $ref: "#/components/schemas/URL"
            app:
              description: URL of the snippet in the app
              $ref: "#/components/schemas/URL"
          required:
            - location
            - app
      required:
        - id
        - organization
        - source
        - createdAt
        - archived
        - contributors
        - urls
    ContentLocationSnippet:
      type: object
      properties:
        kind:
          type: string
          enum:
            - snippet
        organization:
          $ref: "#/components/schemas/Organization"
        snippet:
          $ref: "#/components/schemas/Snippet"
      required:
        - kind
        - organization
        - snippet
    ContentLocationReusableContent:
      type: object
      properties:
        kind:
          type: string
          enum:
            - reusable-content
        organization:
          $ref: "#/components/schemas/Organization"
        space:
          $ref: "#/components/schemas/Space"
        versionContext:
          oneOf:
            - $ref: "#/components/schemas/ContentLocationRevisionContext"
            - $ref: "#/components/schemas/ContentLocationChangeRequestContext"
        reusableContent:
          $ref: "#/components/schemas/RevisionReusableContent"
      required:
        - kind
        - organization
        - space
        - reusableContent
    ContentLocation:
      description: An absolute reference to content in GitBook.
      oneOf:
        - $ref: "#/components/schemas/ContentLocationFile"
        - $ref: "#/components/schemas/ContentLocationURL"
        - $ref: "#/components/schemas/ContentLocationPage"
        - $ref: "#/components/schemas/ContentLocationUser"
        - $ref: "#/components/schemas/ContentLocationCollection"
        - $ref: "#/components/schemas/ContentLocationSpace"
        - $ref: "#/components/schemas/ContentLocationSnippet"
        - $ref: "#/components/schemas/ContentLocationReusableContent"
      discriminator:
        propertyName: kind
    ContentReferenceStatus:
      type: string
      enum:
        - ok
        - broken
        - in-app
      description: |
        Text to display to represent the reference. Possible values include:
        - `ok` - No problems detected for this content reference.
        - `broken` - The target does not exist in the revision.
        - `in-app` - The target is a URL link pointing to an internal location in the app.
    ContentReferencesStats:
      type: object
      properties:
        total:
          description: Total count of links
          type: number
        broken:
          type: object
          properties:
            total:
              description: Count of broken links
              type: number
            changeRequest:
              description: Count of broken links that were broken in current change request, if applicable.
              type: number
          required:
            - total
      required:
        - total
        - broken
    ContentReferenceRelation:
      type: string
      enum:
        - reference
        - dependsOn
      description: |
        Indicator of the relationship with the content ref target.
        - `reference` - The content soft-references the ref target
        - `dependsOn` - The content depends on the ref target
    ContentReferenceUsage:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ContentReferenceStatus"
        relation:
          $ref: "#/components/schemas/ContentReferenceRelation"
        targetReference:
          description: The reference target where a list of pages are pointing at
          $ref: "#/components/schemas/ContentLocation"
        locationReferences:
          description: Pages locations where a link to the target is found.
          type: array
          items:
            $ref: "#/components/schemas/ContentLocation"
      required:
        - relation
        - status
        - locationReferences
    CreateChangeRequest:
      type: object
      properties:
        subject:
          type: string
          description: Subject of the change-request
    ChangeRequestReviewStatus:
      type: string
      description: Status of a change request review.
      enum:
        - changes-requested
        - approved
    EmojiReaction:
      type: object
      description: An emoji reaction by one or many users
      properties:
        emoji:
          type: string
          description: The Emoji of the reaction
        count:
          type: number
          description: The number of users who reacted with this emoji
        users:
          type: array
          description: The users who reacted with this emoji
          items:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/User"
              reactedAt:
                $ref: "#/components/schemas/Timestamp"
            required:
              - user
              - reactedAt
      required:
        - emoji
        - count
        - users
    EmojiReactions:
      type: array
      items:
        $ref: "#/components/schemas/EmojiReaction"
    Comment:
      allOf:
        - type: object
          properties:
            object:
              type: string
              description: Type of Object, always equals to "comment"
              enum:
                - comment
            id:
              description: Unique identifier for the comment.
              type: string
            postedBy:
              description: The user who posted the comment.
              $ref: "#/components/schemas/User"
            postedAt:
              description: When the comment was posted.
              $ref: "#/components/schemas/Timestamp"
            editedAt:
              description: Date when the comment was edited, if it has been edited.
              $ref: "#/components/schemas/Timestamp"
            reactions:
              description: Any emoji reactions to the comment.
              $ref: "#/components/schemas/EmojiReactions"
            replies:
              description: The number of replies to this comment.
              type: number
            body:
              description: The content of the comment.
              $ref: "#/components/schemas/Document"
            target:
              description: Information about the target of the comment.
              type: object
              properties:
                node:
                  description: The node this comment is attached to.
                  type: object
                  properties:
                    id:
                      type: string
                    preview:
                      type: string
                  required:
                    - id
                changeRequest:
                  description: The change request containing this comment, if the comment was made inside a change request.
                  type: string
                review:
                  description: The review containing this comment, if this comment was made as part of a review.
                  type: string
                page:
                  description: Information about the page, if this comment refers to a specific page.
                  allOf:
                    - $ref: "#/components/schemas/RevisionPageBase"
                    - type: object
                      properties:
                        path:
                          description: The fully qualified path to the page
                          type: string
                        outdated:
                          description: True if the target of this comment no longer exists in the primary content
                          type: boolean
                      required:
                        - path
                        - outdated
                space:
                  description: The space containing this comment.
                  type: string
                revision:
                  description: The revision in which the target can be found in.
                  type: string
              required:
                - space
                - revision
            urls:
              type: object
              description: URLs associated with the object
              properties:
                location:
                  type: string
                  description: URL of the comment in the API
                  format: uri
              required:
                - location
          required:
            - object
            - id
            - replies
            - body
            - postedBy
            - postedAt
            - reactions
            - target
            - urls
        - oneOf:
            - type: object
              title: Resolved
              properties:
                status:
                  description: Status of the comment.
                  type: string
                  enum:
                    - resolved
                resolvedAt:
                  description: If the comment has been resolved, the date at which it was resolved. If this field is not defined, the comment is not resolved.
                  $ref: "#/components/schemas/Timestamp"
                resolvedBy:
                  description: If the comment has been resolved, the user who resolved it. If this field is not defined, the comment is not resolved.
                  $ref: "#/components/schemas/User"
              required:
                - status
                - resolvedAt
                - resolvedBy
            - type: object
              title: Open
              properties:
                status:
                  description: Status of the comment.
                  type: string
                  enum:
                    - open
              required:
                - status
    ChangeRequestReview:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "change-request-review"
          enum:
            - change-request-review
        id:
          type: string
          description: Unique identifier for the review.
        revision:
          type: string
          description: The revision this review was made against.
        reviewer:
          description: The user who performed the review.
          $ref: "#/components/schemas/User"
        requestedBy:
          description: The user who requested the review. If undefined, the review was left without a request.
          $ref: "#/components/schemas/User"
        status:
          description: The status of the review.
          $ref: "#/components/schemas/ChangeRequestReviewStatus"
        comment:
          $ref: "#/components/schemas/Comment"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
      required:
        - object
        - id
        - revision
        - reviewer
        - status
        - createdAt
        - updatedAt
    Team:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "team"
          enum:
            - team
        id:
          type: string
          description: Unique identifier for the team
      required:
        - object
        - id
    ChangeRequestRequestedReviewer:
      type: object
      allOf:
        - type: object
          properties:
            object:
              type: string
              description: Type of Object, always equals to "change-request-requested-reviewer"
              enum:
                - change-request-requested-reviewer
            revision:
              type: string
              description: The revision of the content when the request was made.
            requestedBy:
              description: The user who made the request.
              $ref: "#/components/schemas/User"
            createdAt:
              $ref: "#/components/schemas/Timestamp"
          required:
            - object
            - revision
            - requestedBy
            - createdAt
        - type: object
          oneOf:
            - type: object
              properties:
                kind:
                  type: string
                  enum:
                    - user
                user:
                  description: The user who was requested to review.
                  $ref: "#/components/schemas/User"
              required:
                - kind
                - user
            - type: object
              properties:
                kind:
                  type: string
                  enum:
                    - team
                team:
                  description: The team who was requested to review.
                  $ref: "#/components/schemas/Team"
              required:
                - kind
                - team
    PostCommentSchema:
      type: object
      properties:
        node:
          description: The node to which the comment is posted, if any.
          type: string
        page:
          description: The page to which the comment is posted, if any.
          type: string
        body:
          description: The content of the comment.
          $ref: "#/components/schemas/Document"
      required:
        - body
    UpdateCommentSchema:
      type: object
      properties:
        resolved:
          type: boolean
          description: Whether the comment is resolved or not.
        body:
          description: Content of the comment.
          $ref: "#/components/schemas/Document"
        addedReactions:
          type: array
          description: Reactions to add to the comment.
          items:
            type: string
        removedReactions:
          type: array
          description: Reactions to remove from the comment.
          items:
            type: string
    CommentReply:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "comment-reply"
          enum:
            - comment-reply
        id:
          type: string
          description: Unique identifier for the reply.
        postedBy:
          $ref: "#/components/schemas/User"
        postedAt:
          $ref: "#/components/schemas/Timestamp"
        editedAt:
          description: Date when the reply was edited, if it has been edited.
          $ref: "#/components/schemas/Timestamp"
        reactions:
          $ref: "#/components/schemas/EmojiReactions"
        body:
          $ref: "#/components/schemas/Document"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the comment reply in the API
              format: uri
          required:
            - location
      required:
        - object
        - id
        - body
        - postedBy
        - postedAt
        - reactions
        - urls
    PostCommentReplySchema:
      type: object
      properties:
        body:
          description: The content of the comment.
          $ref: "#/components/schemas/Document"
      required:
        - body
    UserContributor:
      type: object
      description: Contributor towards content.
      properties:
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        count:
          type: integer
        user:
          $ref: "#/components/schemas/User"
      required:
        - updatedAt
        - count
        - user
    ChangeRequestBrainstormStatus:
      type: string
      description: |
        The status of the session.
        - pending: The session is pending for input from the user.
        - running: The session is being processed by GitBook.
        - failed: The session processing has failed.
      enum:
        - pending
        - failed
        - running
    ChangeRequestBrainstormActor:
      type: string
      enum:
        - user
        - agent
    ChangeRequestBrainstormContext:
      type: object
      properties:
        page:
          type: string
          description: Path of the page the user is currently viewing.
      required:
        - page
    RevisionPageType:
      type: string
      enum:
        - document
        - group
        - link
        - computed
    ChangedRevisionPage:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/RevisionPageType"
        title:
          type: string
        path:
          type: string
      required:
        - id
        - type
        - title
    ChangeRequestBrainstormLog:
      oneOf:
        - type: object
          properties:
            tool:
              type: string
              enum:
                - get-page
            intent:
              type: string
            page:
              $ref: "#/components/schemas/ChangedRevisionPage"
          required:
            - tool
            - intent
            - page
        - type: object
          properties:
            tool:
              type: string
              enum:
                - search-keyword
            intent:
              type: string
            query:
              type: string
          required:
            - tool
            - intent
            - query
        - type: object
          properties:
            tool:
              type: string
              enum:
                - search-semantic
            intent:
              type: string
            query:
              type: string
          required:
            - tool
            - intent
            - query
        - type: object
          properties:
            tool:
              type: string
              enum:
                - create-page
            page:
              $ref: "#/components/schemas/ChangedRevisionPage"
          required:
            - tool
            - page
        - type: object
          properties:
            tool:
              type: string
              enum:
                - delete-page
            page:
              $ref: "#/components/schemas/ChangedRevisionPage"
          required:
            - tool
            - page
        - type: object
          properties:
            tool:
              type: string
              enum:
                - edit-page
            page:
              $ref: "#/components/schemas/ChangedRevisionPage"
          required:
            - tool
            - page
    ChangeRequestBrainstormPlanStatus:
      type: string
      description: |
        The status of the plan.
        - pending: The task is pending for input from the user.
        - running: The task is being processed by GitBook.
        - failed: The task processing has failed.
        - completed: The task has been completed.
      enum:
        - pending
        - failed
        - running
        - completed
    ChangeRequestBrainstormPlanStepTitle:
      type: string
      minLength: 1
      maxLength: 100
    ChangeRequestBrainstormPlanStepStatus:
      type: string
      enum:
        - pending
        - succeeded
        - failed
        - running
    ChangeRequestBrainstormPlanStep:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/ChangeRequestBrainstormPlanStepTitle"
        status:
          $ref: "#/components/schemas/ChangeRequestBrainstormPlanStepStatus"
        instruction:
          $ref: "#/components/schemas/JSONDocument"
        implementation:
          description: Logs related to the implementation phase of the step.
          type: object
          properties:
            summary:
              description: A summary of the execution phase.
              $ref: "#/components/schemas/JSONDocument"
            logs:
              description: Logs related to the execution phase of the step.
              items:
                $ref: "#/components/schemas/ChangeRequestBrainstormLog"
          required:
            - logs
      required:
        - title
        - status
        - instruction
    ChangeRequestBrainstormPlan:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ChangeRequestBrainstormPlanStatus"
        title:
          type: string
          description: The title of the plan.
        steps:
          description: The steps of the plan to execute the plan.
          type: array
          items:
            $ref: "#/components/schemas/ChangeRequestBrainstormPlanStep"
        context:
          $ref: "#/components/schemas/ChangeRequestBrainstormContext"
      required:
        - status
        - title
        - steps
    ChangeRequestBrainstormAttachmentPlan:
      type: object
      properties:
        type:
          type: string
          enum:
            - plan
        plan:
          $ref: "#/components/schemas/ChangeRequestBrainstormPlan"
      required:
        - type
        - plan
    ChangeRequestBrainstormAttachmentMessage:
      type: object
      properties:
        type:
          type: string
          enum:
            - message
        suggestions:
          type: array
          items:
            type: string
      required:
        - type
        - suggestions
    ChangeRequestBrainstormAttachment:
      oneOf:
        - $ref: "#/components/schemas/ChangeRequestBrainstormAttachmentPlan"
        - $ref: "#/components/schemas/ChangeRequestBrainstormAttachmentMessage"
    ChangeRequestBrainstormMessage:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the chat message.
        actor:
          $ref: "#/components/schemas/ChangeRequestBrainstormActor"
        message:
          $ref: "#/components/schemas/JSONDocument"
        context:
          $ref: "#/components/schemas/ChangeRequestBrainstormContext"
        logs:
          description: Logs related to the processing of the message.
          items:
            $ref: "#/components/schemas/ChangeRequestBrainstormLog"
        attachment:
          $ref: "#/components/schemas/ChangeRequestBrainstormAttachment"
      required:
        - id
        - actor
        - message
    ChangeRequestBrainstormSession:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the session.
        status:
          $ref: "#/components/schemas/ChangeRequestBrainstormStatus"
        messages:
          description: Conversation messages related to the brainstorming phase of the task.
          type: array
          items:
            $ref: "#/components/schemas/ChangeRequestBrainstormMessage"
      required:
        - id
        - status
        - messages
    RevisionSemanticChangePageCreated:
      type: object
      properties:
        type:
          type: string
          enum:
            - page_created
        page:
          $ref: "#/components/schemas/ChangedRevisionPage"
      required:
        - type
        - page
    ChangeAttributeString:
      type: object
      properties:
        before:
          type: string
        after:
          type: string
    ChangeAttributeRevisionPageDocumentCover:
      type: object
      properties:
        before:
          $ref: "#/components/schemas/RevisionPageDocumentCover"
        after:
          $ref: "#/components/schemas/RevisionPageDocumentCover"
    RevisionPageLayoutPreset:
      type: string
      description: The core layout presets for a page.
      enum:
        - docs
        - editorial
        - landing
    RevisionPageLayout:
      oneOf:
        - $ref: "#/components/schemas/RevisionPageLayoutPreset"
        - $ref: "#/components/schemas/RevisionPageLayoutOptions"
    ChangeAttributeRevisionPageLayout:
      type: object
      properties:
        before:
          $ref: "#/components/schemas/RevisionPageLayout"
        after:
          $ref: "#/components/schemas/RevisionPageLayout"
    CustomFieldValue:
      oneOf:
        - type: string
          maxLength: 256
        - type: number
        - type: boolean
        - type: array
          items:
            type: string
            maxLength: 256
    ChangeAttributeCustomFields:
      type: object
      properties:
        before:
          type: object
          additionalProperties:
            type: object
            properties:
              value:
                $ref: "#/components/schemas/CustomFieldValue"
            required:
              - value
        after:
          type: object
          additionalProperties:
            type: object
            properties:
              value:
                $ref: "#/components/schemas/CustomFieldValue"
            required:
              - value
    RevisionPageDocumentChangeAttributes:
      type: object
      minProperties: 1
      properties:
        title:
          $ref: "#/components/schemas/ChangeAttributeString"
        description:
          $ref: "#/components/schemas/ChangeAttributeString"
        slug:
          $ref: "#/components/schemas/ChangeAttributeString"
        document:
          $ref: "#/components/schemas/ChangeAttributeString"
        cover:
          $ref: "#/components/schemas/ChangeAttributeRevisionPageDocumentCover"
        emoji:
          $ref: "#/components/schemas/ChangeAttributeString"
        layout:
          $ref: "#/components/schemas/ChangeAttributeRevisionPageLayout"
        customFields:
          $ref: "#/components/schemas/ChangeAttributeCustomFields"
    RevisionPageGroupChangeAttributes:
      type: object
      minProperties: 1
      properties:
        title:
          $ref: "#/components/schemas/ChangeAttributeString"
        emoji:
          $ref: "#/components/schemas/ChangeAttributeString"
        slug:
          $ref: "#/components/schemas/ChangeAttributeString"
        customFields:
          $ref: "#/components/schemas/ChangeAttributeCustomFields"
    ChangeAttributeContentReference:
      type: object
      properties:
        before:
          $ref: "#/components/schemas/ContentRef"
        after:
          $ref: "#/components/schemas/ContentRef"
    RevisionPageLinkChangeAttributes:
      type: object
      minProperties: 1
      properties:
        title:
          $ref: "#/components/schemas/ChangeAttributeString"
        emoji:
          $ref: "#/components/schemas/ChangeAttributeString"
        target:
          $ref: "#/components/schemas/ChangeAttributeContentReference"
        customFields:
          $ref: "#/components/schemas/ChangeAttributeCustomFields"
    RevisionSemanticChangePageEdited:
      type: object
      properties:
        type:
          type: string
          enum:
            - page_edited
        page:
          $ref: "#/components/schemas/ChangedRevisionPage"
        attributes:
          oneOf:
            - $ref: "#/components/schemas/RevisionPageDocumentChangeAttributes"
            - $ref: "#/components/schemas/RevisionPageGroupChangeAttributes"
            - $ref: "#/components/schemas/RevisionPageLinkChangeAttributes"
      required:
        - type
        - page
        - attributes
    RevisionSemanticChangePageDeleted:
      type: object
      properties:
        type:
          type: string
          enum:
            - page_deleted
        page:
          $ref: "#/components/schemas/ChangedRevisionPage"
      required:
        - type
        - page
    RevisionSemanticChangePageMoved:
      type: object
      properties:
        type:
          type: string
          enum:
            - page_moved
        page:
          $ref: "#/components/schemas/ChangedRevisionPage"
        parent:
          type: object
          properties:
            before:
              $ref: "#/components/schemas/ChangedRevisionPage"
            after:
              $ref: "#/components/schemas/ChangedRevisionPage"
      required:
        - type
        - page
        - parent
    ChangedRevisionFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        downloadURL:
          type: string
      required:
        - id
        - name
        - contentType
        - downloadURL
    RevisionSemanticChangeFileCreated:
      type: object
      properties:
        type:
          type: string
          enum:
            - file_created
        file:
          $ref: "#/components/schemas/ChangedRevisionFile"
      required:
        - type
        - file
    ChangeAttributeNumber:
      type: object
      properties:
        before:
          type: number
        after:
          type: number
    RevisionFileImageDimensions:
      type: object
      properties:
        height:
          type: number
        width:
          type: number
      required:
        - height
        - width
    ChangeAttributeRevisionFileImageDimensions:
      type: object
      properties:
        before:
          $ref: "#/components/schemas/RevisionFileImageDimensions"
        after:
          $ref: "#/components/schemas/RevisionFileImageDimensions"
    RevisionFileChangeAttributes:
      type: object
      minProperties: 1
      properties:
        name:
          $ref: "#/components/schemas/ChangeAttributeString"
        downloadURL:
          $ref: "#/components/schemas/ChangeAttributeString"
        size:
          $ref: "#/components/schemas/ChangeAttributeNumber"
        contentType:
          $ref: "#/components/schemas/ChangeAttributeString"
        dimensions:
          $ref: "#/components/schemas/ChangeAttributeRevisionFileImageDimensions"
    RevisionSemanticChangeFileEdited:
      type: object
      properties:
        type:
          type: string
          enum:
            - file_edited
        file:
          $ref: "#/components/schemas/ChangedRevisionFile"
        attributes:
          $ref: "#/components/schemas/RevisionFileChangeAttributes"
      required:
        - type
        - file
        - attributes
    RevisionSemanticChangeFileDeleted:
      type: object
      properties:
        type:
          type: string
          enum:
            - file_deleted
        file:
          $ref: "#/components/schemas/ChangedRevisionFile"
      required:
        - type
        - file
    RevisionSemanticChangeCustomFieldsEdited:
      type: object
      properties:
        type:
          type: string
          enum:
            - custom_fields_edited
        customFields:
          $ref: "#/components/schemas/ChangeAttributeCustomFields"
      required:
        - type
        - customFields
    ChangedRevisionReusableContent:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        document:
          type: string
      required:
        - id
        - title
    RevisionSemanticChangeReusableContentCreated:
      type: object
      properties:
        type:
          type: string
          enum:
            - reusable_content_created
        reusableContent:
          $ref: "#/components/schemas/ChangedRevisionReusableContent"
      required:
        - type
        - reusableContent
    RevisionSemanticChangeReusableContentDeleted:
      type: object
      properties:
        type:
          type: string
          enum:
            - reusable_content_deleted
        reusableContent:
          $ref: "#/components/schemas/ChangedRevisionReusableContent"
      required:
        - type
        - reusableContent
    RevisionReusableContentChangeAttributes:
      type: object
      minProperties: 1
      properties:
        title:
          $ref: "#/components/schemas/ChangeAttributeString"
        document:
          $ref: "#/components/schemas/ChangeAttributeString"
    RevisionSemanticChangeReusableContentEdited:
      type: object
      properties:
        type:
          type: string
          enum:
            - reusable_content_edited
        reusableContent:
          $ref: "#/components/schemas/ChangedRevisionReusableContent"
        attributes:
          $ref: "#/components/schemas/RevisionReusableContentChangeAttributes"
      required:
        - type
        - reusableContent
        - attributes
    RevisionSemanticChange:
      oneOf:
        - $ref: "#/components/schemas/RevisionSemanticChangePageCreated"
        - $ref: "#/components/schemas/RevisionSemanticChangePageEdited"
        - $ref: "#/components/schemas/RevisionSemanticChangePageDeleted"
        - $ref: "#/components/schemas/RevisionSemanticChangePageMoved"
        - $ref: "#/components/schemas/RevisionSemanticChangeFileCreated"
        - $ref: "#/components/schemas/RevisionSemanticChangeFileEdited"
        - $ref: "#/components/schemas/RevisionSemanticChangeFileDeleted"
        - $ref: "#/components/schemas/RevisionSemanticChangeCustomFieldsEdited"
        - $ref: "#/components/schemas/RevisionSemanticChangeReusableContentCreated"
        - $ref: "#/components/schemas/RevisionSemanticChangeReusableContentDeleted"
        - $ref: "#/components/schemas/RevisionSemanticChangeReusableContentEdited"
    RevisionSemanticChanges:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/RevisionSemanticChange"
        more:
          type: number
          description: How many changes were omitted because above the result limit
      required:
        - changes
    UpdateCommentReplySchema:
      type: object
      properties:
        body:
          description: Content of the comment.
          $ref: "#/components/schemas/Document"
        addedReactions:
          type: array
          description: Reactions to add to the comment.
          items:
            type: string
        removedReactions:
          type: array
          description: Reactions to remove from the comment.
          items:
            type: string
    UserContentPermission:
      type: object
      description: Permission of a user in a content.
      properties:
        permission:
          $ref: "#/components/schemas/MemberRole"
        user:
          $ref: "#/components/schemas/User"
      required:
        - permission
        - user
    Color:
      type: string
      pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
    CustomizationThemedColor:
      type: object
      properties:
        light:
          $ref: "#/components/schemas/Color"
        dark:
          $ref: "#/components/schemas/Color"
      required:
        - light
        - dark
    CustomizationCorners:
      type: string
      enum:
        - straight
        - rounded
    CustomizationFont:
      type: string
      enum:
        - ABCFavorit
        - Inter
        - Roboto
        - RobotoSlab
        - OpenSans
        - SourceSansPro
        - Lato
        - Ubuntu
        - Raleway
        - Merriweather
        - Overpass
        - NotoSans
        - IBMPlexSerif
        - Poppins
        - FiraSans
    CustomizationBackground:
      type: string
      enum:
        - plain
        - match
      deprecated: true
      description: The background style has been deprecated and will be removed in a future release. Use the `tint` settings instead.
    CustomizationLocale:
      type: string
      description: Language for the UI element
      enum:
        - en
        - fr
        - es
        - zh
        - ja
        - de
        - nl
        - no
        - pt-br
    CustomizationThemedURL:
      type: object
      properties:
        light:
          $ref: "#/components/schemas/URL"
        dark:
          $ref: "#/components/schemas/URL"
      required:
        - light
        - dark
    CustomizationHeaderPreset:
      type: string
      enum:
        - default
        - bold
        - contrast
        - custom
        - none
    CustomizationContentLink:
      type: object
      properties:
        title:
          type: string
        to:
          $ref: "#/components/schemas/ContentRef"
      required:
        - title
        - to
    CustomizationHeaderItem:
      type: object
      properties:
        title:
          type: string
        style:
          type: string
          enum:
            - link
            - button-primary
            - button-secondary
        to:
          oneOf:
            - $ref: "#/components/schemas/ContentRef"
            - type: string
              nullable: true
              enum:
                - null
        links:
          type: array
          items:
            $ref: "#/components/schemas/CustomizationContentLink"
      required:
        - title
        - links
        - to
    CustomizationFooterGroup:
      type: object
      properties:
        title:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/CustomizationContentLink"
      required:
        - title
        - links
    CustomizationThemeMode:
      type: string
      enum:
        - light
        - dark
    CustomizationSettings:
      type: object
      properties:
        inherit:
          type: boolean
          description: Inherit customization settings from the parent collection.
        title:
          type: string
          description: Title to use for the published content. If not defined, it'll fallback to the content title.
        styling:
          type: object
          properties:
            primaryColor:
              $ref: "#/components/schemas/CustomizationThemedColor"
            corners:
              $ref: "#/components/schemas/CustomizationCorners"
            font:
              $ref: "#/components/schemas/CustomizationFont"
            background:
              $ref: "#/components/schemas/CustomizationBackground"
          required:
            - primaryColor
            - corners
            - font
        internationalization:
          type: object
          properties:
            locale:
              $ref: "#/components/schemas/CustomizationLocale"
            inherit:
              type: boolean
              description: Inherit locale from the parent collection.
          required:
            - locale
            - inherit
        favicon:
          oneOf:
            - type: object
              properties:
                icon:
                  $ref: "#/components/schemas/CustomizationThemedURL"
              required:
                - icon
            - type: object
              properties:
                emoji:
                  $ref: "#/components/schemas/Emoji"
              required:
                - emoji
            - type: object
              properties: {}
              additionalProperties: false
        header:
          type: object
          properties:
            preset:
              $ref: "#/components/schemas/CustomizationHeaderPreset"
            logo:
              $ref: "#/components/schemas/CustomizationThemedURL"
            backgroundColor:
              $ref: "#/components/schemas/CustomizationThemedColor"
            linkColor:
              $ref: "#/components/schemas/CustomizationThemedColor"
            links:
              type: array
              items:
                $ref: "#/components/schemas/CustomizationHeaderItem"
          required:
            - preset
            - links
        footer:
          type: object
          properties:
            logo:
              $ref: "#/components/schemas/CustomizationThemedURL"
            groups:
              type: array
              items:
                $ref: "#/components/schemas/CustomizationFooterGroup"
            copyright:
              type: string
              maxLength: 300
          required:
            - groups
        themes:
          type: object
          properties:
            default:
              $ref: "#/components/schemas/CustomizationThemeMode"
            toggeable:
              description: Should the reader be able to switch between dark and light mode
              type: boolean
          required:
            - default
            - toggeable
        pdf:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, PDF export is enabled for the published content.
          required:
            - enabled
        feedback:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, feedback gathering is enabled
          required:
            - enabled
        aiSearch:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, AI search is enabled
          required:
            - enabled
        git:
          type: object
          properties:
            showEditLink:
              type: boolean
              description: Whether the public content should show a link to edit the content on the git provider set up in the GitSync
          required:
            - showEditLink
        pagination:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether the pagination navigation should be displayed on pages.
          required:
            - enabled
        trademark:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether the GitBook trademark ("Powered by GitBook") should be visible
          required:
            - enabled
        privacyPolicy:
          type: object
          properties:
            url:
              $ref: "#/components/schemas/URL"
        socialPreview:
          type: object
          properties:
            url:
              $ref: "#/components/schemas/URL"
      required:
        - inherit
        - styling
        - internationalization
        - favicon
        - header
        - footer
        - themes
        - pdf
        - feedback
        - aiSearch
        - trademark
        - pagination
        - git
        - privacyPolicy
        - socialPreview
    SpaceIntegrationBlocks:
      type: array
      items:
        type: object
        required:
          - name
          - blocks
        properties:
          name:
            type: string
            description: Unique named identifier for the integration
          blocks:
            type: array
            items:
              $ref: "#/components/schemas/IntegrationBlock"
    SpaceIntegrationScript:
      type: object
      properties:
        script:
          description: Script URL to load.
          $ref: "#/components/schemas/URL"
        contentSecurityPolicy:
          description: Content Security Policy to secure the loading of this script.
          type: string
        cookies:
          type: boolean
          description: If true, the script will potentially load use cookies and visitors should be aware.
      required:
        - script
        - cookies
    CustomFieldName:
      type: string
      pattern: ^[a-z_\-0-9]+$
      minLength: 1
      maxLength: 50
    CustomFieldTitle:
      type: string
      maxLength: 100
    CustomFieldDescription:
      type: string
      maxLength: 200
    CustomFieldType:
      type: string
      enum:
        - text
        - number
        - boolean
        - tags
        - select:multi
        - select:single
    CustomFieldPlaceholder:
      type: string
      maxLength: 100
    CustomFieldOptions:
      type: array
      minItems: 1
      maxItems: 50
      items:
        type: string
        minLength: 1
        maxLength: 40
    CustomField:
      type: object
      description: Custom field
      properties:
        id:
          type: string
        name:
          $ref: "#/components/schemas/CustomFieldName"
        title:
          $ref: "#/components/schemas/CustomFieldTitle"
        description:
          $ref: "#/components/schemas/CustomFieldDescription"
        type:
          $ref: "#/components/schemas/CustomFieldType"
        placeholder:
          $ref: "#/components/schemas/CustomFieldPlaceholder"
        options:
          $ref: "#/components/schemas/CustomFieldOptions"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the custom field in the API
              format: uri
          required:
            - location
      required:
        - id
        - name
        - title
        - description
        - placeholder
        - type
        - createdAt
        - updatedAt
        - urls
    CustomFieldValues:
      type: array
      items:
        type: object
        properties:
          customField:
            $ref: "#/components/schemas/CustomField"
          value:
            $ref: "#/components/schemas/CustomFieldValue"
        required:
          - customField
    UpdateCustomFieldValues:
      type: object
      properties:
        values:
          type: object
          additionalProperties:
            type: object
            maxProperties: 100
            minProperties: 1
            properties:
              value:
                $ref: "#/components/schemas/CustomFieldValue"
            required:
              - value
      required:
        - values
    PageFeedbackRating:
      type: string
      enum:
        - bad
        - ok
        - good
    PageFeedback:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equal to "page-feedback"
          enum:
            - page-feedback
        visitorId:
          type: string
        rating:
          $ref: "#/components/schemas/PageFeedbackRating"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        revision:
          type: string
          description: ID of the revision when the rating was created
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the page feedback in the API
              format: uri
          required:
            - location
      required:
        - object
        - visitorId
        - rating
        - createdAt
        - revision
        - urls
    IntegrationSecrets:
      type: object
      description: Secrets stored on the integration and passed at runtime.
      properties: {}
      maxProperties: 20
      additionalProperties:
        type: string
    PublishIntegration:
      type: object
      properties:
        icon:
          type: string
          format: byte
          description: Base64 content of the icon
        title:
          $ref: "#/components/schemas/IntegrationTitle"
        description:
          $ref: "#/components/schemas/IntegrationDescription"
        summary:
          $ref: "#/components/schemas/IntegrationSummary"
        previewImages:
          type: array
          maxItems: 3
          items:
            type: string
            format: byte
            description: Base64 content of the image
        visibility:
          $ref: "#/components/schemas/IntegrationVisibility"
        target:
          description: Allowed installation target for the integration. If not specified, the integration can be installed at `all` targets (org, spaces etc)
          $ref: "#/components/schemas/IntegrationTarget"
        scopes:
          $ref: "#/components/schemas/IntegrationScopes"
        categories:
          $ref: "#/components/schemas/IntegrationCategories"
        blocks:
          $ref: "#/components/schemas/IntegrationBlocks"
        contentSources:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationContentSource"
        externalLinks:
          $ref: "#/components/schemas/IntegrationExternalLinks"
        configurations:
          $ref: "#/components/schemas/IntegrationConfigurations"
        script:
          type: string
          description: Content of the script to use
        organization:
          type: string
          description: The ID or subdomain of the organization under which the integration should be published
        secrets:
          $ref: "#/components/schemas/IntegrationSecrets"
        contentSecurityPolicy:
          $ref: "#/components/schemas/IntegrationContentSecurityPolicy"
      required:
        - organization
        - title
        - description
        - script
        - scopes
    IntegrationInstallationStatus:
      type: string
      enum:
        - active
        - pending
        - paused
    IntegrationInstallationSpaceSelection:
      type: string
      description: Describe whether all spaces have been selected or there's a selection involved
      enum:
        - all
        - selected
    IntegrationInstallationSiteSelection:
      type: string
      description: Describe whether all sites have been selected or there's a selection involved
      enum:
        - all
        - selected
    IntegrationInstallationConfiguration:
      type: object
      description: Configuration of the integration at the account level
      additionalProperties: true
    IntegrationInstallationExternalIds:
      type: array
      description: External IDs assigned by the integration.
      maxItems: 5
      items:
        type: string
    OrganizationTarget:
      type: object
      required:
        - organization
      properties:
        organization:
          type: string
    IntegrationInstallationTarget:
      oneOf:
        - $ref: "#/components/schemas/OrganizationTarget"
    IntegrationInstallation:
      type: object
      description: Installation of an integration on an account
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/IntegrationInstallationStatus"
        space_selection:
          $ref: "#/components/schemas/IntegrationInstallationSpaceSelection"
        site_selection:
          $ref: "#/components/schemas/IntegrationInstallationSiteSelection"
        spaces:
          type: number
          description: Count of spaces, the installation is managing
        configuration:
          $ref: "#/components/schemas/IntegrationInstallationConfiguration"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the installation in the API
              format: uri
            app:
              type: string
              description: URL of the integration's installation in the application
              format: uri
            publicEndpoint:
              type: string
              description: Public HTTP endpoint for the integration's installation
              format: uri
          required:
            - location
            - app
            - publicEndpoint
        externalIds:
          $ref: "#/components/schemas/IntegrationInstallationExternalIds"
        target:
          $ref: "#/components/schemas/IntegrationInstallationTarget"
          description: Target of the integration installation
      required:
        - id
        - status
        - space_selection
        - site_selection
        - spaces
        - configuration
        - urls
        - externalIds
        - target
        - createdAt
        - updatedAt
    BaseEvent:
      description: Common properties for all events.
      type: object
      properties:
        eventId:
          description: Unique identifier for the event.
          type: string
        type:
          description: Type of the event.
          type: string
      required:
        - eventId
        - type
    InstallationEvent:
      allOf:
        - $ref: "#/components/schemas/BaseEvent"
        - type: object
          description: Common properties for all events related to an installation
          properties:
            installationId:
              type: string
              description: ID of the integration installation
          required:
            - installationId
    InstallationSetupEvent:
      allOf:
        - $ref: "#/components/schemas/InstallationEvent"
        - type: object
          description: Event received when integration has been installed or updated.
          properties:
            type:
              type: string
              enum:
                - installation_setup
            status:
              $ref: "#/components/schemas/IntegrationInstallationStatus"
            previous:
              type: object
              description: The state of the installation at the account level before it was updated.
              properties:
                status:
                  $ref: "#/components/schemas/IntegrationInstallationStatus"
                configuration:
                  type: object
                  description: The previous configuration of the installation at the account level.
              required:
                - status
          required:
            - type
            - status
    SpaceEvent:
      allOf:
        - $ref: "#/components/schemas/InstallationEvent"
        - type: object
          description: Common properties for all events related to a specific space.
          properties:
            spaceId:
              type: string
              description: ID of the space
          required:
            - spaceId
    SpaceInstallationSetupEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event received when integration has been installed or updated on a space.
          properties:
            type:
              type: string
              enum:
                - space_installation_setup
            status:
              $ref: "#/components/schemas/IntegrationInstallationStatus"
            previous:
              type: object
              description: The state of the Space installation before it was updated.
              properties:
                status:
                  $ref: "#/components/schemas/IntegrationInstallationStatus"
                configuration:
                  type: object
                  description: The previous configuration of the Space installation.
              required:
                - status
          required:
            - type
            - status
    SpaceInstallationDeletedEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event received when integration has been uninstalled from a space.
          properties:
            type:
              type: string
              enum:
                - space_installation_deleted
            previous:
              type: object
              description: The state of the Space installation before it was deleted.
              properties:
                configuration:
                  type: object
                  description: The previous configuration of the Space installation.
          required:
            - type
            - previous
    SiteEvent:
      allOf:
        - $ref: "#/components/schemas/InstallationEvent"
        - type: object
          description: Common properties for all events related to a specific site.
          properties:
            siteId:
              type: string
              description: ID of the site
          required:
            - siteId
    SiteInstallationSetupEvent:
      allOf:
        - $ref: "#/components/schemas/SiteEvent"
        - type: object
          description: Event received when integration has been installed or updated on a site.
          properties:
            type:
              type: string
              enum:
                - site_installation_setup
            status:
              $ref: "#/components/schemas/IntegrationInstallationStatus"
            previous:
              type: object
              description: The state of the site installation before it was updated.
              properties:
                status:
                  $ref: "#/components/schemas/IntegrationInstallationStatus"
                configuration:
                  type: object
                  description: The previous configuration of the site installation.
              required:
                - status
          required:
            - type
            - status
    SiteInstallationDeletedEvent:
      allOf:
        - $ref: "#/components/schemas/SiteEvent"
        - type: object
          description: Event received when integration has been uninstalled from a site.
          properties:
            type:
              type: string
              enum:
                - site_installation_deleted
            previous:
              type: object
              description: The state of the site installation before it was deleted.
              properties:
                configuration:
                  type: object
                  description: The previous configuration of the site installation.
          required:
            - type
            - previous
    SpaceViewEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event received when a page has been visited.
          properties:
            type:
              type: string
              enum:
                - space_view
            pageId:
              type: string
              description: Unique identifier of the visited page.
            visitor:
              type: object
              description: Analytics info on the GitBook's content visitor.
              properties:
                anonymousId:
                  type: string
                  description: GitBook's unique identifier of the visitor.
                cookies:
                  type: object
                  description: The visitors cookies.
                  additionalProperties:
                    type: string
                userAgent:
                  type: string
                  description: User-agent of the visitor.
                ip:
                  type: string
                  description: IP address of the visitor.
                language:
                  type: string
                  description: Language of the visitor.
              required:
                - anonymousId
                - cookies
                - userAgent
                - ip
            url:
              type: string
              description: The GitBook content's URL visited (including URL params).
            referrer:
              type: string
              description: The URL of referrer that linked to the page.
          required:
            - type
            - visitor
            - url
            - referrer
    SiteViewEvent:
      allOf:
        - $ref: "#/components/schemas/SiteEvent"
        - type: object
          description: Event received when a page has been visited on a site.
          properties:
            type:
              type: string
              enum:
                - site_view
            spaceId:
              type: string
              description: Unique identifier of the visited space in the site.
              deprecated: true
            siteSpaceId:
              description: The site-space that was viewed
              type: string
            pageId:
              type: string
              description: Unique identifier of the visited page.
            visitor:
              type: object
              description: Analytics info on the GitBook's content visitor.
              properties:
                anonymousId:
                  type: string
                  description: GitBook's unique identifier of the visitor.
                cookies:
                  type: object
                  description: The visitors cookies.
                  additionalProperties:
                    type: string
                userAgent:
                  type: string
                  description: User-agent of the visitor.
                ip:
                  type: string
                  description: IP address of the visitor.
                language:
                  type: string
                  description: Language of the visitor.
              required:
                - anonymousId
                - cookies
                - userAgent
                - ip
            url:
              type: string
              description: The GitBook content's URL visited (including URL params).
            referrer:
              type: string
              description: The URL of referrer that linked to the page.
          required:
            - type
            - visitor
            - url
            - referrer
    SpaceContentUpdatedEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event when the primary content of a space has been updated.
          properties:
            type:
              type: string
              enum:
                - space_content_updated
            revisionId:
              type: string
              description: Unique identifier of the new content revision
          required:
            - type
            - revisionId
    SpaceGitSyncCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event when a GitSync operation has been completed.
          properties:
            type:
              type: string
              enum:
                - space_gitsync_completed
            state:
              type: string
              enum:
                - success
                - failure
            revisionId:
              type: string
              description: Unique identifier of the new content revision
            commitId:
              type: string
              description: Unique identifier for the commit (sha)
          required:
            - type
            - state
            - revisionId
            - commitId
    SpaceGitSyncStartedEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event when a GitSync operation has been started.
          properties:
            type:
              type: string
              enum:
                - space_gitsync_started
            revisionId:
              type: string
              description: Unique identifier of the new content revision
            commitId:
              type: string
              description: Unique identifier for the commit (sha)
          required:
            - type
            - revisionId
            - commitId
    SpaceVisibilityUpdatedEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Event when the visibility of the space has been changed.
          properties:
            type:
              type: string
              enum:
                - space_visibility_updated
            previousVisibility:
              $ref: "#/components/schemas/ContentVisibility"
            visibility:
              $ref: "#/components/schemas/ContentVisibility"
          required:
            - type
            - previousVisibility
            - visibility
    FetchRequest:
      type: object
      properties:
        method:
          type: string
          enum:
            - post
            - get
            - put
            - delete
        url:
          type: string
        headers:
          type: object
          additionalProperties:
            type: string
      required:
        - method
        - url
        - headers
    FetchEvent:
      allOf:
        - $ref: "#/components/schemas/BaseEvent"
        - type: object
          description: Event representing an incoming HTTP request.
          properties:
            spaceId:
              type: string
              description: The space ID, if requests are specific to a single space
            siteId:
              type: string
              description: The site ID, if requests are specific to a single site
            installationId:
              type: string
              description: The installation ID, if requests are specific to a single installation
            auth:
              type: object
              properties:
                userId:
                  type: string
                  description: The user's ID.
              required:
                - userId
            type:
              type: string
              enum:
                - fetch
            request:
              $ref: "#/components/schemas/FetchRequest"
          required:
            - type
            - request
    FetchPublishedScriptEvent:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/SpaceEvent"
            - $ref: "#/components/schemas/SiteEvent"
        - type: object
          description: Common properties for all events related to fetching a published script from an installation
          properties:
            type:
              type: string
              enum:
                - fetch_published_script
          required:
            - type
    FetchVisitorAuthenticationEvent:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/SpaceEvent"
            - $ref: "#/components/schemas/SiteEvent"
        - type: object
          description: Common properties for all events related to visitor authentication from an installation
          properties:
            type:
              type: string
              enum:
                - fetch_visitor_authentication
            location:
              type: string
          required:
            - type
    ContentKitContextBase:
      type: object
      description: Common properties for ContentKit context.
      properties:
        theme:
          type: string
          enum:
            - dark
            - light
      required:
        - theme
    ContentKitContextConfigurationAccount:
      allOf:
        - $ref: "#/components/schemas/ContentKitContextBase"
        - type: object
          description: Context while rendering in an account installation's configuration.
          properties:
            type:
              type: string
              enum:
                - configuration_account
            organizationId:
              type: string
              description: ID of the organization the account installation configuration is in.
          required:
            - type
            - organizationId
    ContentKitContextConfigurationSpace:
      allOf:
        - $ref: "#/components/schemas/ContentKitContextBase"
        - type: object
          description: Context while rendering in a space-installation's configuration.
          properties:
            type:
              type: string
              enum:
                - configuration_space
            spaceId:
              type: string
              description: ID of the space the space-installation configuration is in.
          required:
            - type
            - spaceId
    ContentKitContextConfigurationSite:
      allOf:
        - $ref: "#/components/schemas/ContentKitContextBase"
        - type: object
          description: Context while rendering in a site-installation's configuration.
          properties:
            type:
              type: string
              enum:
                - configuration_site
            siteId:
              type: string
              description: ID of the site the site-installation configuration is in.
          required:
            - type
            - siteId
    ContentKitContextConfigurationContentSource:
      allOf:
        - $ref: "#/components/schemas/ContentKitContextBase"
        - type: object
          description: Context while rendering the configuration flow of a content source.
          properties:
            type:
              type: string
              enum:
                - configuration_contentsource
            organizationId:
              type: string
              description: ID of the organization the content source installation configuration is in.
            spaceId:
              type: string
              description: Optional ID of the space the content source installation configuration is in.
          required:
            - type
            - organizationId
    ContentKitContextDocument:
      allOf:
        - $ref: "#/components/schemas/ContentKitContextBase"
        - type: object
          description: Context while rendering in a document.
          properties:
            type:
              type: string
              enum:
                - document
            spaceId:
              type: string
              description: ID of the space content the document is in.
            editable:
              type: boolean
          required:
            - type
            - spaceId
            - editable
    ContentKitContext:
      description: Object representing the context in which a ContentKit component is rendered.
      oneOf:
        - $ref: "#/components/schemas/ContentKitContextConfigurationAccount"
        - $ref: "#/components/schemas/ContentKitContextConfigurationSpace"
        - $ref: "#/components/schemas/ContentKitContextConfigurationSite"
        - $ref: "#/components/schemas/ContentKitContextConfigurationContentSource"
        - $ref: "#/components/schemas/ContentKitContextDocument"
    UIRenderEvent:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/SpaceEvent"
            - $ref: "#/components/schemas/SiteEvent"
            - $ref: "#/components/schemas/InstallationEvent"
        - type: object
          description: Event generated when rendering a UI
          properties:
            auth:
              type: object
              properties:
                userId:
                  type: string
                  description: The user's ID.
              required:
                - userId
            type:
              type: string
              enum:
                - ui_render
            componentId:
              type: string
            props:
              description: Properties to render the UI.
              type: object
            state:
              description: State of the UI.
              type: object
            context:
              $ref: "#/components/schemas/ContentKitContext"
            action:
              type: object
          required:
            - type
            - componentId
            - props
            - context
    ContentComputeEvent:
      allOf:
        - $ref: "#/components/schemas/SpaceEvent"
        - type: object
          description: Generic event when computing the content of a space
          properties:
            sourceId:
              type: string
            props:
              description: Properties passed to the rendering.
              $ref: "#/components/schemas/PlainObject"
          required:
            - sourceId
            - props
    ContentComputeDocumentEvent:
      allOf:
        - $ref: "#/components/schemas/ContentComputeEvent"
        - type: object
          description: |
            Event generated when computing the document of a pages.
            The integration should respond with a `Document`.
          properties:
            type:
              type: string
              enum:
                - content_compute_document
          required:
            - type
    ContentComputeRevisionEvent:
      allOf:
        - $ref: "#/components/schemas/ContentComputeEvent"
        - type: object
          description: |
            Event generated when computing revision in a content.
            The integration should respond with an array of pages and files.
          properties:
            type:
              type: string
              enum:
                - content_compute_revision
          required:
            - type
    Event:
      description: Any event that can be received from GitBook.
      oneOf:
        - $ref: "#/components/schemas/InstallationSetupEvent"
        - $ref: "#/components/schemas/SpaceInstallationSetupEvent"
        - $ref: "#/components/schemas/SpaceInstallationDeletedEvent"
        - $ref: "#/components/schemas/SiteInstallationSetupEvent"
        - $ref: "#/components/schemas/SiteInstallationDeletedEvent"
        - $ref: "#/components/schemas/SpaceViewEvent"
        - $ref: "#/components/schemas/SiteViewEvent"
        - $ref: "#/components/schemas/SpaceContentUpdatedEvent"
        - $ref: "#/components/schemas/SpaceGitSyncCompletedEvent"
        - $ref: "#/components/schemas/SpaceGitSyncStartedEvent"
        - $ref: "#/components/schemas/SpaceVisibilityUpdatedEvent"
        - $ref: "#/components/schemas/FetchEvent"
        - $ref: "#/components/schemas/FetchPublishedScriptEvent"
        - $ref: "#/components/schemas/FetchVisitorAuthenticationEvent"
        - $ref: "#/components/schemas/UIRenderEvent"
        - $ref: "#/components/schemas/ContentComputeDocumentEvent"
        - $ref: "#/components/schemas/ContentComputeRevisionEvent"
      discriminator:
        propertyName: type
    IntegrationEvent:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the event.
        integrationId:
          type: string
          description: Unique ID of the integration.
        installationId:
          type: string
          description: Unique ID of the integration installation.
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        payload:
          $ref: "#/components/schemas/Event"
        status:
          type: string
          description: Status of the event.
          enum:
            - success
            - failed
      required:
        - id
        - integrationId
        - createdAt
        - payload
        - status
    IntegrationEventLog:
      type: object
      properties:
        message:
          description: The message of the log entry.
          type: string
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        level:
          description: The level of the log entry.
          type: string
          enum:
            - debug
            - info
            - warn
            - error
    IntegrationEventTrace:
      type: object
      required:
        - logs
      properties:
        logs:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationEventLog"
    IntegrationContentInstallationBase:
      type: object
      description: Base properties of an installation of an integration on a site or space.
      properties:
        integration:
          description: Unique name identifier of the integration
          type: string
        installation:
          description: ID of the integration installation
          type: string
        status:
          $ref: "#/components/schemas/IntegrationInstallationStatus"
        configuration:
          description: Configuration of the integration for this site
          type: object
        externalIds:
          $ref: "#/components/schemas/IntegrationInstallationExternalIds"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the integration's installation in the API
              format: uri
            publicEndpoint:
              type: string
              description: Public HTTP endpoint for the integration's installation
              format: uri
          required:
            - location
            - publicEndpoint
      required:
        - integration
        - installation
        - status
        - configuration
        - externalIds
        - urls
    IntegrationSpaceInstallation:
      allOf:
        - $ref: "#/components/schemas/IntegrationContentInstallationBase"
        - type: object
          properties:
            space:
              description: The space the integration is installed on. Using the string value is deprecated in favor of space.id
              oneOf:
                - type: string
                - $ref: "#/components/schemas/Space"
          required:
            - space
    ContentKitIcon:
      type: string
      enum:
        - close
        - edit
        - github
        - gitlab
        - maximize
        - email
        - settings
        - search
        - delete
        - star
        - warning
        - link
        - link-external
        - eye
        - lock
    ContentKitConfirm:
      type: object
      description: A confirm object that defines an optional confirmation dialog after the input is clicked.
      properties:
        title:
          type: string
          description: A text value that defines the dialog's title.
          maxLength: 100
        text:
          type: string
          description: A text value that defines the explanatory text that appears in the confirm dialog.
          maxLength: 300
        confirm:
          type: string
          description: A text value to define the text of the button that confirms the action.
          maxLength: 30
        style:
          type: string
          enum:
            - primary
            - danger
      required:
        - title
        - text
        - confirm
    ContentKitButton:
      type: object
      description: Pressable button triggering an action.
      properties:
        type:
          type: string
          enum:
            - button
        style:
          type: string
          enum:
            - primary
            - secondary
            - danger
        onPress:
          $ref: "#/components/schemas/ContentKitAction"
        icon:
          $ref: "#/components/schemas/ContentKitIcon"
        trailingIcon:
          $ref: "#/components/schemas/ContentKitIcon"
        label:
          type: string
        tooltip:
          type: string
        confirm:
          $ref: "#/components/schemas/ContentKitConfirm"
        disabled:
          type: boolean
      required:
        - type
        - onPress
    ContentKitTextInput:
      type: object
      description: Text input to prompt the user.
      properties:
        type:
          type: string
          enum:
            - textinput
        disabled:
          type: boolean
        state:
          description: State binding. The value of the input will be stored as a property in the state named after this ID.
          type: string
        initialValue:
          description: Text value to initialize the input with.
          type: string
        placeholder:
          description: Text that appears in the form control when it has no value set
          type: string
        multiline:
          type: boolean
        inputType:
          type: string
          enum:
            - text
            - password
          default: text
      required:
        - type
        - state
    ContentKitDescendantElement:
      description: Any element that can be used as children.
      oneOf:
        - $ref: "#/components/schemas/ContentKitButton"
        - $ref: "#/components/schemas/ContentKitTextInput"
        - $ref: "#/components/schemas/ContentKitHStack"
        - $ref: "#/components/schemas/ContentKitVStack"
        - $ref: "#/components/schemas/ContentKitBox"
        - $ref: "#/components/schemas/ContentKitDivider"
        - $ref: "#/components/schemas/ContentKitWebFrame"
        - $ref: "#/components/schemas/ContentKitCodeBlock"
        - $ref: "#/components/schemas/ContentKitMarkdown"
        - $ref: "#/components/schemas/ContentKitCard"
        - $ref: "#/components/schemas/ContentKitImage"
        - $ref: "#/components/schemas/ContentKitInput"
        - $ref: "#/components/schemas/ContentKitSelect"
        - $ref: "#/components/schemas/ContentKitSwitch"
        - $ref: "#/components/schemas/ContentKitCheckbox"
        - $ref: "#/components/schemas/ContentKitRadio"
        - $ref: "#/components/schemas/ContentKitText"
        - $ref: "#/components/schemas/ContentKitHint"
        - $ref: "#/components/schemas/ContentKitLink"
        - $ref: "#/components/schemas/ContentKitStepperStep"
      discriminator:
        propertyName: type
    ContentKitHStack:
      type: object
      description: Horizontal stack of boxes.
      properties:
        type:
          type: string
          enum:
            - hstack
        align:
          type: string
          default: start
          enum:
            - start
            - center
            - end
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
      required:
        - type
        - children
    ContentKitVStack:
      type: object
      description: Vertical stack of boxes.
      properties:
        type:
          type: string
          enum:
            - vstack
        align:
          type: string
          default: start
          enum:
            - start
            - center
            - end
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
      required:
        - type
        - children
    ContentKitBox:
      type: object
      properties:
        type:
          type: string
          enum:
            - box
        grow:
          description: specifies how much of the remaining space in the container should be assigned to the element
          type: number
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
      required:
        - type
        - children
    ContentKitDivider:
      type: object
      description: Divider between 2 boxes in a stack.
      properties:
        type:
          type: string
          enum:
            - divider
        size:
          type: string
          enum:
            - small
            - medium
            - large
      required:
        - type
    ContentKitDynamicBinding:
      type: object
      description: Binding between a property and a state value.
      properties:
        $state:
          type: string
          description: Key in the state
      required:
        - $state
    ContentKitWebFrame:
      type: object
      description: Frame for a webpage
      properties:
        type:
          type: string
          enum:
            - webframe
        aspectRatio:
          type: number
          description: Ratio between width and height. Used to size the webframe.
        source:
          type: object
          description: Content to load in the frame.
          properties:
            url:
              type: string
          required:
            - url
        buttons:
          type: array
          description: Controls button shown as an overlay in a corner of the frame.
          items:
            $ref: "#/components/schemas/ContentKitButton"
        data:
          type: object
          description: Data to communicated to the webframe's content. Each state update will cause the webframe to receive a message.
          additionalProperties:
            oneOf:
              - type: string
              - $ref: "#/components/schemas/ContentKitDynamicBinding"
      required:
        - type
        - source
    ContentKitCodeBlock:
      type: object
      description: Code block with syntax highlighting
      properties:
        type:
          type: string
          enum:
            - codeblock
        content:
          oneOf:
            - $ref: "#/components/schemas/ContentKitDynamicBinding"
            - type: string
              description: Code content to display
        syntax:
          description: "Syntax to use for highlighting (ex: javascript, python)"
          type: string
        lineNumbers:
          oneOf:
            - type: boolean
            - type: number
              description: Line number to start at.
        buttons:
          type: array
          description: Controls button shown as an overlay in a corner of the code block.
          items:
            $ref: "#/components/schemas/ContentKitButton"
        state:
          description: State binding when editable. The value of the input will be stored as a property in the state named after this ID.
          type: string
        onContentChange:
          $ref: "#/components/schemas/ContentKitAction"
        header:
          type: array
          description: Header displayed before the code lines
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
        footer:
          type: array
          description: Footer displayed after the code lines
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
      required:
        - type
        - content
    ContentKitMarkdown:
      type: object
      description: Block with rich text formatting of a markdown content.
      properties:
        type:
          type: string
          enum:
            - markdown
        content:
          oneOf:
            - $ref: "#/components/schemas/ContentKitDynamicBinding"
            - type: string
              description: Markdown content to display
      required:
        - type
        - content
    ContentKitText:
      type: object
      description: Low level text element.
      properties:
        type:
          type: string
          enum:
            - text
        style:
          type: string
          enum:
            - bold
            - italic
            - code
            - strikethrough
        children:
          oneOf:
            - type: string
            - type: array
              items:
                oneOf:
                  - type: string
                  - $ref: "#/components/schemas/ContentKitText"
                  - $ref: "#/components/schemas/ContentKitLink"
      required:
        - type
        - children
    ContentKitURL:
      type: object
      description: Specification for an URL in ContentKit.
      properties:
        host:
          type: string
          description: Hostname of the URL along with the port number if required.
          example: api.example.com
        pathname:
          type: string
          description: Path of the URL prefixed with a `/`.
          example: /v1/options
        query:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - $ref: "#/components/schemas/ContentKitDynamicBinding"
      required:
        - host
        - pathname
    ContentKitLink:
      type: object
      properties:
        type:
          type: string
          enum:
            - link
        target:
          type: object
          properties:
            url:
              oneOf:
                - type: string
                - $ref: "#/components/schemas/ContentKitURL"
          required:
            - url
        children:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
      required:
        - type
        - target
        - children
    ContentKitImage:
      type: object
      properties:
        type:
          type: string
          enum:
            - image
        source:
          type: object
          properties:
            url:
              type: string
              format: uri
          required:
            - url
        aspectRatio:
          type: number
      required:
        - type
        - source
        - aspectRatio
    ContentKitInlineElement:
      description: Any element that is inline.
      oneOf:
        - $ref: "#/components/schemas/ContentKitText"
        - $ref: "#/components/schemas/ContentKitImage"
        - $ref: "#/components/schemas/ContentKitLink"
      discriminator:
        propertyName: type
    ContentKitCard:
      type: object
      properties:
        type:
          type: string
          enum:
            - card
        title:
          type: string
        hint:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: "#/components/schemas/ContentKitInlineElement"
        icon:
          oneOf:
            - $ref: "#/components/schemas/ContentKitIcon"
            - $ref: "#/components/schemas/ContentKitImage"
        onPress:
          $ref: "#/components/schemas/ContentKitAction"
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
        buttons:
          type: array
          description: Buttons displayed in the top right corner of the card.
          items:
            $ref: "#/components/schemas/ContentKitButton"
      required:
        - type
    ContentKitSelectOption:
      type: object
      description: An individual option in a select element
      properties:
        id:
          type: string
        label:
          type: string
        icon:
          oneOf:
            - $ref: "#/components/schemas/ContentKitIcon"
            - $ref: "#/components/schemas/ContentKitImage"
      required:
        - id
        - label
    ContentKitSelect:
      type: object
      description: Creates a drop down menu with a list of options for a user to choose.
      properties:
        type:
          type: string
          enum:
            - select
        disabled:
          type: boolean
        state:
          description: State binding. The value of the input will be stored as a property in the state named after this ID.
          type: string
        initialValue:
          description: Value to initialize the select with.
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        onValueChange:
          $ref: "#/components/schemas/ContentKitAction"
        placeholder:
          description: Text that appears in the form control when it has no value set
          type: string
        multiple:
          description: Should the select accept the selection of multiple options. If true, the state will be an array.
          type: boolean
        acceptInput:
          description: Should the filter input be allowed to be selected as an option.
          type: boolean
        options:
          description: Array of options to display in the select.
          oneOf:
            - type: array
              description: Static list of options
              items:
                $ref: "#/components/schemas/ContentKitSelectOption"
            - type: object
              properties:
                url:
                  oneOf:
                    - type: string
                      description: External source of options. The URL should respond with an array of options.
                    - $ref: "#/components/schemas/ContentKitURL"
              required:
                - url
      required:
        - type
        - state
        - options
    ContentKitSwitch:
      type: object
      description: Renders a boolean input.
      properties:
        type:
          type: string
          enum:
            - switch
        disabled:
          type: boolean
        state:
          description: State binding. The value of the input will be stored as a property in the state named after this ID.
          type: string
        initialValue:
          description: Value to initialize the switch with.
          type: boolean
        onValueChange:
          $ref: "#/components/schemas/ContentKitAction"
        confirm:
          $ref: "#/components/schemas/ContentKitConfirm"
      required:
        - type
        - state
    ContentKitRadio:
      type: object
      properties:
        type:
          type: string
          enum:
            - radio
        disabled:
          type: boolean
        state:
          description: State binding. The value of the input will be stored as a property in the state named after this ID.
          type: string
        value:
          description: Value to store in th state when the checkbox is selected.
          oneOf:
            - type: string
            - type: number
        confirm:
          $ref: "#/components/schemas/ContentKitConfirm"
      required:
        - type
        - state
        - value
    ContentKitCheckbox:
      type: object
      properties:
        type:
          type: string
          enum:
            - checkbox
        state:
          description: State binding. The value of the input will be stored as a property in the state named after this ID.
          type: string
        value:
          description: Value to store in a state array when the checkbox is selected.
          oneOf:
            - type: string
            - type: number
        confirm:
          $ref: "#/components/schemas/ContentKitConfirm"
      required:
        - type
        - state
        - value
    ContentKitInput:
      type: object
      description: Field for an input.
      properties:
        type:
          type: string
          enum:
            - input
        label:
          type: string
          description: Text label displayed next to the input.
        hint:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/ContentKitInlineElement"
        element:
          oneOf:
            - $ref: "#/components/schemas/ContentKitTextInput"
            - $ref: "#/components/schemas/ContentKitSelect"
            - $ref: "#/components/schemas/ContentKitSwitch"
            - $ref: "#/components/schemas/ContentKitRadio"
            - $ref: "#/components/schemas/ContentKitCheckbox"
            - $ref: "#/components/schemas/ContentKitButton"
            - $ref: "#/components/schemas/ContentKitCodeBlock"
      required:
        - type
        - label
        - element
    ContentKitHint:
      type: object
      description: Element used to contextualize other elements or info.
      properties:
        type:
          type: string
          enum:
            - hint
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitInlineElement"
      required:
        - type
        - children
    ContentKitStepperStep:
      type: object
      properties:
        type:
          type: string
          enum:
            - step
        id:
          description: unique identifier for the step
          type: string
        title:
          description: title of the step
          type: string
          maxLength: 50
        next:
          description: indicates if the user can progress to the next step based on some internal validation or condition
          type: boolean
          default: false
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
          minItems: 1
      required:
        - type
        - id
        - children
    ContentKitBlockControl:
      type: object
      description: Control menu item displayed for the block.
      properties:
        icon:
          $ref: "#/components/schemas/ContentKitIcon"
        label:
          type: string
        onPress:
          $ref: "#/components/schemas/ContentKitAction"
        confirm:
          $ref: "#/components/schemas/ContentKitConfirm"
      required:
        - label
        - onPress
    ContentKitBlock:
      type: object
      description: Higher level element to represent a custom block.
      properties:
        type:
          type: string
          enum:
            - block
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
        controls:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/ContentKitBlockControl"
              - type: array
                items:
                  $ref: "#/components/schemas/ContentKitBlockControl"
      required:
        - type
        - children
    ContentKitModal:
      type: object
      description: Overlay modal.
      properties:
        type:
          type: string
          enum:
            - modal
        title:
          type: string
        subtitle:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitInlineElement"
        size:
          type: string
          enum:
            - medium
            - xlarge
            - fullscreen
        returnValue:
          description: Data passed back to the parent view when the modal is closed. These data are accessible in the "@ui.modal.close"
          type: object
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitDescendantElement"
        submit:
          $ref: "#/components/schemas/ContentKitButton"
      required:
        - type
        - children
    ContentKitStepper:
      type: object
      properties:
        type:
          type: string
          enum:
            - stepper
        activeStep:
          type: string
          description: id of the currently active step
        onStepChange:
          $ref: "#/components/schemas/ContentKitAction"
        onComplete:
          $ref: "#/components/schemas/ContentKitAction"
        children:
          type: array
          items:
            $ref: "#/components/schemas/ContentKitStepperStep"
          minItems: 1
      required:
        - type
        - activeStep
        - onStepChange
        - onComplete
        - children
    ContentKitConfiguration:
      type: object
      description: Higher level element to define a configuration block. Does not add any UI elements or wrappers. Must be used as a top level element for any configuration component.
      properties:
        type:
          type: string
          enum:
            - configuration
        children:
          oneOf:
            - type: array
              items:
                $ref: "#/components/schemas/ContentKitStepper"
              minItems: 1
              maxItems: 1
            - type: array
              items:
                $ref: "#/components/schemas/ContentKitDescendantElement"
              minItems: 1
      required:
        - type
        - children
    ContentKitRootElement:
      description: Element used as root
      oneOf:
        - $ref: "#/components/schemas/ContentKitBlock"
        - $ref: "#/components/schemas/ContentKitModal"
        - $ref: "#/components/schemas/ContentKitConfiguration"
      discriminator:
        propertyName: type
    ContentKitRenderOutputElement:
      type: object
      description: Output of type element in the lifecycle of the component.
      properties:
        type:
          type: string
          enum:
            - element
        element:
          $ref: "#/components/schemas/ContentKitRootElement"
        state:
          type: object
        props:
          $ref: "#/components/schemas/PlainObject"
      required:
        - element
        - state
        - props
    ContentKitRenderOutputComplete:
      type: object
      description: Output of completed lifecycle of the component.
      properties:
        type:
          type: string
          enum:
            - complete
        returnValue:
          type: object
      required:
        - type
    ContentKitRenderOutput:
      type: object
      description: Output of the integration when rendering a UI.
      oneOf:
        - $ref: "#/components/schemas/ContentKitRenderOutputElement"
        - $ref: "#/components/schemas/ContentKitRenderOutputComplete"
    RenderIntegrationUI:
      type: object
      properties:
        componentId:
          type: string
          description: ID of the component to render in the integration.
        props:
          description: Current properties of the UI.
          $ref: "#/components/schemas/PlainObject"
        state:
          type: object
          description: Current local state of the UI.
        context:
          $ref: "#/components/schemas/ContentKitContext"
        action:
          $ref: "#/components/schemas/ContentKitAction"
      required:
        - componentId
        - props
        - context
    UpdateIntegrationInstallation:
      type: object
      properties:
        externalIds:
          $ref: "#/components/schemas/IntegrationInstallationExternalIds"
        configuration:
          $ref: "#/components/schemas/IntegrationInstallationConfiguration"
        space_selection:
          $ref: "#/components/schemas/IntegrationInstallationSpaceSelection"
        site_selection:
          $ref: "#/components/schemas/IntegrationInstallationSiteSelection"
    APITemporaryToken:
      type: object
      properties:
        token:
          type: string
          description: Temporary access token to authenticate with the API
      required:
        - token
    UpdateIntegrationSpaceInstallation:
      type: object
      properties:
        externalIds:
          $ref: "#/components/schemas/IntegrationInstallationExternalIds"
        configuration:
          $ref: "#/components/schemas/IntegrationInstallationConfiguration"
    SiteType:
      type: string
      description: The type of the site
      enum:
        - basic
        - premium
        - ultimate
        - sponsored
        - legacy-basic
        - legacy-premium
    SiteTitle:
      type: string
      description: Title of the site
      minLength: 2
      maxLength: 128
    SiteHostname:
      type: string
      description: Custom hostname for the site, for e.g. docs.mycompany.com
      pattern: ^([a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?[.]){2,}[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$
      maxLength: 512
    SiteBasename:
      type: string
      description: Basename for the site. For e.g. api
      minLength: 1
      maxLength: 100
    SiteProxy:
      type: string
      description: Proxy URL for the site, for e.g. company.com/docs or www.company.com/developer/docs etc.
      pattern: ^([\w-]+\.)*[\w-]+\.[a-zA-Z]{2,}(\/[\w-]+)+$
      maxLength: 512
    SiteVisibility:
      type: string
      description: |
        The visibility setting of the site determines the audience of the site.
        * `public`: Anyone can access the site, and the site is indexed by search engines.
        * `unlisted`: Anyone can access the site, and the site is not indexed by search engines
        * `share-link`: Anyone with a secret token in the url can access the site.
        * `visitor-auth`: Anyone authenticated through a JWT token can access the site.
      enum:
        - public
        - unlisted
        - share-link
        - visitor-auth
    SiteAdaptiveContent:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether adaptive content should be enabled on the site.
      required:
        - enabled
    SiteAdsTopic:
      type: string
      description: Topic of the content
      enum:
        - webdev
        - crypto
    SiteAds:
      oneOf:
        - type: object
          required:
            - status
            - submittable
          properties:
            status:
              type: string
              enum:
                - pending
            submittable:
              type: boolean
              description: True if the user can submit the site for review.
        - type: object
          required:
            - status
            - topic
            - accountEmail
          properties:
            status:
              type: string
              enum:
                - in-review
            topic:
              $ref: "#/components/schemas/SiteAdsTopic"
        - type: object
          required:
            - status
          properties:
            status:
              type: string
              enum:
                - rejected
            reason:
              type: string
              description: Reason for the rejection
        - type: object
          required:
            - status
            - topic
            - zoneId
          properties:
            status:
              type: string
              enum:
                - live
                - disabled
            topic:
              $ref: "#/components/schemas/SiteAdsTopic"
            zoneId:
              type: string
              description: The ad network zone ID
    Site:
      type: object
      properties:
        object:
          type: string
          enum:
            - site
        id:
          type: string
          description: Unique identifier of the site
        type:
          $ref: "#/components/schemas/SiteType"
        title:
          $ref: "#/components/schemas/SiteTitle"
        hostname:
          $ref: "#/components/schemas/SiteHostname"
        basename:
          $ref: "#/components/schemas/SiteBasename"
        proxy:
          $ref: "#/components/schemas/SiteProxy"
        visibility:
          $ref: "#/components/schemas/SiteVisibility"
        published:
          type: boolean
          description: Whether the site is live or not. If true, the site is accessible to the audience defined by the visibility setting.
        siteSpaces:
          type: number
        createdAt:
          type: string
          format: date-time
        adaptiveContent:
          $ref: "#/components/schemas/SiteAdaptiveContent"
        ads:
          $ref: "#/components/schemas/SiteAds"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the site in the API
              format: uri
            app:
              type: string
              description: URL of the site in the application
              format: uri
            published:
              type: string
              description: URL of the published version of the site. Only defined when site is published.
              format: uri
          required:
            - app
            - location
      required:
        - object
        - id
        - type
        - title
        - visibility
        - published
        - createdAt
        - siteSpaces
        - defaultSpace
        - urls
    IntegrationSiteInstallation:
      allOf:
        - $ref: "#/components/schemas/IntegrationContentInstallationBase"
        - type: object
          properties:
            site:
              description: The site the integration is installed on. Using the string value is deprecated in favor of site.id
              oneOf:
                - type: string
                - $ref: "#/components/schemas/Site"
          required:
            - site
    UpdateIntegrationSiteInstallation:
      type: object
      properties:
        externalIds:
          $ref: "#/components/schemas/IntegrationInstallationExternalIds"
        configuration:
          $ref: "#/components/schemas/IntegrationInstallationConfiguration"
    CreateOrganization:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/OrganizationTitle"
        emailDomains:
          $ref: "#/components/schemas/OrganizationEmailDomains"
        type:
          $ref: "#/components/schemas/OrganizationType"
        useCase:
          $ref: "#/components/schemas/OrganizationUseCase"
      required:
        - title
    SiteSectionTitle:
      type: string
      description: Title of the site section
      minLength: 2
      maxLength: 128
    SiteSectionPath:
      type: string
      description: Path to the section on the site
      minLength: 1
      maxLength: 100
    Condition:
      type: string
      minLength: 1
      maxLength: 1024
    SiteSpacePath:
      type: string
      description: Path to the space on the site
      minLength: 1
      maxLength: 100
    SiteSpace:
      type: object
      properties:
        object:
          type: string
          description: The object type, which is always "site-space"
          enum:
            - site-space
        id:
          type: string
          description: Unique identifier of the site-space
        path:
          $ref: "#/components/schemas/SiteSpacePath"
        section:
          type: string
          description: ID of the section the space belongs to in the site
        space:
          $ref: "#/components/schemas/Space"
        title:
          type: string
        default:
          type: boolean
          description: Whether this is the default space for the site
        condition:
          description: Conditional expression used to evaluate whether the site space should be shown to the site's visitor.
          $ref: "#/components/schemas/Condition"
        hasAdvancedCustomizationFeature:
          type: boolean
          description: Whether the space has advanced customization feature enabled
        urls:
          type: object
          description: URLs associated with the object
          properties:
            published:
              type: string
              description: URL of the published version of the site-space. Only defined when site is published.
              format: uri
          required:
            - location
      required:
        - object
        - id
        - space
        - title
        - path
        - urls
    SiteSection:
      type: object
      properties:
        object:
          type: string
          description: The object type, which is always "site-section"
          enum:
            - site-section
        id:
          type: string
          description: Unique identifier of the site section
        title:
          $ref: "#/components/schemas/SiteSectionTitle"
        default:
          type: boolean
          description: Whether this is the default section for the site
        path:
          $ref: "#/components/schemas/SiteSectionPath"
        condition:
          description: Conditional expression used to evaluate whether the site section should be shown to the site's visitor.
          $ref: "#/components/schemas/Condition"
        siteSpaces:
          type: array
          items:
            $ref: "#/components/schemas/SiteSpace"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            published:
              type: string
              description: URL of the published version of the site section. Only defined when site is published.
              format: uri
          required:
            - location
        icon:
          $ref: "#/components/schemas/Icon"
      required:
        - object
        - id
        - title
        - path
        - siteSpaces
        - urls
    SiteStructure:
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - sections
            structure:
              type: array
              items:
                $ref: "#/components/schemas/SiteSection"
          required:
            - type
            - structure
        - type: object
          properties:
            type:
              type: string
              enum:
                - siteSpaces
            structure:
              type: array
              items:
                $ref: "#/components/schemas/SiteSpace"
          required:
            - type
            - structure
    OrganizationAllSite:
      type: object
      properties:
        site:
          $ref: "#/components/schemas/Site"
        structure:
          $ref: "#/components/schemas/SiteStructure"
      required:
        - site
        - structure
    OrganizationAllCollection:
      type: object
      properties:
        collection:
          $ref: "#/components/schemas/Collection"
        content:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/OrganizationAllCollection"
              - $ref: "#/components/schemas/OrganizationAllSpace"
      required:
        - collection
        - content
    OrganizationAllSpace:
      type: object
      properties:
        space:
          $ref: "#/components/schemas/Space"
      required:
        - space
    OrganizationAllContent:
      type: object
      properties:
        sites:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationAllSite"
        spaces:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/OrganizationAllCollection"
              - $ref: "#/components/schemas/OrganizationAllSpace"
        deletedSpaces:
          description: List of soft-deleted spaces.
          type: array
          items:
            $ref: "#/components/schemas/OrganizationAllSpace"
      required:
        - sites
        - spaces
        - deletedSpaces
    OrganizationMember:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "member"
          enum:
            - member
        id:
          type: string
          description: Unique identifier for the user.
        role:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        user:
          $ref: "#/components/schemas/User"
        disabled:
          type: boolean
          description: Whatever the membership of this user is disabled and prevent them from accessing content.
        joinedAt:
          description: Date at which the user joined the organization.
          $ref: "#/components/schemas/Timestamp"
        lastSeenAt:
          description: Date at which the user was last seen active in the organization.
          $ref: "#/components/schemas/Timestamp"
        sso:
          type: boolean
          description: Whether the user can login with SSO.
        spaces:
          type: number
        teams:
          type: number
      required:
        - object
        - id
        - role
        - user
        - disabled
        - joinedAt
        - sso
        - spaces
        - teams
    MemberContentPermission:
      type: object
      description: Permission of a member in a content.
      properties:
        permission:
          $ref: "#/components/schemas/MemberRole"
        space:
          $ref: "#/components/schemas/Space"
      required:
        - permission
        - space
    OrganizationTeamTitle:
      type: string
      description: Title of the team
      minLength: 1
      maxLength: 64
    OrganizationTeam:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "team"
          enum:
            - team
        id:
          type: string
          description: Unique identifier for the team.
        title:
          $ref: "#/components/schemas/OrganizationTeamTitle"
        members:
          type: integer
          description: Count of members in this team.
        spaces:
          type: number
          description: Count of spaces this team has access to.
        createdAt:
          description: Date at which the team was created.
          $ref: "#/components/schemas/Timestamp"
      required:
        - object
        - id
        - title
        - members
        - spaces
        - createdAt
    TeamMemberRole:
      type: string
      description: |
        "The role of a team member.
        "owner": Can manage team members.
        "member": Is a member of the team.
      enum:
        - owner
        - member
    TeamMember:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/TeamMemberRole"
      required:
        - role
    OrganizationTeamMember:
      type: object
      description: A member of a team in an organization, including its relationship to it
      properties:
        organization:
          $ref: "#/components/schemas/OrganizationMember"
        team:
          $ref: "#/components/schemas/TeamMember"
      required:
        - organization
        - team
    UpdateMembersInOrganizationTeam:
      type: object
      properties:
        add:
          type: array
          items:
            type: string
            description: A user to add. It can either be a user ID or an email.
        memberships:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TeamMember"
        remove:
          type: array
          items:
            type: string
            description: A user to remove. It can either be a user ID or an email.
    InviteUsersToOrganization:
      type: object
      properties:
        emails:
          type: array
          items:
            oneOf:
              - type: string
                description: The email address of the user to invite as a member
              - type: object
                properties:
                  email:
                    type: string
                    description: The email address of the user to invite as a member
                  role:
                    $ref: "#/components/schemas/MemberRoleOrGuest"
                required:
                  - email
                  - role
        role:
          description: Default role to set on newly invited members.
          $ref: "#/components/schemas/MemberRoleOrGuest"
        sso:
          description: If true, invites the user as an SSO user of the organization. Defaults to false.
          type: boolean
      required:
        - emails
    InviteLinkToCollection:
      type: object
      description: An invite link to a specific collection in an organization
      properties:
        object:
          type: string
          description: Type of Object, always equals to "invite"
          enum:
            - invite
        id:
          type: string
          description: Unique identifier for the invite link to the collection
        level:
          $ref: "#/components/schemas/MemberRoleOrGuest"
          description: The level of the member in the target collection
        collection:
          $ref: "#/components/schemas/Collection"
          description: The collection the member has been invited to
      required:
        - object
        - id
        - target
        - level
        - collection
    InviteLinkToSpace:
      type: object
      description: An invite link to a specific space in an organization
      properties:
        object:
          type: string
          description: Type of Object, always equals to "invite"
          enum:
            - invite
        id:
          type: string
          description: Unique identifier for the invite link to the space
        level:
          $ref: "#/components/schemas/MemberRoleOrGuest"
          description: The level of the member in the target space
        space:
          $ref: "#/components/schemas/Space"
          description: The space the member has been invited to
      required:
        - object
        - id
        - target
        - level
        - space
    InviteLinkToOrganization:
      type: object
      description: An invite link to an organization
      properties:
        object:
          type: string
          description: Type of Object, always equals to "invite"
          enum:
            - invite
        id:
          type: string
          description: Unique identifier for the invite link to the organization
        role:
          $ref: "#/components/schemas/MemberRoleOrGuest"
          description: The role of the member in the organization
      required:
        - object
        - id
        - role
    CreateInviteToOrganization:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/MemberRoleOrGuest"
          description: The role of the member in the organization
      required:
        - role
    CreateInviteToSpace:
      type: object
      properties:
        level:
          $ref: "#/components/schemas/MemberRoleOrGuest"
          description: The level of the member in the target space
        space:
          type: string
          description: The ID of space the member has been invited to
      required:
        - level
        - space
    CreateInviteToCollection:
      type: object
      properties:
        level:
          $ref: "#/components/schemas/MemberRoleOrGuest"
          description: The level of the member in the target collection
        collection:
          type: string
          description: The ID of collection the member has been invited to
      required:
        - level
        - collection
    CreateOrganizationInvite:
      oneOf:
        - $ref: "#/components/schemas/CreateInviteToOrganization"
        - $ref: "#/components/schemas/CreateInviteToSpace"
        - $ref: "#/components/schemas/CreateInviteToCollection"
    OrganizationInviteLink:
      type: object
      description: An invite link created in an organization
      oneOf:
        - $ref: "#/components/schemas/InviteLinkToOrganization"
        - $ref: "#/components/schemas/InviteLinkToSpace"
        - $ref: "#/components/schemas/InviteLinkToCollection"
    BillingInterval:
      type: string
      description: Interval for a billing subscription
      enum:
        - monthly
        - yearly
    UpgradeOrganizationBilling:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/BillingProduct"
        interval:
          $ref: "#/components/schemas/BillingInterval"
        exclude:
          type: object
          description: Members to remove or sites to unpublish before upgrading
          minProperties: 1
          properties:
            members:
              description: A list of member identifiers to be removed, `all` to remove all members but the current admin
              oneOf:
                - type: array
                  items:
                    type: string
                - type: string
                  enum:
                    - all
            sites:
              description: A list of site identifiers to be unpublished, 'all' to unpublish all sites
              oneOf:
                - type: array
                  items:
                    type: string
                - type: string
                  enum:
                    - all
        reason:
          type: string
          description: Reason that triggered the billing upgrade
        mode:
          type: string
          description: |
            Mode to use for the upgrade (default value is `commit`): - `auto`: user is redirect to checkout if possible, other a preview of the auto-upgrade is returned. - `commit`: a checkout session is returned or an auto-upgrade is done - `preview`: a preview invoice is always returned
          enum:
            - auto
            - commit
            - preview
      required:
        - product
        - interval
    BillingInvoicePreview:
      type: object
      properties:
        amount:
          description: Amount of the invoice
          type: number
        amountDueToday:
          description: Amount that will be immediately charged.
          type: number
        customerBalance:
          description: Current balance, if any, being stored on the customer. If positive, the customer has credit to apply to their next invoice.
          type: number
        remainingCustomerBalance:
          description: Current balance after potential upgrade.
          type: number
        lines:
          type: array
          description: Details of the change happening on the subscription.
          items:
            type: object
            properties:
              description:
                type: string
              amount:
                type: number
              periodStart:
                $ref: "#/components/schemas/Timestamp"
              periodEnd:
                $ref: "#/components/schemas/Timestamp"
            required:
              - amount
              - description
              - periodStart
              - periodEnd
      required:
        - amount
        - amountDueToday
        - customerBalance
        - remainingCustomerBalance
        - lines
    BillingUpgrade:
      oneOf:
        - type: object
          properties:
            result:
              type: string
              enum:
                - checkout
            sessionId:
              type: string
              description: Stripe payment session ID
          required:
            - result
            - sessionId
        - type: object
          properties:
            result:
              type: string
              enum:
                - preview
            invoice:
              $ref: "#/components/schemas/BillingInvoicePreview"
          required:
            - result
            - invoice
        - type: object
          properties:
            result:
              type: string
              enum:
                - upgraded
          required:
            - result
        - type: object
          properties:
            result:
              type: string
              enum:
                - downgraded
          required:
            - result
        - type: object
          properties:
            result:
              type: string
              enum:
                - interval_changed
          required:
            - result
    BillingPortal:
      type: object
      properties:
        url:
          type: string
          description: URL to the billing portal for an organization
      required:
        - url
    CreateSpace:
      type: object
      properties:
        title:
          type: string
          maxLength: 50
        emoji:
          $ref: "#/components/schemas/Emoji"
        private:
          description: Private spaces are no longer supported by GitBook.
          deprecated: true
          type: boolean
        parent:
          type: string
          description: ID of a parent collection
    SAMLProviderLabel:
      type: string
      minLength: 1
      maxLength: 30
    SAMLProviderEntityID:
      type: string
      maxLength: 1024
    SAMLProviderCertificate:
      type: string
      maxLength: 10000
    OrganizationSAMLProvider:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "saml-provider"
          enum:
            - saml-provider
        id:
          type: string
          description: Unique identifier for the provider.
        label:
          $ref: "#/components/schemas/SAMLProviderLabel"
        ssoURL:
          $ref: "#/components/schemas/URL"
        entityID:
          $ref: "#/components/schemas/SAMLProviderEntityID"
        certificate:
          $ref: "#/components/schemas/SAMLProviderCertificate"
        defaultTeam:
          $ref: "#/components/schemas/OrganizationTeam"
        defaultRole:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        createdAt:
          description: Date at which the provider was created.
          $ref: "#/components/schemas/Timestamp"
        service:
          description: Metadata about the service provider.
          properties:
            acsURL:
              type: string
              description: Assertion Consumer Service (ACS) URL
              format: uri
            startURL:
              type: string
              description: Start URL for the Identity Provider
              format: uri
            entityID:
              $ref: "#/components/schemas/SAMLProviderEntityID"
          required:
            - acsURL
            - startURL
            - entityID
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the SAML Provider in the API
              format: uri
          required:
            - location
      required:
        - object
        - id
        - label
        - ssoURL
        - entityID
        - certificate
        - defaultRole
        - createdAt
        - service
        - urls
    OrganizationSSOProviderLogin:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the provider.
        label:
          $ref: "#/components/schemas/SAMLProviderLabel"
        startURL:
          type: string
          description: The starting login URL for the Identity Provider
          format: uri
      required:
        - id
        - label
        - startURL
    OrganizationUsageSpaces:
      type: object
      description: Spaces usage metrics of an organization
      properties:
        total:
          description: Count of all spaces
          type: number
      required:
        - total
    OrganizationUsageCollections:
      type: object
      description: Collections usage metrics of an organization
      properties:
        total:
          description: Count of all collections
          type: number
      required:
        - total
    OrganizationUsageSites:
      type: object
      description: Sites usage metrics of an organization
      oneOf:
        - properties:
            total:
              description: Count of all sites
              type: number
            legacyBasic:
              description: Count of all legacy basic sites
              type: number
            legacyPremium:
              description: Count of all legacy premium sites
              type: number
          required:
            - total
            - legacyBasic
            - legacyPremium
        - properties:
            total:
              description: Count of all sites
              type: number
            basic:
              description: Count of all basic sites
              type: number
            premium:
              description: Count of all premium sites
              type: number
            ultimate:
              description: Count of all ultimate sites
              type: number
            sponsored:
              description: Count of all sponsored sites
              type: number
          required:
            - total
            - basic
            - premium
            - ultimate
            - sponsored
    OrganizationUsageTeams:
      type: object
      description: Team members usage metrics of an organization
      properties:
        total:
          description: Count of all teams
          type: number
      required:
        - total
    OrganizationUsageMembers:
      type: object
      description: Members usage metrics of an organization
      properties:
        total:
          description: Count of all members
          type: number
        seats:
          description: Count of all paid seats
          type: number
        admin:
          description: Count of all admins
          type: number
        create:
          description: Count of all creators
          type: number
        edit:
          description: Count of all editors
          type: number
        review:
          description: Count of all reviewers
          type: number
        comment:
          description: Count of all commenters
          type: number
        read:
          description: Count of all readers
          type: number
        guest:
          description: Count of all guests
          type: number
      required:
        - total
        - seats
        - admin
        - create
        - edit
        - review
        - comment
        - read
        - guest
    OrganizationUsageTeamMembers:
      type: object
      description: Team members usage metrics of an organization
      properties:
        total:
          description: Count of all organization members in a team
          type: number
        owner:
          description: Count of all team owners
          type: number
        member:
          description: Count of all team members
          type: number
      required:
        - total
        - owner
        - member
    OrganizationUsage:
      type: object
      description: All usage metrics of an organization
      properties:
        spaces:
          $ref: "#/components/schemas/OrganizationUsageSpaces"
        collections:
          $ref: "#/components/schemas/OrganizationUsageCollections"
        sites:
          $ref: "#/components/schemas/OrganizationUsageSites"
        teams:
          $ref: "#/components/schemas/OrganizationUsageTeams"
        members:
          $ref: "#/components/schemas/OrganizationUsageMembers"
        teamMembers:
          $ref: "#/components/schemas/OrganizationUsageTeamMembers"
      required:
        - spaces
        - collections
        - sites
        - teams
        - members
        - teamMembers
    CaptureTitle:
      type: string
      description: Optional title describing the capture
      maxLength: 100
    CaptureContext:
      oneOf:
        - type: string
          enum:
            - thread
            - walkthrough
            - document
    Capture:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the capture
        title:
          $ref: "#/components/schemas/CaptureTitle"
        context:
          $ref: "#/components/schemas/CaptureContext"
        externalId:
          type: string
          description: ID in the original source of the capture.
        externalURL:
          type: string
          format: uri
          description: URL of the source from which the capture originated
        createdAt:
          type: string
          format: date-time
        stoppedAt:
          type: string
          format: date-time
        editedAt:
          type: string
          format: date-time
        events:
          description: Count of events recorded.
          properties:
            terminal.command:
              type: integer
            speech:
              type: integer
            thread.message:
              type: integer
        contributors:
          description: An array of contributors to the capture. The first contributor is the one who triggered the capture (either a user or an integration).
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/Integration"
              - $ref: "#/components/schemas/User"
        output:
          description: Output document for the capture. Is not set when capture is not finished.
          $ref: "#/components/schemas/Document"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the capture in the API
              format: uri
            app:
              type: string
              description: URL of the capture in the app
              format: uri
          required:
            - location
            - app
      required:
        - object
        - id
        - title
        - context
        - events
        - createdAt
        - contributors
        - urls
    BaseCaptureEvent:
      type: object
      properties:
        type:
          type: string
          description: The type of event
        timestamp:
          type: string
          format: date-time
          description: When the event happened
        source:
          type: string
          description: Optionally, provide the source of the event. GitBook may use this to improve the generated content.
          maxLength: 50
        actor:
          type: object
          description: Optionally, provide the actor of the event, in the context of multiple people contributing to the capture.
          properties:
            name:
              type: string
          required:
            - name
      required:
        - type
        - timestamp
    CaptureTerminalCommandEvent:
      allOf:
        - $ref: "#/components/schemas/BaseCaptureEvent"
        - type: object
          properties:
            type:
              type: string
              enum:
                - terminal.command
            command:
              type: string
            stdout:
              type: string
          required:
            - type
            - command
            - stdout
    CaptureSpeechEvent:
      allOf:
        - $ref: "#/components/schemas/BaseCaptureEvent"
        - type: object
          properties:
            type:
              type: string
              enum:
                - speech
          required:
            - type
        - oneOf:
            - type: object
              properties:
                audio:
                  description: WAV audio file, encoded as base64
                  type: string
              required:
                - audio
            - type: object
              properties:
                transcript:
                  description: Transcript of the speech
                  type: string
              required:
                - transcript
    CaptureThreadMessageEvent:
      allOf:
        - $ref: "#/components/schemas/BaseCaptureEvent"
        - type: object
          properties:
            type:
              type: string
              enum:
                - thread.message
            isFirst:
              type: boolean
            text:
              type: string
          required:
            - type
            - text
    CaptureFileAddedEvent:
      allOf:
        - $ref: "#/components/schemas/BaseCaptureEvent"
        - type: object
          properties:
            type:
              type: string
              enum:
                - file.added
            filename:
              type: string
            fileSnapshot:
              type: string
          required:
            - type
            - filename
            - fileSnapshot
    CaptureFileChangedEvent:
      allOf:
        - $ref: "#/components/schemas/BaseCaptureEvent"
        - type: object
          properties:
            type:
              type: string
              enum:
                - file.changed
            filename:
              type: string
            fileDiff:
              type: string
          required:
            - type
            - filename
            - fileDiff
    CaptureFileRemovedEvent:
      allOf:
        - $ref: "#/components/schemas/BaseCaptureEvent"
        - type: object
          properties:
            type:
              type: string
              enum:
                - file.removed
            filename:
              type: string
            fileSnapshot:
              type: string
          required:
            - type
            - filename
            - fileSnapshot
    CaptureEvent:
      oneOf:
        - $ref: "#/components/schemas/CaptureTerminalCommandEvent"
        - $ref: "#/components/schemas/CaptureSpeechEvent"
        - $ref: "#/components/schemas/CaptureThreadMessageEvent"
        - $ref: "#/components/schemas/CaptureFileAddedEvent"
        - $ref: "#/components/schemas/CaptureFileChangedEvent"
        - $ref: "#/components/schemas/CaptureFileRemovedEvent"
    UpdateSnippetSchema:
      type: object
      properties:
        title:
          type: string
          description: A new title for the snippet.
    BillingOperationPreviewResponse:
      description: |
        A response to a request to preview a paid operation or action. A user might preview an operation before executing it to see which billing steps would be required (if any). This schema defines the response of that preview request.
      oneOf:
        - type: object
          properties:
            type:
              description: User can go ahead with the operation without any additional steps. Their subscription will be updated to reflect the new changes.
              type: string
              enum:
                - go-ahead
          required:
            - type
        - type: object
          properties:
            type:
              description: By going ahead with this operation, the user will be starting a trial in GitBook.
              type: string
              enum:
                - trial-available
          required:
            - type
        - type: object
          properties:
            type:
              description: User must checkout to complete the operation.
              type: string
              enum:
                - checkout
            invoice:
              $ref: "#/components/schemas/BillingInvoicePreview"
          required:
            - type
        - type: object
          properties:
            type:
              description: User cannot proceed with the operation due to lack of permissions.
              type: string
              enum:
                - no-permissions
          required:
            - type
        - type: object
          properties:
            type:
              description: User needs to go through the legacy upgrade flow.
              type: string
              enum:
                - legacy-upgrade
            plan:
              description: The plan the user must upgrade to.
              $ref: "#/components/schemas/BillingProduct"
            invoice:
              $ref: "#/components/schemas/BillingInvoicePreview"
          required:
            - type
            - plan
    CustomizationTint:
      type: object
      properties:
        color:
          $ref: "#/components/schemas/CustomizationThemedColor"
      required:
        - color
    CustomizationIconsStyle:
      type: string
      enum:
        - regular
        - solid
        - duotone
        - light
        - thin
    CustomizationSidebarBackgroundStyle:
      type: string
      description: |
        - `default`: No background, content sits directly against sidebar edge.
        - `filled`: Muted background color that extends to sidebar edges.
      enum:
        - default
        - filled
    CustomizationSidebarListStyle:
      type: string
      description: |
        - `default`: Simple list items without special styling, groups are inset with a line.
        - `pill`: Rounded capsule shape around selected/active items.
        - `line`: Continuous line next to all items, with coloured line part for selected/active items.
      enum:
        - default
        - pill
        - line
    SiteCustomizationSettings:
      type: object
      properties:
        title:
          description: Title to use for the published site. If not defined, it'll fallback to the default content title.
          $ref: "#/components/schemas/SiteTitle"
        styling:
          type: object
          properties:
            primaryColor:
              $ref: "#/components/schemas/CustomizationThemedColor"
            tint:
              $ref: "#/components/schemas/CustomizationTint"
            corners:
              $ref: "#/components/schemas/CustomizationCorners"
            font:
              $ref: "#/components/schemas/CustomizationFont"
            background:
              deprecated: true
              $ref: "#/components/schemas/CustomizationBackground"
            icons:
              $ref: "#/components/schemas/CustomizationIconsStyle"
            sidebar:
              type: object
              properties:
                background:
                  $ref: "#/components/schemas/CustomizationSidebarBackgroundStyle"
                list:
                  $ref: "#/components/schemas/CustomizationSidebarListStyle"
              required:
                - background
                - list
          required:
            - primaryColor
            - corners
            - font
            - background
            - icons
            - sidebar
        internationalization:
          type: object
          properties:
            locale:
              $ref: "#/components/schemas/CustomizationLocale"
          required:
            - locale
        favicon:
          oneOf:
            - type: object
              properties:
                icon:
                  $ref: "#/components/schemas/CustomizationThemedURL"
              required:
                - icon
            - type: object
              properties:
                emoji:
                  $ref: "#/components/schemas/Emoji"
              required:
                - emoji
            - type: object
              properties: {}
              additionalProperties: false
        header:
          type: object
          properties:
            preset:
              $ref: "#/components/schemas/CustomizationHeaderPreset"
            logo:
              $ref: "#/components/schemas/CustomizationThemedURL"
            backgroundColor:
              $ref: "#/components/schemas/CustomizationThemedColor"
            linkColor:
              $ref: "#/components/schemas/CustomizationThemedColor"
            links:
              type: array
              items:
                $ref: "#/components/schemas/CustomizationHeaderItem"
          required:
            - preset
            - links
        footer:
          type: object
          properties:
            logo:
              $ref: "#/components/schemas/CustomizationThemedURL"
            groups:
              type: array
              items:
                $ref: "#/components/schemas/CustomizationFooterGroup"
            copyright:
              type: string
              maxLength: 300
          required:
            - groups
        themes:
          type: object
          properties:
            default:
              $ref: "#/components/schemas/CustomizationThemeMode"
            toggeable:
              description: Should the reader be able to switch between dark and light mode
              type: boolean
          required:
            - default
            - toggeable
        pdf:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, PDF export is enabled for the published site.
          required:
            - enabled
        feedback:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, feedback gathering is enabled
          required:
            - enabled
        aiSearch:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, AI search is enabled
          required:
            - enabled
        advancedCustomization:
          type: object
          properties:
            enabled:
              type: boolean
              description: If true, Advanced customization is enabled
          required:
            - enabled
        git:
          type: object
          properties:
            showEditLink:
              type: boolean
              description: Whether the published site should show a link to edit the content on the git provider set up in the Git Sync
          required:
            - showEditLink
        pagination:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether the pagination navigation should be displayed on pages.
          required:
            - enabled
        trademark:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether the GitBook trademark ("Powered by GitBook") should be visible
          required:
            - enabled
        privacyPolicy:
          type: object
          properties:
            url:
              $ref: "#/components/schemas/URL"
        socialPreview:
          type: object
          properties:
            url:
              $ref: "#/components/schemas/URL"
      required:
        - styling
        - internationalization
        - favicon
        - header
        - footer
        - themes
        - pdf
        - feedback
        - aiSearch
        - advancedCustomization
        - trademark
        - pagination
        - git
        - privacyPolicy
        - socialPreview
    SiteIntegrationScript:
      type: object
      properties:
        script:
          description: Script URL to load.
          $ref: "#/components/schemas/URL"
        contentSecurityPolicy:
          description: Content Security Policy to secure the loading of this script.
          type: string
        cookies:
          type: boolean
          description: If true, the script will potentially load use cookies and visitors should be aware.
      required:
        - script
        - cookies
    PublishedContentSite:
      type: object
      properties:
        object:
          type: string
          enum:
            - published-content-site
        site:
          $ref: "#/components/schemas/Site"
        structure:
          $ref: "#/components/schemas/SiteStructure"
        customizations:
          type: object
          properties:
            site:
              $ref: "#/components/schemas/SiteCustomizationSettings"
            siteSpaces:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/SiteCustomizationSettings"
          required:
            - site
            - siteSpaces
        scripts:
          type: array
          items:
            $ref: "#/components/schemas/SiteIntegrationScript"
      required:
        - object
        - site
        - structure
        - customizations
        - scripts
    ShareLinkName:
      type: string
      description: Name of the share link
      minLength: 0
      maxLength: 50
    ShareLink:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "share-link"
          enum:
            - share-link
        id:
          type: string
          description: Unique identifier for the share-link
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        name:
          $ref: "#/components/schemas/ShareLinkName"
        active:
          type: boolean
        urls:
          type: object
          description: URLs associated with the object
          properties:
            published:
              type: string
              description: URL of the published version of the share-link.
              format: uri
      required:
        - object
        - id
        - createdAt
        - urls
    SitePublishingAuth:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/VisitorAuthCustomBackend"
            - $ref: "#/components/schemas/VisitorAuthIntegrationBackend"
        - type: object
          properties:
            object:
              type: string
              description: Type of Object, always equals to "publishing-auth"
              enum:
                - publishing-auth
            privateKey:
              type: string
              description: Private key used to sign JWT tokens.
            fallbackURL:
              type: string
              format: uri
              description: URL to redirect to when the visitor auth secret is invalid.
            integration:
              type: string
              description: |
                Name of the Visitor Authentication integration installed on the site (if any).
                It is also the one being used as VA backend when the published auth settings are configured to use "integration" as backend.
          required:
            - object
            - privateKey
    SitePublishingAuthUpdate:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/VisitorAuthCustomBackend"
            - $ref: "#/components/schemas/VisitorAuthIntegrationBackend"
        - type: object
          properties:
            fallbackURL:
              type: string
              format: uri
              description: A fallback URL that will be used if authentication fails.
    SiteSearchScope:
      oneOf:
        - type: object
          required:
            - mode
          properties:
            mode:
              description: |
                Search across all sections of a site, only including the default content of each section. This scope is wide and shallow. You may optionally specify a list of additional site spaces to search in alongside the default content.
              type: string
              enum:
                - default
            includedSiteSpaces:
              type: array
              items:
                type: string
        - type: object
          required:
            - mode
            - siteSpaceIds
          properties:
            mode:
              description: Only search in the provided site spaces.
              type: string
              enum:
                - specific
            siteSpaceIds:
              type: array
              minLength: 1
              items:
                type: string
        - type: object
          required:
            - mode
          properties:
            mode:
              description: Search in all sections and site spaces. This scope is wide and deep.
              type: string
              enum:
                - all
    SiteSpaceCustomizationSettings:
      allOf:
        - $ref: "#/components/schemas/SiteCustomizationSettings"
        - type: object
          properties:
            hasOverrides:
              type: boolean
              description: Indicates whether the site customization settings have been overridden.
          required:
            - hasOverrides
    SiteSectionPointer:
      type: object
      properties:
        type:
          type: string
          enum:
            - site-section
        siteSection:
          type: string
          description: Unique identifier for the site section
      required:
        - type
        - siteSection
    SiteSectionMovePosition:
      type: object
      description: Position at which to move the site section to.
      properties:
        before:
          $ref: "#/components/schemas/SiteSectionPointer"
        after:
          $ref: "#/components/schemas/SiteSectionPointer"
    SiteSpacePointer:
      type: object
      properties:
        type:
          type: string
          enum:
            - site-space
        siteSpace:
          type: string
          description: Unique identifier for the site space
      required:
        - type
        - siteSpace
    SiteSpaceMovePosition:
      type: object
      description: Position at which to move the site space to.
      properties:
        before:
          $ref: "#/components/schemas/SiteSpacePointer"
        after:
          $ref: "#/components/schemas/SiteSpacePointer"
    OrganizationPointer:
      type: object
      properties:
        type:
          type: string
          enum:
            - organization
        organization:
          type: string
          description: Unique identifier for the organization
      required:
        - type
        - organization
    UserSitePermission:
      type: object
      description: Permission of a user in a site.
      properties:
        permission:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        user:
          $ref: "#/components/schemas/User"
        origin:
          description: The content or organization that enforced this permission level.
          oneOf:
            - $ref: "#/components/schemas/SpacePointer"
            - $ref: "#/components/schemas/OrganizationPointer"
      required:
        - permission
        - user
        - origin
    SiteTrackPageView:
      allOf:
        - type: object
          properties:
            pageId:
              type: string
              description: Unique identifier of the page.
            visitor:
              type: object
              description: Analytics info on the GitBook's content visitor.
              properties:
                anonymousId:
                  type: string
                  description: GitBook's unique identifier of the visitor.
                cookies:
                  type: object
                  description: The visitors cookies.
                  additionalProperties:
                    type: string
                ip:
                  type: string
                  description: |
                    IP address of the visitor.
                    If undefined, it'll default to the IP executing the request.
                userAgent:
                  type: string
                  description: |
                    User-agent of the visitor.
                    https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent
                language:
                  type: string
                  description: |
                    Language of the visitor.
                    https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language
              required:
                - anonymousId
                - cookies
                - userAgent
            url:
              type: string
              description: The GitBook content's URL visited (including URL params).
            referrer:
              type: string
              description: The URL of referrer that linked to the page.
          required:
            - visitor
            - url
            - referrer
        - oneOf:
            - type: object
              properties:
                spaceId:
                  type: string
                  description: Unique identifier of the space.
              required:
                - spaceId
            - type: object
              properties:
                siteSpaceId:
                  description: The site-space that was viewed
                  type: string
              required:
                - siteSpaceId
    SiteInsightsEventSession:
      type: object
      description: Analytics info on the GitBook's site session.
      properties:
        visitorId:
          type: string
          description: GitBook's unique identifier of the visitor.
        sessionId:
          type: string
          description: GitBook's unique identifier of the visitor's session.
        cookies:
          type: object
          description: The visitors cookies.
          additionalProperties:
            type: string
        ip:
          type: string
          description: |
            IP address of the visitor.
            If not defined, it'll default to the IP executing the request.
        userAgent:
          type: string
          description: |
            User-agent of the visitor.
            https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent
        language:
          type: string
          nullable: true
          description: |
            Language of the visitor.
            https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language
        referrer:
          description: Referrer of the session
          oneOf:
            - type: string
              nullable: true
              enum:
                - null
                - ""
            - $ref: "#/components/schemas/URL"
        visitorAuthToken:
          type: string
          nullable: true
          description: |
            Authentication token of the visitor.
            This is used to identify the visitor with adaptive content.
      required:
        - visitorId
        - sessionId
        - cookies
        - userAgent
        - language
        - referrer
    SiteInsightsEventLocation:
      type: object
      description: Location of the event.
      properties:
        url:
          description: URL of the location.
          $ref: "#/components/schemas/URL"
        siteSection:
          type: string
          description: ID of the concerned site section.
          nullable: true
        siteSpace:
          type: string
          description: ID of the concerned site space.
          nullable: true
        siteShareKey:
          type: string
          description: ID of the concerned site share key.
          nullable: true
        space:
          type: string
          description: ID of the concerned space.
          nullable: true
        revision:
          type: string
          description: ID of the concerned revision.
          nullable: true
        page:
          type: string
          description: ID of the concerned page.
          nullable: true
      required:
        - url
        - siteSection
        - siteSpace
        - siteShareKey
        - page
        - space
        - revision
    SiteInsightsEventBase:
      type: object
      properties:
        session:
          $ref: "#/components/schemas/SiteInsightsEventSession"
        location:
          $ref: "#/components/schemas/SiteInsightsEventLocation"
        timestamp:
          description: Optional timestamp of the event. If not provided, the current timestamp will be used.
          $ref: "#/components/schemas/Timestamp"
      required:
        - session
        - location
    SiteInsightsEventPageView:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - page_view
          required:
            - type
    SiteInsightsEventSearchOpen:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - search_open
          required:
            - type
    SiteInsightsEventSearchTypeQuery:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - search_type_query
            query:
              type: string
              description: Query of the search.
          required:
            - type
            - query
    SiteInsightsEventSearchOpenResult:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - search_open_result
            query:
              type: string
              description: Query of the search.
            result:
              type: object
              properties:
                spaceId:
                  type: string
                  description: ID of the concerned space.
                pageId:
                  type: string
                  description: ID of the concerned page.
              required:
                - spaceId
                - pageId
          required:
            - type
            - query
            - result
    SiteInsightsEventPagePostFeedback:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - page_post_feedback
            feedback:
              type: object
              properties:
                rating:
                  $ref: "#/components/schemas/PageFeedbackRating"
              required:
                - rating
          required:
            - type
            - feedback
    SiteInsightsEventAskQuestion:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - ask_question
            query:
              type: string
              description: Question being asked.
          required:
            - type
            - query
    SiteInsightsLinkPosition:
      type: string
      enum:
        - header
        - footer
        - sidebar
        - content
    SiteInsightsEventLinkClick:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - link_click
            link:
              type: object
              properties:
                target:
                  $ref: "#/components/schemas/ContentRef"
                position:
                  $ref: "#/components/schemas/SiteInsightsLinkPosition"
              required:
                - target
                - position
          required:
            - type
            - link
    SiteInsightsEventAPIClientOpen:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - api_client_open
            operation:
              $ref: "#/components/schemas/OpenAPIOperationPointer"
          required:
            - type
            - operation
    SiteInsightsEventAPIClientRequest:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsEventBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - api_client_request
            operation:
              $ref: "#/components/schemas/OpenAPIOperationPointer"
          required:
            - type
            - operation
    SiteInsightsEvent:
      oneOf:
        - $ref: "#/components/schemas/SiteInsightsEventPageView"
        - $ref: "#/components/schemas/SiteInsightsEventSearchOpen"
        - $ref: "#/components/schemas/SiteInsightsEventSearchTypeQuery"
        - $ref: "#/components/schemas/SiteInsightsEventSearchOpenResult"
        - $ref: "#/components/schemas/SiteInsightsEventPagePostFeedback"
        - $ref: "#/components/schemas/SiteInsightsEventAskQuestion"
        - $ref: "#/components/schemas/SiteInsightsEventLinkClick"
        - $ref: "#/components/schemas/SiteInsightsEventAPIClientOpen"
        - $ref: "#/components/schemas/SiteInsightsEventAPIClientRequest"
    SiteInsightsEventType:
      type: string
      enum:
        - page_view
        - search_open
        - search_type_query
        - search_open_result
        - page_post_feedback
        - ask_question
        - link_click
        - api_client_open
        - api_client_request
    SiteInsightsVisitorBrowser:
      type: string
      enum:
        - chrome
        - firefox
        - safari
        - edge
        - ie
        - opera
        - unknown
    SiteInsightsVisitorDevice:
      type: string
      enum:
        - desktop
        - tablet
        - mobile
        - unknown
    SiteInsightsVisitorOS:
      type: string
      enum:
        - windows
        - macos
        - linux
        - android
        - ios
        - unknown
    SiteInsightsVisitorBot:
      type: string
      nullable: true
      enum:
        - unknown
        - googlebot
        - bingbot
        - duckduckbot
        - facebookbot
        - applebot
        - chatgpt
        - anthropic
    SiteInsightsQueryEventsValues:
      oneOf:
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - datetime
            values:
              type: array
              items:
                $ref: "#/components/schemas/Timestamp"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventsCount
            values:
              type: array
              items:
                type: number
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - sessionsCount
            values:
              type: array
              items:
                type: number
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorsCount
            values:
              type: array
              items:
                type: number
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventType
            values:
              type: array
              items:
                $ref: "#/components/schemas/SiteInsightsEventType"
        - type: object
          required:
            - column
            - claim
            - values
          properties:
            column:
              type: string
              enum:
                - visitorClaim
            claim:
              type: string
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorClaimProperty
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorBrowser
            values:
              type: array
              items:
                $ref: "#/components/schemas/SiteInsightsVisitorBrowser"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorDevice
            values:
              type: array
              items:
                $ref: "#/components/schemas/SiteInsightsVisitorDevice"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorOS
            values:
              type: array
              items:
                $ref: "#/components/schemas/SiteInsightsVisitorOS"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorBot
            values:
              type: array
              items:
                $ref: "#/components/schemas/SiteInsightsVisitorBot"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventLinkTargetValue
            values:
              type: array
              items:
                $ref: "#/components/schemas/ContentRef"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventLinkTargetKind
            values:
              type: array
              items:
                type: string
                enum:
                  - url
                  - page
                  - file
                  - anchor
                  - space
                  - collection
                  - user
                  - reusable-content
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventLinkPosition
            values:
              type: array
              items:
                $ref: "#/components/schemas/SiteInsightsLinkPosition"
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - siteSection
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - siteSpace
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - siteShareKey
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - page
            values:
              type: array
              items:
                type: object
                required:
                  - page
                  - space
                properties:
                  page:
                    type: string
                    nullable: true
                  space:
                    type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorGeoCountry
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - visitorLanguage
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventLinkTargetDomain
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventAPIOperationPath
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventAPIOperationMethod
            values:
              type: array
              items:
                type: string
                nullable: true
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - eventSearchQuery
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - pageFeedbackRating
            values:
              type: array
              items:
                type: object
                required:
                  - ok
                  - good
                  - bad
                properties:
                  ok:
                    type: number
                  good:
                    type: number
                  bad:
                    type: number
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - referrer
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - referrerDomain
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - utmSource
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - utmMedium
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - utmCampaign
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - utmTerm
            values:
              type: array
              items:
                type: string
        - type: object
          required:
            - column
            - values
          properties:
            column:
              type: string
              enum:
                - utmContent
            values:
              type: array
              items:
                type: string
    SiteInsightsQueryOperator:
      type: string
      enum:
        - in
        - notIn
        - greaterThan
        - greaterThanOrEqual
        - lessThan
        - lessThanOrEqual
    SiteInsightsQueryEventsFilter:
      allOf:
        - $ref: "#/components/schemas/SiteInsightsQueryEventsValues"
        - type: object
          properties:
            operator:
              $ref: "#/components/schemas/SiteInsightsQueryOperator"
    SiteInsightsQueryDateTimeColumn:
      type: object
      required:
        - column
      properties:
        column:
          type: string
          enum:
            - datetime
        interval:
          type: string
          enum:
            - hour
            - day
            - week
            - month
    SiteInsightsQueryEventsColumn:
      oneOf:
        - $ref: "#/components/schemas/SiteInsightsQueryDateTimeColumn"
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventType
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventsCount
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - sessionsCount
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorsCount
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - siteSection
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - siteSpace
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - siteShareKey
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - page
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorGeoCountry
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorDevice
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorBrowser
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorOS
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorBot
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorLanguage
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventLinkTargetValue
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventLinkTargetKind
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventLinkTargetDomain
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventLinkPosition
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventAPIOperationPath
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventAPIOperationMethod
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - eventSearchQuery
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - pageFeedbackRating
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - referrer
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - referrerDomain
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - utmSource
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - utmMedium
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - utmCampaign
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - utmTerm
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - utmContent
        - type: object
          required:
            - column
          properties:
            column:
              type: string
              enum:
                - visitorClaimProperty
        - type: object
          required:
            - column
            - claim
          properties:
            column:
              type: string
              enum:
                - visitorClaim
            claim:
              type: string
    SiteInsightsQueryRange:
      type: string
      enum:
        - lastYear
        - last3Months
        - last30Days
        - last7Days
        - last24Hours
    SiteInsightsQueryEventsAggregation:
      type: object
      required:
        - groupBy
        - range
      properties:
        where:
          type: array
          items:
            $ref: "#/components/schemas/SiteInsightsQueryEventsFilter"
        groupBy:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/SiteInsightsQueryEventsColumn"
        order:
          type: object
          required:
            - by
            - direction
          properties:
            by:
              $ref: "#/components/schemas/SiteInsightsQueryEventsColumn"
            direction:
              type: string
              enum:
                - asc
                - desc
        range:
          $ref: "#/components/schemas/SiteInsightsQueryRange"
    SiteInsightsQueryEventsAggregationResult:
      type: object
      required:
        - columns
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/SiteInsightsQueryEventsValues"
    InsightsInterval:
      type: string
      description: The interval for grouping the results
      enum:
        - day
        - week
        - month
        - year
      default: week
    SiteAdsStats:
      type: object
      required:
        - impressions
        - clicks
        - revenue
      properties:
        impressions:
          type: number
        clicks:
          type: number
        revenue:
          type: string
    SearchInsightsIntervals:
      type: object
      properties:
        values:
          type: array
          items:
            type: object
            required:
              - date
              - total
              - queries
            properties:
              date:
                description: The start date of this interval
                type: string
                format: date-time
              total:
                description: The total number of searches during the interval.
                type: number
              queries:
                description: Top queries searched for this content.
                type: array
                items:
                  $ref: "#/components/schemas/AnalyticsSearchQuery"
    InsightsContentPage:
      type: object
      description: Page entry in the content insights.
      required:
        - id
        - title
      properties:
        id:
          description: Unique identifier for the page in the revision
          type: string
        title:
          description: Title of the page
          type: string
        path:
          description: Complete path to access the page in the revision.
          type: string
        emoji:
          description: Emoji of the page, if one has been set.
          $ref: "#/components/schemas/Emoji"
        icon:
          description: Icon of the page, if one has been set.
          $ref: "#/components/schemas/Icon"
    AnalyticsAsk:
      type: object
      description: Analytics entry for an ask.
      required:
        - ask
        - count
      properties:
        ask:
          description: The question that was asked.
          type: string
        count:
          description: Number of times this question was asked.
          type: number
    SiteRedirectSourcePath:
      type: string
      description: The source path to redirect from.
      maxLength: 512
      pattern: ^/[a-zA-Z0-9-_.\/]+[a-zA-Z0-9-_.]$
    SiteRedirectDestinationSiteSection:
      type: object
      properties:
        kind:
          type: string
          enum:
            - site-section
        siteSectionId:
          type: string
          description: Unique identifier for the site section to redirect to
      required:
        - kind
        - siteSectionId
    SiteRedirectDestinationSiteSpace:
      type: object
      properties:
        kind:
          type: string
          enum:
            - site-space
        siteSpaceId:
          type: string
          description: Unique identifier for the site space to redirect to
      required:
        - kind
        - siteSpaceId
    SiteRedirectDestinationPage:
      type: object
      properties:
        kind:
          type: string
          enum:
            - site-page
        siteSpaceId:
          type: string
          description: Unique identifier for the site space of the page
        pageId:
          type: string
          description: Unique identifier for the page within the site space to redirect to
      required:
        - kind
        - siteSpaceId
        - pageId
    SiteRedirectDestination:
      oneOf:
        - $ref: "#/components/schemas/SiteRedirectDestinationSiteSection"
        - $ref: "#/components/schemas/SiteRedirectDestinationSiteSpace"
        - $ref: "#/components/schemas/SiteRedirectDestinationPage"
    SiteRedirect:
      type: object
      properties:
        object:
          type: string
          enum:
            - site-redirect
        id:
          type: string
          description: The unique identifier for the redirect.
        source:
          $ref: "#/components/schemas/SiteRedirectSourcePath"
        destination:
          $ref: "#/components/schemas/SiteRedirectDestination"
      required:
        - object
        - id
        - source
        - destination
    CustomHostnameDnsStatus:
      type: string
      enum:
        - dns_passed
        - dns_wrong_cname
        - dns_no_cname
        - dns_cloudflare_proxied
        - dns_wrong_caa
    CustomHostnameSslStatus:
      type: string
      enum:
        - live
        - ssl_unknown
        - ssl_pending
        - ssl_failed
        - ssl_retry_expired
    CustomHostnameErrorStatus:
      type: string
      enum:
        - invalid_domain
        - internal_error
    CustomHostnameStatus:
      type: string
      oneOf:
        - $ref: "#/components/schemas/CustomHostnameDnsStatus"
        - $ref: "#/components/schemas/CustomHostnameSslStatus"
        - $ref: "#/components/schemas/CustomHostnameErrorStatus"
    CustomHostname:
      type: object
      properties:
        object:
          type: string
          enum:
            - custom-hostname
        hostname:
          $ref: "#/components/schemas/SiteHostname"
        target:
          oneOf:
            - $ref: "#/components/schemas/OrganizationPointer"
            - $ref: "#/components/schemas/SitePointer"
        isActive:
          type: boolean
        status:
          $ref: "#/components/schemas/CustomHostnameStatus"
        urls:
          type: object
          description: URLs associated with the object
          properties:
            location:
              type: string
              description: URL of the custom hostname in the API
              format: uri
          required:
            - location
      required:
        - object
        - hostname
        - target
        - isActive
        - urls
    UnsplashImage:
      type: object
      required:
        - kind
        - id
        - description
        - downloadLocation
        - urls
        - author
      properties:
        kind:
          type: string
          enum:
            - unsplash_image
        id:
          type: string
        description:
          type: string
        downloadLocation:
          type: string
        urls:
          type: object
          properties:
            full:
              type: string
            small:
              type: string
          required:
            - full
            - small
        author:
          type: object
          properties:
            name:
              type: string
            url:
              type: string
          required:
            - name
            - url
    HiveAccessToken:
      type: object
      description: JWT tokens to authenticate in Hive for all content.
      properties:
        contents:
          type: object
          additionalProperties:
            description: The Hive JWT access token.
            type: string
      required:
        - contents
    PurgeCDNCacheContextType:
      type: string
      description: The type of purge, e.g by tags or hosts
      enum:
        - tags
        - hosts
    PurgeCDNCacheContext:
      type: object
      description: The context to send when purging the CDN Cache
      properties:
        type:
          $ref: "#/components/schemas/PurgeCDNCacheContextType"
        values:
          type: array
          description: The list of tags or hosts to purge
          items:
            type: string
      required:
        - type
        - values
    CloudflareHostnameStatus:
      type: string
      description: The Cloudflare Hostname status
      enum:
        - pending
        - active
        - blocked
        - moved
        - deleted
    CloudflareHostnameTLSStatus:
      type: string
      description: The Cloudflare Hostname TLS status
      enum:
        - initializing
        - pending_validation
        - pending_issuance
        - pending_deployment
        - active
        - pending_deletion
        - pending_cleanup
        - deleted
    CloudflareHostnameTLSValidationMethod:
      type: string
      description: The Cloudflare Hostname TLS validation method
      enum:
        - http
        - txt
        - email
    CloudflareHostnameTLSCertificate:
      type: object
      description: The Cloudflare Hostname TLS certificate
      properties:
        issuer:
          type: string
        expiresOn:
          type: string
        issuedOn:
          type: string
    CloudflareHostnameTLSValidationError:
      type: object
      description: The Cloudflare Hostname TLS validation error
      properties:
        message:
          type: string
      required:
        - message
    CloudflareHostnameTLSInfo:
      type: object
      description: The Cloudflare Hostname TLS information
      properties:
        status:
          $ref: "#/components/schemas/CloudflareHostnameTLSStatus"
        method:
          $ref: "#/components/schemas/CloudflareHostnameTLSValidationMethod"
        certificateAuthority:
          type: string
        certificates:
          type: array
          items:
            $ref: "#/components/schemas/CloudflareHostnameTLSCertificate"
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/CloudflareHostnameTLSValidationError"
      required:
        - status
        - method
        - certificates
        - validationErrors
    CustomDomainInfo:
      type: object
      description: Cloudflare Custom Domain's information
      properties:
        hostname:
          type: string
        status:
          $ref: "#/components/schemas/CloudflareHostnameStatus"
        createdAt:
          type: string
        ssl:
          $ref: "#/components/schemas/CloudflareHostnameTLSInfo"
        verificationErrors:
          type: array
          items:
            type: string
      required:
        - hostname
        - status
        - createdAt
        - verificationErrors
    StaffUserInfo:
      type: object
      description: The GitBook Staff User info.
      properties:
        id:
          type: string
        searchKey:
          type: string
      required:
        - id
        - searchKey
    FirebaseUserInfo:
      type: object
      description: The User Firebase Auth Info.
      properties:
        uid:
          type: string
        displayName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        photoUrl:
          type: string
        providerId:
          type: string
      required:
        - uid
    UserBackOfficeInfo:
      type: object
      description: The GitBook User info shown in the BackOffice.
      properties:
        id:
          type: string
        authProviders:
          type: array
          items:
            $ref: "#/components/schemas/FirebaseUserInfo"
        createdAt:
          type: string
        lastSignInAt:
          type: string
        disabled:
          type: boolean
      required:
        - id
        - authProviders
        - createdAt
        - lastSignInAt
        - disabled
    BlockContext:
      type: object
      description: The context to send when blocking/unblocking
      properties:
        block:
          type: boolean
      required:
        - block
    UserImpersonationInfo:
      type: object
      description: The GitBook User impersonation info.
      properties:
        authURL:
          type: string
        impersonatorId:
          type: string
      required:
        - authURL
        - impersonatorId
    UserImpersonation:
      type: object
      description: The info returned when impersonating a GitBook User.
      allOf:
        - $ref: "#/components/schemas/UserBackOfficeInfo"
        - type: object
          properties:
            impersonation:
              $ref: "#/components/schemas/UserImpersonationInfo"
          required:
            - impersonation
    UserOrganizationsTeamsPermissions:
      type: object
      description: The teams permissions of a user
      properties:
        role:
          $ref: "#/components/schemas/TeamMemberRole"
      required:
        - role
    UserOrganizationsPermissions:
      type: object
      description: The organizations permissions of a user
      properties:
        role:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        teams:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/UserOrganizationsTeamsPermissions"
          required:
            - role
        disabled:
          type: boolean
      required:
        - role
        - teams
    UserCollectionsPermissions:
      type: object
      description: The collections permissions of a user
      properties:
        organization:
          type: string
        level:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        collection:
          type: string
      required:
        - organization
        - level
    UserSpacesPermissions:
      type: object
      description: The spaces permissions of a user
      properties:
        organization:
          type: string
        level:
          $ref: "#/components/schemas/MemberRoleOrGuest"
        collection:
          type: string
      required:
        - organization
        - level
    _index:
      type: object
      description: All the permissions of a user
      properties:
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        searchKey:
          type: string
        organizations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/UserOrganizationsPermissions"
        collections:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/UserCollectionsPermissions"
        spaces:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/UserSpacesPermissions"
      required:
        - updatedAt
        - searchKey
        - organizations
        - collections
        - spaces
    SpaceBlockReason:
      type: string
      description: Reason for a space to be blocked
      enum:
        - DMCA
        - THREAT_TYPE_UNSPECIFIED
        - MALWARE
        - SOCIAL_ENGINEERING
        - UNWANTED_SOFTWARE
    BackOfficeSite:
      allOf:
        - $ref: "#/components/schemas/Site"
        - type: object
          properties:
            organization:
              type: string
              description: ID of the organization owning this site
          required:
            - organization
    PublishedSiteContent:
      type: object
      title: Site Content
      properties:
        site:
          type: string
          description: ID of the site matching.
        siteSection:
          type: string
          description: ID of the site-section matching.
        siteSpace:
          type: string
          description: ID of the site-space matching.
        space:
          type: string
          description: ID of the space matching.
        changeRequest:
          type: string
          description: Identifier of the change request being previewed in this URL.
        revision:
          type: string
          description: Identifier of the revision being previewed in this URL.
        pathname:
          type: string
          description: Path of the content relative to the space
        basePath:
          type: string
          description: Prefix of the path in the URL dedicated to the space
        apiToken:
          type: string
          description: Short-lived API token to fetch content related to the space in the context of the URL.
        organization:
          type: string
          description: ID of the organization.
        shareKey:
          type: string
          description: Share link key of the site in case the site was published with share-links.
        complete:
          type: boolean
          description: Whether the resolved site URL is complete and at it's terminal point, meaning no more site path segments can be further expected before any page path segments.
        contextId:
          type: string
          description: Context returned only for a visitor authentication session to track changes in the visitor session context that affect content rendering (used for cache invalidation).
      required:
        - site
        - siteSpace
        - space
        - pathname
        - basePath
        - apiToken
        - organization
        - complete
    PublishedSiteContentLookup:
      oneOf:
        - type: object
          title: Redirect
          properties:
            target:
              type: string
              description: Type of target for the redirect
              enum:
                - application
                - content
                - external
            redirect:
              $ref: "#/components/schemas/URL"
          required:
            - target
            - redirect
        - $ref: "#/components/schemas/PublishedSiteContent"
    UpdateContentPublishingAuth:
      type: object
      properties:
        fallbackURL:
          type: string
          format: uri
          description: A fallback URL that will be used if authentication fails.
    TriggerContentIndexingContext:
      type: object
      description: The context to send when triggering a content indexing.
      properties:
        spaceId:
          type: string
          description: The unique identifier of the Space to index.
        force:
          type: boolean
          description: Whether to force a complete re-indexing of the Space.
      required:
        - spaceId
        - force
    ContentPublishingAuth:
      type: object
      properties:
        object:
          type: string
          description: Type of Object, always equals to "publishing-auth"
          enum:
            - publishing-auth
        id:
          type: string
          description: Unique identifier for the content.
        privateKey:
          type: string
          description: Private key used to sign JWT tokens.
        fallbackURL:
          type: string
          format: uri
          description: URL to redirect to when the visitor auth secret is invalid.
      required:
        - object
        - id
        - privateKey
    DocumentBlock:
      oneOf:
        - $ref: "#/components/schemas/DocumentBlockParagraph"
        - $ref: "#/components/schemas/DocumentBlockHeading"
        - $ref: "#/components/schemas/DocumentBlockListOrdered"
        - $ref: "#/components/schemas/DocumentBlockListUnordered"
        - $ref: "#/components/schemas/DocumentBlockListTasks"
        - $ref: "#/components/schemas/DocumentBlockListItem"
        - $ref: "#/components/schemas/DocumentBlockDivider"
        - $ref: "#/components/schemas/DocumentBlockQuote"
        - $ref: "#/components/schemas/DocumentBlockHint"
        - $ref: "#/components/schemas/DocumentBlockImages"
        - $ref: "#/components/schemas/DocumentBlockImage"
        - $ref: "#/components/schemas/DocumentBlockFile"
        - $ref: "#/components/schemas/DocumentBlockDrawing"
        - $ref: "#/components/schemas/DocumentBlockEmbed"
        - $ref: "#/components/schemas/DocumentBlockCode"
        - $ref: "#/components/schemas/DocumentBlockCodeLine"
        - $ref: "#/components/schemas/DocumentBlockMath"
        - $ref: "#/components/schemas/DocumentBlockExpandable"
        - $ref: "#/components/schemas/DocumentBlockTabs"
        - $ref: "#/components/schemas/DocumentBlockTabsItem"
        - $ref: "#/components/schemas/DocumentBlockTable"
        - $ref: "#/components/schemas/DocumentBlockOpenAPI"
        - $ref: "#/components/schemas/DocumentBlockContentRef"
        - $ref: "#/components/schemas/DocumentBlockIntegration"
        - $ref: "#/components/schemas/DocumentBlockReusableContent"
        - $ref: "#/components/schemas/DocumentBlockStepper"
        - $ref: "#/components/schemas/DocumentBlockStepperStep"
    InputPageBase:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: |
                Optional unique identifier for the page.
                It can be used to reference pages in document links.
            title:
              type: string
              minLength: 1
          required:
            - title
        - oneOf:
            - type: object
              properties:
                emoji:
                  description: Emoji of the page.
                  $ref: "#/components/schemas/Emoji"
              required:
                - emoji
            - type: object
              properties:
                icon:
                  description: Icon of the page.
                  $ref: "#/components/schemas/Icon"
    InputPageDocument:
      allOf:
        - $ref: "#/components/schemas/InputPageBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - document
            description:
              type: string
              maxLength: 300
              minLength: 0
            slug:
              description: Page's slug in its direct parent
              type: string
            pages:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/InputPageDocument"
                  - $ref: "#/components/schemas/InputPageLink"
                  - $ref: "#/components/schemas/InputPageComputed"
            computed:
              $ref: "#/components/schemas/ComputedContentSource"
          required:
            - type
    InputPageLink:
      allOf:
        - $ref: "#/components/schemas/InputPageBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - link
            target:
              $ref: "#/components/schemas/ContentRef"
          required:
            - type
            - target
    InputPageComputed:
      allOf:
        - $ref: "#/components/schemas/InputPageBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - computed
            computed:
              $ref: "#/components/schemas/ComputedContentSource"
          required:
            - type
            - computed
    InputPageGroup:
      allOf:
        - $ref: "#/components/schemas/InputPageBase"
        - type: object
          properties:
            type:
              type: string
              enum:
                - group
            slug:
              description: Page's slug in its direct parent
              type: string
            pages:
              type: array
              minLength: 1
              items:
                oneOf:
                  - $ref: "#/components/schemas/InputPageDocument"
                  - $ref: "#/components/schemas/InputPageLink"
                  - $ref: "#/components/schemas/InputPageComputed"
          required:
            - type
            - pages
    InputPage:
      oneOf:
        - $ref: "#/components/schemas/InputPageDocument"
        - $ref: "#/components/schemas/InputPageLink"
        - $ref: "#/components/schemas/InputPageComputed"
        - $ref: "#/components/schemas/InputPageGroup"
    InputFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        downloadURL:
          type: string
        size:
          type: number
        dimensions:
          type: object
          description: For images, it contains the dimensions of it.
          properties:
            width:
              type: number
            height:
              type: number
          required:
            - width
            - height
      required:
        - name
        - contentType
        - downloadURL
        - size
    RevisionSemanticChangeType:
      type: string
      description: The type of semantic change.
      enum:
        - page_created
        - page_edited
        - page_deleted
        - page_moved
        - file_created
        - file_edited
        - file_deleted
        - custom_fields_edited
    GitSyncOperationState:
      type: string
      description: |
        * `running`: The operation is still running
        * `failure`: The operation failed
        * `success`: The operation was successful
      enum:
        - running
        - failure
        - success
    GitSyncOperationDirection:
      type: string
      enum:
        - export
        - import
    GitSyncOperationStage:
      type: string
      description: |
        Core stages of a Git Sync process. This is not exhaustive, but should cover
        the important ones.
        - repo_fetch: Includes fetching the latest repository contents from remote provider.
        - config_check: Includes checking if the YAML config is valid, etc.
        - content_process: Includes processing of pages & files to be imported/exported.
        - finalize: Includes finalizing the sync process like creating the commit on git, or
        creating a new revision.
      enum:
        - repo_fetch
        - config_check
        - content_process
        - finalize
    GitSyncOperation:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/GitSyncOperationState"
        direction:
          $ref: "#/components/schemas/GitSyncOperationDirection"
        stage:
          $ref: "#/components/schemas/GitSyncOperationStage"
        dispatchedTasks:
          type: number
        completedTasks:
          type: number
        startedAt:
          description: Date when the operation was started
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          description: Date when the operation was last updated
          $ref: "#/components/schemas/Timestamp"
        completedAt:
          description: Date when the operation was successful (when state is `success`)
          $ref: "#/components/schemas/Timestamp"
        error:
          type: string
          description: Error details, defined if state is `failure`.
      required:
        - state
        - direction
        - stage
        - dispatchedTasks
        - completedTasks
        - startedAt
        - updatedAt
    OrganizationTransferResponse:
      type: object
      required:
        - collection
      properties:
        collection:
          type: string
          description: The unique id of the collection created in the target organization containing the content of the source organization.
        newSourceHostname:
          type: string
          description: The new hostname if the source organization needed to change hostname.
    IntegrationEnvironmentSpaceInstallation:
      allOf:
        - $ref: "#/components/schemas/IntegrationContentInstallationBase"
        - type: object
          properties:
            space:
              description: The space the integration is installed on.
              type: string
          required:
            - space
    IntegrationEnvironmentSiteInstallation:
      allOf:
        - $ref: "#/components/schemas/IntegrationContentInstallationBase"
        - type: object
          properties:
            site:
              description: The site the integration is installed on.
              type: string
          required:
            - site
    IntegrationEnvironment:
      type: object
      description: Runtime environment provided during the execution of integration's code.
      properties:
        authToken:
          type: string
          description: Authentication token to use with the HTTP API. Depending on the context, the token might be representing the installation or the integration.
          deprecated: true
        integration:
          $ref: "#/components/schemas/Integration"
        installation:
          $ref: "#/components/schemas/IntegrationInstallation"
        spaceInstallation:
          $ref: "#/components/schemas/IntegrationEnvironmentSpaceInstallation"
        siteInstallation:
          $ref: "#/components/schemas/IntegrationEnvironmentSiteInstallation"
        secrets:
          $ref: "#/components/schemas/IntegrationSecrets"
        signingSecret:
          type: string
          description: Secret that can be used to verify the authenticity of incoming HTTP requests to the integration.
          deprecated: true
        signingSecrets:
          type: object
          properties:
            integration:
              type: string
              description: Secret that can be used to verify the authenticity of incoming HTTP requests to the integration.
            installation:
              type: string
              description: Secret that can be used to verify the authenticity of incoming HTTP requests to the installation.
            spaceInstallation:
              type: string
              description: Secret that can be used to verify the authenticity of incoming HTTP requests to the space installation.
            siteInstallation:
              type: string
              description: Secret that can be used to verify the authenticity of incoming HTTP requests to the site installation.
          required:
            - integration
        apiEndpoint:
          type: string
          description: URL of the HTTP API
        apiTokens:
          type: object
          properties:
            integration:
              type: string
              description: API authentication token representing the integration.
            installation:
              type: string
              description: API authentication token representing the current installation.
          required:
            - integration
      required:
        - apiEndpoint
        - apiTokens
        - integration
        - signingSecrets
        - secrets
    ContentComputeDocumentEventResponse:
      type: object
      description: Response expected for an event of type `content_compute_document`.
      properties:
        document:
          $ref: "#/components/schemas/Document"
      required:
        - document
    ContentComputeRevisionEventResponse:
      type: object
      description: Response expected for an event of type `content_compute_pages`.
      properties:
        pages:
          type: array
          items:
            $ref: "#/components/schemas/InputPage"
        files:
          type: array
          items:
            $ref: "#/components/schemas/InputFile"
    BillingTrialStatus:
      type: string
      enum:
        - notapplicable
        - none
        - active
        - ended
        - expired
    APIIntegrationScope:
      type: string
      enum:
        - integration:read
        - integration:update
        - integration:installation:read
        - integration:installation:update
    APIScope:
      anyOf:
        - $ref: "#/components/schemas/IntegrationScope"
        - $ref: "#/components/schemas/APIIntegrationScope"
    ContentAPIBaseToken:
      type: object
      description: Common properties for all Content API tokens.
      properties:
        organization:
          type: string
          description: ID of the organization that owns the content. A content token is always scoped to spaces from the same organization.
        spaces:
          type: array
          items:
            type: string
          description: List of spaces that the token is allowed to access.
        claims:
          type: object
          description: Attributes or assertions that provide specific details about the visitor for which the token was generated.
          additionalProperties: true
        rateLimitMultiplier:
          type: number
          description: Multiplier for the rate limit applied to the token.
      required:
        - organization
        - spaces
    SpaceAPIToken:
      allOf:
        - $ref: "#/components/schemas/ContentAPIBaseToken"
        - type: object
          properties:
            kind:
              type: string
              enum:
                - space
            space:
              type: string
              description: ID of the space that the token is allowed to access.
          required:
            - kind
            - space
    CollectionAPIToken:
      allOf:
        - $ref: "#/components/schemas/ContentAPIBaseToken"
        - type: object
          properties:
            kind:
              type: string
              enum:
                - collection
            collection:
              type: string
              description: ID of the collection that the token is allowed to access.
          required:
            - kind
            - collection
    SiteAPIToken:
      allOf:
        - $ref: "#/components/schemas/ContentAPIBaseToken"
        - type: object
          properties:
            kind:
              type: string
              enum:
                - site
            site:
              type: string
              description: ID of the site that the token is allowed to access.
            siteSpace:
              type: string
              description: ID of the site-space to be used when using this token for rendering published content.
            siteSection:
              type: string
              description: ID of the site-section to be used when using this token for rendering published content. Only defined for section sites.
            space:
              type: string
              description: ID of the space to be used when using this token for rendering published content.
          required:
            - kind
            - site
            - siteSpace
            - space
    ContentAPITokenPayload:
      description: Content properties stored in a Content API token.
      oneOf:
        - $ref: "#/components/schemas/SpaceAPIToken"
        - $ref: "#/components/schemas/CollectionAPIToken"
        - $ref: "#/components/schemas/SiteAPIToken"
    SpaceInfoChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space
        space:
          type: string
      required:
        - channel
        - space
    SpaceContentChannel:
      type: object
      description: Channel notified when the main content of a space is changed.
      properties:
        channel:
          type: string
          enum:
            - space-content
        space:
          type: string
      required:
        - channel
        - space
    SpaceGitInfoChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-git-info
        space:
          type: string
      required:
        - channel
        - space
    SpacePublishingAuthChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-publishing-auth
        space:
          type: string
      required:
        - channel
        - space
    SpacePublishingCustomizationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-publishing-customization
        space:
          type: string
      required:
        - channel
        - space
    SpaceCustomFieldsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-customfields
        space:
          type: string
      required:
        - channel
        - space
    SpaceContentRefsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-content-refs
        space:
          type: string
      required:
        - channel
        - space
    SpaceIntegrationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-integrations
        space:
          type: string
      required:
        - channel
        - space
    OrganizationCustomFieldsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-customfields
        organization:
          type: string
      required:
        - channel
        - organization
    UserAPITokensChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - user-api-tokens
        user:
          type: string
      required:
        - channel
        - user
    UserOrganizationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - user-organizations
        user:
          type: string
      required:
        - channel
        - user
    UserProfileChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - user-profile
        user:
          type: string
      required:
        - channel
        - user
    ChangeRequestChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-change-request
        space:
          type: string
        changeRequest:
          type: string
      required:
        - channel
        - space
        - changeRequest
    ChangeRequestsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-change-requests
        space:
          type: string
      required:
        - channel
        - space
    ChangeRequestReviewsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-change-request-reviews
        space:
          type: string
        changeRequest:
          type: string
      required:
        - channel
        - space
        - changeRequest
    ChangeRequestContentRefsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-change-request-content-refs
        space:
          type: string
        changeRequest:
          type: string
      required:
        - channel
        - space
        - changeRequest
    CollectionChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - collection
        collection:
          type: string
      required:
        - channel
        - collection
    CollectionPublishingCustomizationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - collection-publishing-customization
        collection:
          type: string
      required:
        - channel
        - collection
    OrganizationInfoChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationInviteLinksChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-link-invites
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationMembersChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-members
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationMemberChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-member
        organization:
          type: string
        user:
          type: string
      required:
        - channel
        - organization
        - user
    OrganizationSAMLChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-saml
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationTeamsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-teams
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationTeamChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-team
        organization:
          type: string
        team:
          type: string
      required:
        - channel
        - organization
        - team
    OrganizationTeamMembersChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-team-members
        organization:
          type: string
        team:
          type: string
      required:
        - channel
        - organization
        - team
    OrganizationTeamMemberChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-team-member
        organization:
          type: string
        team:
          type: string
        member:
          type: string
      required:
        - channel
        - organization
        - member
    OrganizationSpacesChannel:
      type: object
      description: Subscription channel for changes in spaces in an organization.
      properties:
        channel:
          type: string
          enum:
            - organization-spaces
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationCollectionsChannel:
      type: object
      description: Subscription channel for changes in collections in an organization.
      properties:
        channel:
          type: string
          enum:
            - organization-collections
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationCapturesChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-captures
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationIntegrationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-integrations
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationInstallationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-installations
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationSitesChannel:
      type: object
      description: Subscription channel for changes in sites in an organization.
      properties:
        channel:
          type: string
          enum:
            - organization-sites
        organization:
          type: string
      required:
        - channel
        - organization
    OrganizationAIIndexationChannel:
      type: object
      description: Channel for messages everytime a space is indexed by the AI in an organization
      properties:
        channel:
          type: string
          enum:
            - organization-ai-indexation
        organization:
          type: string
      required:
        - channel
        - organization
    SpaceCommentsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-comments
        space:
          type: string
      required:
        - channel
        - space
    ChangeRequestCommentsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-change-request-comments
        space:
          type: string
        changeRequest:
          type: string
      required:
        - channel
        - space
        - changeRequest
    CommentInfoChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-comment
        space:
          type: string
        comment:
          type: string
      required:
        - channel
        - space
        - comment
    CommentReplyInfoChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-comment-reply
        space:
          type: string
        comment:
          type: string
        commentReply:
          type: string
      required:
        - channel
        - space
        - comment
        - commentReply
    CommentRepliesChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-comment-replies
        space:
          type: string
        comment:
          type: string
      required:
        - channel
        - space
        - comment
    IntegrationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - integration
        integration:
          type: string
      required:
        - channel
        - integration
    IntegrationInstallationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - integration-installation
        integration:
          type: string
        installation:
          type: string
      required:
        - channel
        - integration
        - installation
    IntegrationSpaceInstallationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - integration-space-installation
        integration:
          type: string
        installation:
          type: string
        space:
          type: string
      required:
        - channel
        - integration
        - installation
        - space
    IntegrationSpaceInstallationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - integration-space-installations
        integration:
          type: string
        installation:
          type: string
      required:
        - channel
        - integration
        - installation
    IntegrationSiteInstallationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - integration-site-installation
        integration:
          type: string
        installation:
          type: string
        site:
          type: string
      required:
        - channel
        - integration
        - installation
        - site
    IntegrationSiteInstallationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - integration-site-installations
        integration:
          type: string
        installation:
          type: string
      required:
        - channel
        - integration
        - installation
    PublishedContentSiteChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - published-content-site
        site:
          type: string
      required:
        - channel
        - site
    SiteRedirectsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-redirects
        site:
          type: string
      required:
        - channel
        - site
    SiteChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site
        site:
          type: string
      required:
        - channel
        - site
    SiteCustomizationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-customization
        site:
          type: string
      required:
        - channel
        - site
    SiteIntegrationsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-integrations
        site:
          type: string
      required:
        - channel
        - site
    SiteSpaceChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-space
        site:
          type: string
        siteSpace:
          type: string
      required:
        - channel
        - site
        - siteSpace
    SiteSpaceCustomizationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-space-customization
        site:
          type: string
        siteSpace:
          type: string
      required:
        - channel
        - site
        - siteSpace
    SiteStructureChannel:
      type: object
      description: Subscription channel for changes in site structure in an organization.
      properties:
        channel:
          type: string
          enum:
            - site-structure
        site:
          type: string
      required:
        - channel
        - site
    SitePublishingAuthChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-publishing-auth
        site:
          type: string
      required:
        - channel
        - site
    SiteShareLinksChannel:
      type: object
      description: Subscription channel for changes in share links in a site
      properties:
        channel:
          type: string
          enum:
            - site-share-links
        site:
          type: string
      required:
        - channel
        - site
    SiteShareLinkChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-share-link
        site:
          type: string
        siteShareLink:
          type: string
      required:
        - channel
        - site
        - siteShareLink
    SiteSectionChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - site-section
        site:
          type: string
        siteSection:
          type: string
      required:
        - channel
        - site
        - siteSection
    CustomHostnameChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - custom-hostname
        customHostname:
          type: string
      required:
        - channel
        - customHostname
    GitSyncSettingsChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-gitsync-settings
        space:
          type: string
      required:
        - channel
        - space
    GitSyncOperationChannel:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-gitsync-operation
        space:
          type: string
      required:
        - channel
        - space
    SubscriptionChannel:
      description: Channel to subscribe to for realtime updates.
      oneOf:
        - $ref: "#/components/schemas/SpaceInfoChannel"
        - $ref: "#/components/schemas/SpaceContentChannel"
        - $ref: "#/components/schemas/SpaceGitInfoChannel"
        - $ref: "#/components/schemas/SpacePublishingAuthChannel"
        - $ref: "#/components/schemas/SpacePublishingCustomizationChannel"
        - $ref: "#/components/schemas/SpaceCustomFieldsChannel"
        - $ref: "#/components/schemas/SpaceContentRefsChannel"
        - $ref: "#/components/schemas/SpaceIntegrationsChannel"
        - $ref: "#/components/schemas/OrganizationCustomFieldsChannel"
        - $ref: "#/components/schemas/UserAPITokensChannel"
        - $ref: "#/components/schemas/UserOrganizationsChannel"
        - $ref: "#/components/schemas/UserProfileChannel"
        - $ref: "#/components/schemas/ChangeRequestChannel"
        - $ref: "#/components/schemas/ChangeRequestsChannel"
        - $ref: "#/components/schemas/ChangeRequestReviewsChannel"
        - $ref: "#/components/schemas/ChangeRequestContentRefsChannel"
        - $ref: "#/components/schemas/CollectionChannel"
        - $ref: "#/components/schemas/CollectionPublishingCustomizationChannel"
        - $ref: "#/components/schemas/OrganizationInfoChannel"
        - $ref: "#/components/schemas/OrganizationInviteLinksChannel"
        - $ref: "#/components/schemas/OrganizationMembersChannel"
        - $ref: "#/components/schemas/OrganizationMemberChannel"
        - $ref: "#/components/schemas/OrganizationSAMLChannel"
        - $ref: "#/components/schemas/OrganizationTeamsChannel"
        - $ref: "#/components/schemas/OrganizationTeamChannel"
        - $ref: "#/components/schemas/OrganizationTeamMembersChannel"
        - $ref: "#/components/schemas/OrganizationTeamMemberChannel"
        - $ref: "#/components/schemas/OrganizationSpacesChannel"
        - $ref: "#/components/schemas/OrganizationCollectionsChannel"
        - $ref: "#/components/schemas/OrganizationCapturesChannel"
        - $ref: "#/components/schemas/OrganizationIntegrationsChannel"
        - $ref: "#/components/schemas/OrganizationInstallationsChannel"
        - $ref: "#/components/schemas/OrganizationSitesChannel"
        - $ref: "#/components/schemas/OrganizationAIIndexationChannel"
        - $ref: "#/components/schemas/SpaceCommentsChannel"
        - $ref: "#/components/schemas/ChangeRequestCommentsChannel"
        - $ref: "#/components/schemas/CommentInfoChannel"
        - $ref: "#/components/schemas/CommentReplyInfoChannel"
        - $ref: "#/components/schemas/CommentRepliesChannel"
        - $ref: "#/components/schemas/IntegrationChannel"
        - $ref: "#/components/schemas/IntegrationInstallationChannel"
        - $ref: "#/components/schemas/IntegrationSpaceInstallationChannel"
        - $ref: "#/components/schemas/IntegrationSpaceInstallationsChannel"
        - $ref: "#/components/schemas/IntegrationSiteInstallationChannel"
        - $ref: "#/components/schemas/IntegrationSiteInstallationsChannel"
        - $ref: "#/components/schemas/PublishedContentSiteChannel"
        - $ref: "#/components/schemas/SiteRedirectsChannel"
        - $ref: "#/components/schemas/SiteChannel"
        - $ref: "#/components/schemas/SiteCustomizationChannel"
        - $ref: "#/components/schemas/SiteIntegrationsChannel"
        - $ref: "#/components/schemas/SiteSpaceChannel"
        - $ref: "#/components/schemas/SiteSpaceCustomizationChannel"
        - $ref: "#/components/schemas/SiteStructureChannel"
        - $ref: "#/components/schemas/SitePublishingAuthChannel"
        - $ref: "#/components/schemas/SiteShareLinksChannel"
        - $ref: "#/components/schemas/SiteShareLinkChannel"
        - $ref: "#/components/schemas/SiteSectionChannel"
        - $ref: "#/components/schemas/CustomHostnameChannel"
        - $ref: "#/components/schemas/GitSyncSettingsChannel"
        - $ref: "#/components/schemas/GitSyncOperationChannel"
      discriminator:
        propertyName: channel
    GitSyncOperationChannelData:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-gitsync-operation
        data:
          $ref: "#/components/schemas/GitSyncOperation"
      required:
        - channel
        - data
    SpaceContentRefsChannelData:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-content-refs
        data:
          type: object
          description: Data passed on the channel messages for content refs indexation.
          properties:
            revision:
              type: string
              description: ID of the latest indexed revision
            updatedAt:
              type: number
          required:
            - revision
            - updatedAt
      required:
        - channel
        - data
    ChangeRequestContentRefsChannelData:
      type: object
      properties:
        channel:
          type: string
          enum:
            - space-change-request-content-refs
        data:
          type: object
          description: Data passed on the channel messages for content refs indexation.
          properties:
            revision:
              type: string
              description: ID of the latest indexed revision
            updatedAt:
              type: number
          required:
            - revision
            - updatedAt
      required:
        - channel
        - data
    OrganizationAIIndexationChannelData:
      type: object
      properties:
        channel:
          type: string
          enum:
            - organization-ai-indexation
        data:
          type: object
          properties:
            space:
              type: string
              description: The space that was indexed
          required:
            - space
      required:
        - channel
        - data
    APIChannelMutationData:
      type: object
      properties:
        channel:
          type: string
          enum:
            - "*"
        data:
          type: object
          description: Data passed on the channels associated to API endpoints.
          properties:
            executionId:
              type: string
              description: ID of the API execution that triggered the mutation.
          required:
            - executionId
      required:
        - channel
        - data
    SubscriptionChannelData:
      description: Data passed through a realtime channel
      oneOf:
        - $ref: "#/components/schemas/GitSyncOperationChannelData"
        - $ref: "#/components/schemas/SpaceContentRefsChannelData"
        - $ref: "#/components/schemas/ChangeRequestContentRefsChannelData"
        - $ref: "#/components/schemas/OrganizationAIIndexationChannelData"
        - $ref: "#/components/schemas/APIChannelMutationData"
      discriminator:
        propertyName: channel
    SiteAdsStatus:
      type: string
      description: The status of ads on the site
      enum:
        - pending
        - in-review
        - live
        - rejected
        - disabled
    Seat:
      type: object
      properties:
        object:
          type: string
          enum:
            - seat
        organization:
          description: The unique ID of the organization
          type: string
        member:
          description: The unique ID of the organization member
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - object
        - organization
        - member
        - createdAt
        - updatedAt
    RequestSpaceTrackPageView:
      $ref: "#/components/schemas/SpaceTrackPageView"
    RequestSiteTrackPageView:
      $ref: "#/components/schemas/SiteTrackPageView"
    RequestPublishIntegration:
      $ref: "#/components/schemas/PublishIntegration"
    RequestUpdateIntegrationInstallation:
      $ref: "#/components/schemas/UpdateIntegrationInstallation"
    RequestUpdateIntegrationSpaceInstallation:
      $ref: "#/components/schemas/UpdateIntegrationSpaceInstallation"
    RequestUpdateIntegrationSiteInstallation:
      $ref: "#/components/schemas/UpdateIntegrationSiteInstallation"
    RequestUpgradeOrganizationBilling:
      $ref: "#/components/schemas/UpgradeOrganizationBilling"
    RequestInviteUsersToOrganization:
      $ref: "#/components/schemas/InviteUsersToOrganization"
    RequestImportGitRepository:
      $ref: "#/components/schemas/ImportGitRepository"
    RequestExportToGitRepository:
      $ref: "#/components/schemas/ExportToGitRepository"
    RequestImportContent:
      $ref: "#/components/schemas/ImportContent"
    RequestCreateSpace:
      $ref: "#/components/schemas/CreateSpace"
    RequestCreateChangeRequest:
      $ref: "#/components/schemas/CreateChangeRequest"
    RequestRenderIntegrationUI:
      $ref: "#/components/schemas/RenderIntegrationUI"
    RequestUpdateContentPublishingAuth:
      $ref: "#/components/schemas/UpdateContentPublishingAuth"
    RequestCreateOrganization:
      $ref: "#/components/schemas/CreateOrganization"
    RequestUpdateSpaceGitInfo:
      $ref: "#/components/schemas/UpdateSpaceGitInfo"
    RequestPurgeCDNCacheContext:
      $ref: "#/components/schemas/PurgeCDNCacheContext"
    SpaceVisitorAuth:
      $ref: "#/components/schemas/VisitorAuth"
    SpaceVisitorAuthCustomBackend:
      $ref: "#/components/schemas/VisitorAuthCustomBackend"
    SpaceVisitorAuthIntegrationBackend:
      $ref: "#/components/schemas/VisitorAuthIntegrationBackend"
    UserPermissions:
      $ref: "#/components/schemas/_index"
    SiteRedirectDestinationSpace:
      $ref: "#/components/schemas/SiteRedirectDestinationSiteSpace"
  responses:
    UnexpectedError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    enum:
                      - 400
                  message:
                    type: string
                required:
                  - code
                  - message
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    enum:
                      - 404
                  message:
                    type: string
                required:
                  - code
                  - message
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    enum:
                      - 409
                  message:
                    type: string
                required:
                  - code
                  - message
    PreconditionFailedError:
      description: PreconditionFailed
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    enum:
                      - 412
                  message:
                    type: string
                required:
                  - code
                  - message
